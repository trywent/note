dalvik/vm/Jni.cpp

=============================
本地方法访问类中成员:
0,获得对象的类
1,获得成员在类中的id。(获得class中位置)
2,根据获得的id，从类的实例中获得成员的实例。(根据位置获得instance中的成员)

_______________________
获取对象成员：
首先获得类GetObjectClass
jclass GetObjectClass(JNIEnv *env, jobject obj);

-----------------------------
获取对象域：
获取域ID：
jfieldID GetFieldID(JNIEnv *env, jclass clazz,const char *name, const char *sig);

获得域的实例：
Get<type>Field Routines：获取对应类型域的值
NativeType Get<type>Field(JNIEnv *env, jobject obj,jfieldID fieldID);
Set<type>Field：设置域的值
void Set<type>Field(JNIEnv *env, jobject obj, jfieldID fieldID,NativeType value);

-----------------------------
获取对象方法：
GetMethodID
jmethodID GetMethodID(JNIEnv *env, jclass clazz,const char *name, const char *sig);

调用方法：
NativeType Call<type>Method(JNIEnv *env, jobject obj,jmethodID methodID, ...);

NativeType Call<type>MethodA(JNIEnv *env, jobject obj,jmethodID methodID, const jvalue *args);

NativeType Call<type>MethodV(JNIEnv *env, jobject obj,jmethodID methodID, va_list args);

——————————————————————————————
static

访问静态域：
GetStaticFieldID
jfieldID GetStaticFieldID(JNIEnv *env, jclass clazz,const char *name, const char *sig);

获得静态域实例：
NativeType GetStatic<type>Field(JNIEnv *env, jclass clazz,jfieldID fieldID);
设置静态域
void SetStatic<type>Field(JNIEnv *env, jclass clazz,jfieldID fieldID, NativeType value);


静态方法：
GetStaticMethodID
jmethodID GetStaticMethodID(JNIEnv *env, jclass clazz,const char *name, const char *sig);

On_load
The VM calls JNI_OnLoad when the native library is loaded (for example, through System.loadLibrary)

========================
数据类型转换：
java-->native:
env->GetStringUTFChars(idObj, NULL)


natvie-->java:


========================
抛异常：
jint Throw(JNIEnv *env, jthrowable obj);
jint ThrowNew(JNIEnv *env, jclass clazz,const char *message);

本地代码处理异常：(当出现异常时，本地代码必须处理，否则出现不可预料结果)
(*env)->GetMethodID  //调用java方法
(*env)->ExceptionOccurred(env); //检查是否出现异常
void ExceptionDescribe(JNIEnv *env);//打印异常信息
void ExceptionClear(JNIEnv *env);// 清除异常
(*env)->ThrowNew(env, newExcCls, "thrown from C code"); //向java层抛出异常

========================
文档
1. 创建一个类(HelloWorld.java),声明native方法
2. 使用 javac 编译该类
3. 利用 javah -jni 产生头文件，其中会包括native方法的声明
4. 用本地代码实现头文件中定义的方法，编译生成相应的库
5. 加载库，Run

步骤：
参数的传递：
一般JNI方法中的参数，JNIEnv，jobject,转换参数
字符串转换：env-->getStringUTFChars返回装载字符串的字符数组指针
使用完后要调用env-->releaseStringUTFChars释放装换后的空间


_________________________
Java VM Type Signatures
Type Signature			 Java Type
Z				 boolean
B				 byte
C				 char
S				 short
I				 int
J				 long
F				 float
D				 double
L fully-qualified-class ;	 fully-qualified-class
[ type				 type[]
( arg-types ) ret-type		 method type
V                                void

For example, the Java method:
long f (int n, String s, int[] arr);
has the following type signature:

(ILjava/lang/String;[I)J


=========================
JNI命名：
jni中函数通过"_"分隔包名，类名。若方法中含有"_"则会转换成"_1"进行区分
