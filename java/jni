/********************
  jni允许虚拟机中运行的java代码和，c,c++代码交互

  java native code 当前平台(x86,arm)的代码。区分于字节码(被java虚拟机执行)
*/

//jni接口
typedef const struct JNINativeInterface *JNIEnv;
const struct JNINativeInterface ... = {
    NULL,
    GetVersion,
    DefineClass,
    GetObjectClass,

    GetMethodID,
    CallObjectMethod,
    CallObjectMethodV,

    GetFieldID,
    GetObjectField,
    GetBooleanField,

    NewString,
    NewBooleanArray,
    NewByteArray,
    ReleaseBooleanArrayElements,
    ReleaseByteArrayElements,

    RegisterNatives,
    UnregisterNatives,
}@dalvik/vm/Jni.cpp

/********************
 使用jni
 java中的native代码通过jni接口访问 java VM功能。jni接口定义了一个函数表，通过一个指针传递到native

*/

//动态加载库
static {
   System.loadLibrary("libxxx");
}

//静态链接库到VM
1 静态链接的库名xxx，必须定义一个函数JNI_OnLoad_xxx
2 System.loadLibrary("xxx")，和动态调用一样

//navite函数命名：
- Java_前缀
- 包名类名
- '_'下划线
- 方法名
- 参数

转义字符
_0XXXX 	a Unicode character XXXX.
_1 	the character "_"
_2 	the character ";" in signatures
_3 	the character "[" in signatures 

//注册jni函数
jniRegisterNativeMethods@JNIHelp.cpp-->(*env)->RegisterNatives-->
RegisterNatives(遍历methods注册)-->dvmRegisterJNIMethod@Jni.cpp


/*
 native函数参数。
 java vm创建一个注册表，将所有从java传递到native的对象加入表中。防止对象被垃圾回收
*/
jdouble Java_pkg_Cls_f__ILjava_lang_String_2 (
     JNIEnv *env,        /* interface pointer jni接口指针用于调用jni相关接口*/
     jobject obj,        /* "this" pointer 类的对象*/
     jint i,             /* argument #1 */
     jstring s)          /* argument #2 */

//locale reference只在当前调用中有效（当前线程有效，有可能是栈中创建的？）。本地函数调用返回后，会自动释放。也可以主动释放
- 传入native code的对象都是本地引用
- 从native code返回的对象都是本地引用

//global reference需要主动释放
- jobject NewGlobalRef(JNIEnv *env, jobject obj); 	//创建全局引用
- void DeleteGlobalRef(JNIEnv *env, jobject globalRef);

/*
 本地方法访问类中成员
 
*/
0,获得对象的类
1,获得成员在类中的id。(获得class中位置)
2,根据获得的id，从类的实例中获得成员的实例。(根据位置获得instance中的成员)

//首先获得类GetObjectClass
jclass GetObjectClass(JNIEnv *env, jobject obj);

//获取域ID,并获取/设置域值
jfieldID GetFieldID(JNIEnv *env, jclass clazz,const char *name, const char *sig);
NativeType Get<type>Field(JNIEnv *env, jobject obj,jfieldID fieldID);			//获取对应类型域的值
void Set<type>Field(JNIEnv *env, jobject obj, jfieldID fieldID,NativeType value);	//设置域的值

jfieldID GetStaticFieldID(JNIEnv *env, jclass clazz,const char *name, const char *sig);	//访问静态域
NativeType GetStatic<type>Field(JNIEnv *env, jclass clazz,jfieldID fieldID);		//获得静态域实例
void SetStatic<type>Field(JNIEnv *env, jclass clazz,jfieldID fieldID, NativeType value);//设置静态域

//获取对象方法，并调用
jmethodID GetMethodID(JNIEnv *env, jclass clazz,const char *name, const char *sig);
NativeType Call<type>Method(JNIEnv *env, jobject obj,jmethodID methodID, ...);		//调用方法
NativeType Call<type>MethodA(JNIEnv *env, jobject obj,jmethodID methodID, const jvalue *args);
NativeType Call<type>MethodV(JNIEnv *env, jobject obj,jmethodID methodID, va_list args);

jmethodID GetStaticMethodID(JNIEnv *env, jclass clazz,const char *name, const char *sig);//静态方法

//注册方法
jint RegisterNatives(JNIEnv *env, jclass clazz,const JNINativeMethod *methods, jint nMethods);
jint UnregisterNatives(JNIEnv *env, jclass clazz);
typedef struct {
    char *name;		//方法名
    char *signature;	//参数符
    void *fnPtr;	//本地方法指针
} JNINativeMethod;
/*
 异常
*/
//抛异常：
jint Throw(JNIEnv *env, jthrowable obj);
jint ThrowNew(JNIEnv *env, jclass clazz,const char *message);

本地代码处理异常：(当出现异常时，本地代码必须处理，否则出现不可预料结果)
(*env)->GetMethodID 			//调用java方法
(*env)->ExceptionOccurred(env); 	//检查是否出现异常
void ExceptionDescribe(JNIEnv *env);	//打印异常信息
void ExceptionClear(JNIEnv *env);	// 清除异常
(*env)->ThrowNew(env, newExcCls, "thrown from C code"); //向java层抛出异常


/*
 数据类型
*/
Java Type 	Native Type 	Description
boolean 	jboolean 	unsigned 8 bits
byte 		jbyte 		signed 8 bits
char 		jchar 		unsigned 16 bits
short 		jshort 		signed 16 bits
int 		jint 		signed 32 bits
long 		jlong 		signed 64 bits
float 		jfloat 		32 bits
double 		jdouble 	64 bits
void 		void 		not applicable

//引用类型
jobject
    jclass (java.lang.Class objects)
    jstring (java.lang.String objects)
    jarray (arrays)
        jobjectArray (object arrays)
        jbooleanArray (boolean arrays)
        jbyteArray (byte arrays)
        jcharArray (char arrays)
        jshortArray (short arrays)
        jintArray (int arrays)
        jlongArray (long arrays)
        jfloatArray (float arrays)
        jdoubleArray (double arrays)
    jthrowable (java.lang.Throwable objects)

//参数中数据类型符
Java VM Type Signatures
Type Signature			 Java Type
Z				 boolean
B				 byte
C				 char
S				 short
I				 int
J				 long
F				 float
D				 double
L fully-qualified-class ;	 fully-qualified-class
[ type				 type[]
( arg-types ) ret-type		 method type
V                                void

long f (int n, String s, int[] arr); ---  (ILjava/lang/String;[I)J


//使用传入的引用数据
const char * GetStringUTFChars(JNIEnv *env, jstring string,jboolean *isCopy) //将java的数据类型转换为native 字符指针
void ReleaseStringUTFChars(JNIEnv *env, jstring string,const char *utf);     //释放创建的native 字符指针	

//返回引用数据。创建的一个java对象由垃圾回收管理。不需要主动释放
jstring NewStringUTF(JNIEnv *env, const char *bytes);

//示例
1. 创建一个类(HelloWorld.java),声明native方法
2. 使用 javac 编译该类
3. 利用 javah -jni 产生头文件，其中会包括native方法的声明
4. 用本地代码实现头文件中定义的方法，编译生成相应的库
5. 加载库，Run


/********************
 c++代码调用java

*/
    #include <jni.h>       /* where everything is defined */
    ...
    JavaVM *jvm;       /* denotes a Java VM */
    JNIEnv *env;       /* pointer to native method interface */
    JavaVMInitArgs vm_args; /* JDK/JRE 6 VM initialization arguments */
    JavaVMOption* options = new JavaVMOption[1];
    options[0].optionString = "-Djava.class.path=/usr/lib/java";
    vm_args.version = JNI_VERSION_1_6;
    vm_args.nOptions = 1;
    vm_args.options = options;
    vm_args.ignoreUnrecognized = false;
    /* load and initialize a Java VM, return a JNI interface
     * pointer in env */
    JNI_CreateJavaVM(&jvm, (void**)&env, &vm_args);
    delete options;
    /* invoke the Main.test method using the JNI */
    jclass cls = env->FindClass("Main");
    jmethodID mid = env->GetStaticMethodID(cls, "test", "(I)V");
    env->CallStaticVoidMethod(cls, mid, 100);
    /* We are done. */
    jvm->DestroyJavaVM();
