/*

*/

规则：在makefile中说明何时，如何构建目标。
targets : prerequisites
	recipe
...
or like this:
targets : prerequisites ; recipe
	recipe

目标：
archive(member) //归档目标

两种依赖：
普通：两个特性
1)处理顺序，对所有依赖处理完后才会处理目标.
2)依赖关系，任何一个依赖比目标新的话，目标需要重构。

order-only:通过(|)符号说明，在符号左边的是普通依赖，在右边的是order-only
	targets : normal-prerequisites(可为空) | order-only-prerequisites
只是用来在生成目标前，先进行一些操作(order-only-prerequisites定义的操作)而这些操作不会作为依赖，不会影响目标
的构建()。


@放在命令之前可以屏蔽输出
-----------------------------------
如果没有指明要执行的目标，则会查找第一个目标执行。伪目标必须显式的指明执行。

目标也可以成为依赖，可以有伪目标像clean

cc -M 或 -MM(不输出标准头文件) 自动生成依赖关系：cc -M test.c  输出 test.o :test.c ...(依赖的头文件)
___________________________________
makefile中变量类似全局变量

= 赋值方式能够产生递归。
:= 只能使用已经定义的变量的值(不会有嵌套发生，如：先后定义x,y。y能够使用x，x不能使用y)
?= 变量被定义后将不会赋值
+=

定义变量：define后可以多行
define var
...
...
endef

特定目标的变量：影响这个目标的所有依赖
target: variable = value

-----------------------------------
变量是一个定义在makefile中的名字，并以文本字符串作为值。
变量和函数一般在读入阶段被展开，除了那些在处理命令中的变量和函数。

获取变量值，使用格式$()是对变量的引用。没有括号，$x取得的是变量x的值


自动变量只在，命令行有效(recipe)：
$@ 目标文件(多目标时，引起规则命令执行的目标文件。如果是归档文件则是归档文件名)
$% 目标文件(如果目标是archive(member)归档文件则是归档文件成员名)
$< 第一个依赖文件
$? 所有的比目标文件新的依赖文件

-----------------------------------
特殊变量：

MAKEFILE_LIST //包含已被make解析的makefile文件，最后一个文件是当前正在处理的文件

___________________________________
条件判断：
<conditional-directive>
<text-if-true>
else
<text-if-false>
endif

<conditional-directive>：ifeq, ifneq, ifdef, ifndef
___________________________________
使用函数：
$(<function> <arguments>)

<arguments>是函数的参数，参数间以逗号“,”分隔，而函数名和参数之间以“空格”分隔

---------------------------

字串函数：
$(addsuffix suffix,names ...)  //将names加上后缀suffix
$(addprefix prefix,names ...)  //将所有的names加上前缀prefix
$(subst from,to,text )     //将text中from替换成to
$(patsubst pattern,replacement,text )//如果text中以空白符分隔的字串，满足模式pattern，则替换为replacement。
$(filter pattern ...,text )//返回text中满足模式pattern的字符串
$(strip string )//移除字串头部和尾部的空白字符，将中间部分的多个空白字符设为一个
$(filter-out pattern ...,text )//返回不满足pattern的字串
$(wordlist s,e,text ) //返回从s开始到e结束的所有字串
$(if condition,then-part [,else-part ])// 第一个参数展condition开不为空，则第二个参数展开，否则第三个展开
$(lastword names ...) //names是以空格分开的字符串，该函数返回最后一个字符串
$(word n,text )       //返回text中第n个字串，n从1开始，n大于text个数时返回空
$(firstword names ...)  //name是以空格分隔的字串，返回第一个字串



文件名函数：
$(dir names ...)        //返回文件的目录名列表
$(wildcard pattern ...) //返回pattern中存在的文件列表(空白符分隔)

eval函数:
可以用来构建动态的makefile结构(结合其他函数)，两次解析过程。
一般函数何以处理字符串，返回字符串。而eval函数可以使makefile再次解析字符串(比如字符串有变量的定义赋值)
___________________________________
包含文件
include filename
-include filename//若文件不存在不会报错
___________________________________
make:
1、读入所有的 Makefile。		//第一阶段
2、读入被 include 的其它 Makefile。
3、初始化文件中的变量。
4、推导隐晦规则,并分析所有规则。
5、为所有的目标文件创建依赖关系链。
6、根据依赖关系,决定哪些目标要重新生成。	//第二阶段
7、执行生成命令。

make读入Makefile：
GNU make工作在两个不同阶段。
第一阶段读所有的makefile,包含makefile等。然后初始化所有变量的值，显式和隐藏的规则，建立依赖关系结构。
第二阶段make使用上步构成的依赖结构决定哪些目标需要重构，然后调用相应的规则。

变量和函数如何展开：
立即展开：在第一阶段，所有的这种类型结构(变量，函数)都会被展开
延迟展开：这种类型的结构在第二阶段展开，或这种结构出现在立即展开的上下文中

变量解析：
immediate = deferred
immediate ?= deferred
immediate := immediate
immediate ::= immediate
immediate += deferred or immediate

immediate != immediate
define immediate
deferred
endef
define immediate =
deferred
endef
define immediate ?=
deferred
endef
define immediate :=
immediate
endef
define immediate ::=
immediate
endef
define immediate +=
deferred or immediate
endef
define immediate !=
immediate
endef

条件判断：条件判断是立即解析的，所以他不能使用自动变量(自动变量在直到规则处理时才被解析)
规则定义：
immediate : immediate ; deferred
deferred
目标和依赖都是立即展开的，命令处理是延迟展开。


PROGRAMS    = server client
     
     server_OBJS = server.o server_priv.o server_access.o
     server_LIBS = priv protocol
     
     client_OBJS = client.o client_api.o client_mem.o
     client_LIBS = protocol
     
     # Everything after this is generic
     
     .PHONY: all
     all: $(PROGRAMS)
     
     define PROGRAM_template =
      $(1): $$($(1)_OBJS) $$($(1)_LIBS:%=-l%)
      ALL_OBJS   += $$($(1)_OBJS)
     endef
     
     $(foreach prog,$(PROGRAMS),$(eval $(call PROGRAM_template,$(prog))))
     
     $(PROGRAMS):
             $(LINK.o) $^ $(LDLIBS) -o $@
     
     clean:
             rm -f $(ALL_OBJS) $(PROGRAMS)



