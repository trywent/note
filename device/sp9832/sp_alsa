//soc dts配置

sprd平台又4card，"saudio_lte" "saudio_voip" "all-i2s" "sprdphone"(多媒体使用) 
===================
//注册声卡saudiolte和saudiovoip
saudio_lte{
	compatible = "sprd,saudio";
};
saudio_voip{
	compatible = "sprd,saudio";
}@sprd-sharkl-modem-volte.dtsi
//sprd sound
module_init()-->alsa_card_saudio_init-->platform_driver_register(&snd_saudio_driver)
-->snd_saudio_driver.driver.name("saudio")@saudio.c

snd_saudio_probe-->saudio_ctrl_thread-->saudio_snd_init_card-->snd_card_register@saudio.c

kernel/sound/drivers/saudio.c

______________
//注册声卡all_i2s_card    i2s-null-codec
i2s_sound: sound@2 {
compatible = "sprd,i2s-null-codec";
sprd,model = "all-i2s";
};

late_initcall_sync(sprd_asoc_i2s_init)-->sprd_asoc_i2s_probe-->snd_soc_register_card(all_i2s_card)
@i2s-r0p0-null-codec.c

_____________
//注册声卡 vbc_r2p0_codec_card
static struct snd_soc_card vbc_r2p0_codec_card = {
	.name = "sprdphone",
	.dai_link = vbc_r2p0_codec_dai,       //pcm 
	.controls = vbc_r2p0_codec_controls,  //control
	.dapm_widgets = sprd_codec_dapm_widgets,
	.dapm_routes = vbc_r2p0_codec_map,0
}

//soc设备注册
vbc_sound0: sound@0 {
            compatible = "sprd,vbc-r2p0-sprd-codec";
}@kernel/arch/arm/boot/dts/sprd-sound.dtsi

late_initcall_sync(vbc_r2p0_codec_init)-->platform_driver_register(&vbc_r2p0_codec_driver)-->
vbc_r2p0_codec_driver.vbc_r2p0_codec_probe(struct platform_device *pdev)@vbc-r2p0-sprd-codec-v4.h-->
sprd_asoc_probe(pdev, &vbc_r2p0_codec_card){
- struct device_node *node = pdev->dev.of_node 
 //node不为空
- struct device_node *pcm_node = of_parse_phandle(node, "sprd,pcm", 0)
- 遍历,card->dai_link{//设置dai_link的dts配置节点
	- card->dai_link[i].platform_name = NULL
	- card->dai_link[i].platform_of_node = pcm_node
	- card->dai_link[i].codec_name = NULL
	- card->dai_link[i].codec_of_node = codec_node
	}
- snd_soc_register_card(vbc_r2p0_codec_card)
}@sprd-asoc-card.c

//dai link
static struct snd_soc_dai_link vbc_r2p0_codec_dai{
	{
	 .name = "vbc(r2)-codec(v4)-ap",
	 .stream_name = "HiFi",

	 .codec_name = "sprd-codec",
	 .platform_name = "sprd-pcm-audio",
	 .cpu_dai_name = "vbc-r2p0",
	 .codec_dai_name = "sprd-codec-i2s",
	 .ignore_suspend = 1,
	 },

	{
	 .name = "aux-captrue",
	 .stream_name = "AuxRecord",

	 .codec_name = "sprd-codec",
	 .platform_name = "sprd-pcm-audio",
	 .cpu_dai_name = "vbc-r2p0-ad23",
	 .codec_dai_name = "codec-i2s-ext",
	 .ignore_suspend = 1,
	 },

	{
	 .name = "vbc(r2)-dfm",
	 .stream_name = "Dfm",

	 .codec_name = "sprd-codec",
	 .platform_name = "sprd-pcm-audio",
	 .cpu_dai_name = "vbc-dfm",
	 .codec_dai_name = "sprd-codec-fm",
	 .ops = &dfm_ops,
	 .ignore_suspend = 1,
	 },
}@vbc-r2p0-sprd-codec-v4.h


kernel/sound/soc/sprd/vbc-r2p0-sprd-codec-v4.h
kernel/sound/soc/sprd/sprd-asoc-card.c


//==============
//platform
sprd_pcm: sprd-pcm-audio {
	compatible = "sprd,sprd-pcm";
};

//pcm 的操作，dma函数  platform
platform_driver_register(&sprd_pcm_driver"sprd-pcm")-->sprd_soc_platform_probe
-->snd_soc_register_platform(sprd_soc_platform)@sprd-pcm.c

//pointer 返回dma内存中当前帧的偏移值
sprd_pcm_pointer{
- 获取声道0的dma偏移值，sprd_pcm_dma_get_addr()-dma_addr
- 获取声道1的dma偏移值，sprd_pcm_dma_get_addr()-dma_addr-dma_addr_offset/*声道的偏移值 2*/
- 偏移位置确保包含两个声道的有效数据/*选择两个声道最少数据的那个*/{
	- 数据没有循环超出buffer，或者都超出buffer。选择偏移小的声道 //保证两个声道都是有效数据
	- 只有一个声道超出循环buffer选择偏移大的那个声道//大的基本没有超过buffer，属于数据小的
	}
- 返回dma内存中有效数据位置的偏移值
}@sprd-pcm.c
______________
//codec dai driver.模块7731

struct snd_soc_dai_driver sprd_codec_dai{
	{
	 .name = "sprd-codec-i2s",
	 .playback = {
		      .stream_name = "Playback",
		      .channels_min = 1,
		      .channels_max = 2,
		      .rates = SPRD_CODEC_PCM_RATES,
		      .formats = SNDRV_PCM_FMTBIT_S16_LE,
		      },
	 .capture = {
		     .stream_name = "Main-Capture",
		     .channels_min = 1,
		     .channels_max = 2,
		     .rates = SPRD_CODEC_PCM_AD_RATES,
		     .formats = SNDRV_PCM_FMTBIT_S16_LE,
		     },
	 .ops = &sprd_codec_dai_ops,
	 },

	/*digital  ad1 */
	{
	 .id = SPRD_CODEC_IIS1_ID,
	 .name = "codec-i2s-ext",
	 .capture = {
		     .stream_name = "Ext-Capture",
		     .channels_min = 1,
		     .channels_max = 2,
		     .rates = SPRD_CODEC_PCM_AD_RATES,
		     .formats = SNDRV_PCM_FMTBIT_S16_LE,
		     },
	 .ops = &sprd_codec_dai_ops,
	 },

	{
	 .name = "sprd-codec-fm",
	 .playback = {
		      .stream_name = "DFM-Output",
		      .channels_min = 1,
		      .channels_max = 2,
		      .rates = SPRD_CODEC_PCM_RATES,
		      .formats = SNDRV_PCM_FMTBIT_S16_LE,
		      },
	 .ops = &sprd_codec_dai_ops,
	 },
}@sprd-codec.c

//codec驱动
static struct snd_soc_codec_driver soc_codec_dev_sprd_codec = {
	.probe = sprd_codec_soc_probe,
	.dapm_widgets = sprd_codec_dapm_widgets,
	.controls = sprd_codec_snd_controls,
}

//设备
&sprd_codec {
	status = "okay";
}

//注册codec
sprd_codec_codec_driver(sprd_codec_codec_driver"sprd-codec")-->
sprd_codec_probe{
- request_irq
- snd_soc_register_codec(soc_codec_dev_sprd_codec,sprd_codec_dai)-->
	snd_soc_register_dais{
	
	}
}@sprd-codec.c


//irq
sci_dma_register_irqhandle(sprd_pcm_dma_irq_ch)@sprd-pcm.c-->snd_pcm_period_elapsed
snd_pcm_update_hw_ptr0-->substream->ops->pointer@pcm_lib.c
______________
//cpu dai driver.vbc模块
struct snd_soc_dai_driver vbc_dai{
	{
	 .name = "vbc-r2p0",
	 .id = 0,
	 .playback = {
		      .channels_min = 1,
		      .channels_max = 2,
		      .rates = SNDRV_PCM_RATE_CONTINUOUS,
		      .rate_max = 96000,
		      .formats = SNDRV_PCM_FMTBIT_S16_LE,
		      },
	 .capture = {
		     .channels_min = 1,
		     .channels_max = 2,	/* AD01 */
		     .rates = SNDRV_PCM_RATE_CONTINUOUS,
		     .rate_max = 96000,
		     .formats = SNDRV_PCM_FMTBIT_S16_LE,
		     },
	 .ops = &vbc_dai_ops,
	 },
	{
	 .name = "vbc-r2p0-ad23",
	 .id = 1,
	 .capture = {
		     .channels_min = 1,
		     .channels_max = 2,	/* AD23 */
		     .rates = SNDRV_PCM_RATE_CONTINUOUS,
		     .rate_max = 96000,
		     .formats = SNDRV_PCM_FMTBIT_S16_LE,
		     },
	 .ops = &vbc_dai_ops,
	 },
	{
	 .name = "vbc-dfm",
	 .id = DFM_MAGIC_ID,
	 .playback = {
		      .channels_min = 1,
		      .channels_max = 2,
		      .rates = SNDRV_PCM_RATE_CONTINUOUS,
		      .rate_max = 48000,
		      .formats = SNDRV_PCM_FMTBIT_S16_LE,
		      },
	 .ops = &dfm_dai_ops,
	 }
}@vbc.c

//codec驱动
static struct snd_soc_codec_driver soc_codec_dev_vbc_codec = {
	.probe = vbc_codec_soc_probe,
	.dapm_widgets = vbc_codec_dapm_widgets,
	.controls = vbc_codec_snd_controls,
};

//设备
&vbc_r2p0 {
	status = "okay";
};

platform_driver_register(&vbc_driver"vbc-r2p0")-->vbc_drv_probe{
- sprd_vbc_codec_probe(struct platform_device *pdev){
	 //注册codec
	- snd_soc_register_codec(&soc_codec_dev_vbc_codec)//struct snd_soc_codec_driver
	}@vbc-codec.c
  //注册component
- snd_soc_register_component(&sprd_vbc_component,vbc_dai) //struct snd_soc_component_driver ,struct snd_soc_dai_driver
}@vbc.c
______________
//vaudio driver
vaudio: vaudio {
	compatible = "sprd,vaudio";
};

module_platform_driver(sprd_vaudio_driver)-->sprd_vaudio_drv_probe-->
snd_soc_register_component(sprd_vaudio_dai)@vaudio.c
______________
//i2s driver
&i2s 1/2/3/4 {
	status = "okay";
};

module_platform_driver(i2s_driver)-->i2s_drv_probe-->snd_soc_register_component
(&sprd_i2s_component,i2s->i2s_dai_driver)@i2s.c


snd_soc_register_component(&sprd_compr_component,sprd_compr_dai)


______________
//i2s-null-codec
null_codec: null-codec {
compatible = "sprd,null-codec";
};

module_platform_driver(null_codec_codec_driver"null-codec")-->null_codec_codec_probe-->
snd_soc_register_codec(&soc_codec_dev_null_codec，null_codec_dai)@null-codec.c

______________
//widget
soc_codec_dev_sprd_codec{
- sprd_codec_dapm_widgets //widget
- sprd_codec_intercon
- sprd_codec_snd_controls
}@sprd-codec.c


=====================
//dma位置 大小 VBC_BUFFER_BYTES_MAX 		(48* 1024)
//CONFIG_SND_SOC_SPRD_AUDIO_BUFFER_USE_IRAM not set
sprd_pcm_new-->sprd_pcm_preallocate_dma_buffer{
- struct snd_dma_buffer *buf = &substream->dma_buffer
- 设置buf{
	- area //dma的内存空间虚拟地址
	- addr //物理地址
	- size //大小
	}
- dma_alloc_coherent(一个宏定义)-->dma_alloc_attrs()
}@sprc-pcm.c


//open 分配配置参数的空间
sprd_pcm_ops.open-->sprd_pcm_open{
- snd_soc_set_runtime_hwparams
- rtd->dma_desc_array_orig= dma_alloc_coherent(hw_chan),分配上双声道的内存
- rtd->dma_desc_array_phys,对齐32
- rtd->dma_desc_array，dma描述数组（包含32+dma_desc）
}

//vbc cpu dai设置参数
vbc_hw_params{
- dma_data[VBC_IDX_MAX] = {//dma的设备地址
		&vbc_pcm_stereo_out,
		&vbc_pcm_stereo_in,
		&vbc_pcm23_stereo_in,
  }
- snd_soc_dai_set_dma_data{//设置播放，录制的dmadata信息
	- playback_dma_data
	- capture_dma_data
	}
}@vbc.c

//platform设置参数
sprd_pcm_hw_params{
- totsize = params_buffer_bytes(params)//buffer
- period = params_period_bytes(params)
- periods = params_periods(params)
- snd_soc_dai_get_dma_data //获取dma设备地址 vbc.c设置
- params_channels//获取声道
- dma->desc.src_step = 4//根据声道设置dma步进，双声道步进数4。单声道2
- rtd->uid_cid_map = sci_dma_request(FULL_DMA_CHN) //设置dma id
- snd_pcm_set_runtime_buffer{//赋值dma信息到runtime
	- runtime->dma_area，dma_addr，dma_bytes
	}
- 设置runtime->dma_bytes
- sprd_dma_desc dma_cfg_array= kzalloc//创建dma描述信息
- dma_buff_phys //左右声道的数据保存的arm物理地址 dam_addr dma_addr+2
- 初始化dma_desc{//每个声道有periods个数的配置
	- block_len //一个period中一个声道数据
	- src_step //源数据的步进
	- des_step //目标数据的步进
	- 播放{
		- src_addr = dma_buff_phys //源数据地址为dma内存
		- des_addr = dma->dev_paddr //目的地址为设备地址
		}
	- 录制{
		- src_addr = dma->dev_paddr //源数据地址为设备地址
		- des_addr = dma_buff_phys //目的地址为dma内存
		}
	}
 //配置声道0的dma配置，以上的配置会转化为dma_reg_addr的配置
- dma_reg_addr[0].phys_addr = (u32) (rtd->dma_desc_array_phys)//设置dma配置的物理地址，偏移32位
- dma_reg_addr[0].virt_addr = rtd->dma_desc_array//设置dma配置的虚拟地址
- sci_dma_config(params_periods(params)，dma_reg_addr){//配置
	- 
	- __dma_cfg_check_and_convert //将cfg_list中配置转换到dma_reg_addr
	}@dma_r4p0.c
- sci_dma_register_irqhandle(sprd_pcm_dma_irq_ch) //注册dma中断处理
	-->sprd_pcm_dma_irq_ch{
	- 双声道时要两个声道数据都准备好，才允许读取
	- snd_pcm_period_elapsed//数据准备好
	}
 //配置声道1的dma
- sprd_pcm_proc_init //设置proc
}@sprc-pcm.c


//pointer
snd_pcm_period_elapsed-->snd_pcm_update_hw_ptr0-->substream->ops->pointer@pcm_lib.c

sprd_pcm_ops.mmap-->sprd_pcm_mmap(substream,vma){
- 获取runtime
  //dma_area dma_addr dma_bytes 为dma_alloc_attrs请求到的参数
- dma_mmap_writecombine(dev,vma,runtime->dma_area,dma_addr,dma_bytes)
	-->dma_mmap_attrs(device){
	- get_dma_ops(dev)->mmap //device 的操作函数有mmap
	- dma_common_mmap //木有
	}
   
}@sprd-pcm.c

//触发读取数据
sprd_pcm_ops.trigger-->sprd_pcm_trigger


//period中断
sprd_pcm_dma_irq_ch-->snd_pcm_period_elapsed@sprd-pcm.c

//读取数据
snd_pcm_lib_read1{

- transfer(substream, appl_ofs, data, offset, frames)//dma中的偏移值
   -->snd_pcm_lib_read_transfer
}

snd_pcm_lib_read_transfer(stream,hwoff/*dma的偏移*/,buffer,offset/*已经读取的frames*/，frames/*本次需读取的frame*/){
- 目标地址，buf = (char __user *) data + frames_to_bytes(runtime, off)
- 没有copy函数{
	- 计算源地址的位置，runtime->dma_area + frames_to_bytes(runtime, hwoff)
	- unalign_copy_to_user
	}
}@pcm_lib.c


kernel/sound/soc/sprd/dai/vbc/r2p0/vbc.c
kernel/sound/soc/sprd/codec/sprd/v4/sprd-codec.c
kernel/sound/soc/sprd/dai/vbc/r2p0/vbc-codec.c
kernel/sound/soc/sprd/dai/sprd-pcm.c
kernel/sound/soc/sprd/dai/vaudio/vaudio.c
kernel/sound/soc/sprd/dai/i2s/i2s.c
kernel/sound/soc/sprd/codec/null-codec/null-codec.c
kernel/sound/soc/sprd/i2s-r0p0-null-codec.c
kernel/sound/soc/sprd/dai/sprd-dmaengine-pcm.c
