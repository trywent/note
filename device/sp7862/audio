/*****************************
 audio
*/
arm  	--->i2s2--->ump510g	//播放
ump510g --->i2s2--->arm		//录音
umw2652 --->i2s0--->arm		//蓝牙声音

bt->dsp->dac0->vbc->codec

/*
 audiopolicy

*/

{
- primary_audio_policy_configuration.xml
- bluetooth_audio_policy_configuration.xml
- r_submix_audio_policy_configuration.xml
}@audio_policy_configuration.xml

//左右声道
device/sprd/pike2/sp7731e_1h10/rootdir/system/etc/audio_params/tiny_hw.xml@7731


/**************************************************
 audio_hw

 adb logcat -s audio_hw_ext audio_hw_primary audio_hw_control audio_hw_voice
 不使用tiny_hw.xml
*/

//使用audio/whale
BOARD_USES_TINYALSA_AUDIO := true@device/sprd/sharkl5Pro/common/BoardCommon.mk
USE_AUDIO_WHALE_HAL :=true			//whale
USE_CONFIGURABLE_AUDIO_POLICY := 1		//audiopolicy使用engineconfigurable
USE_CUSTOM_CONFIGUREABLE_AUDIO_POLICY := true
@device/sprd/sharkl5Pro/ums512_1h10/ums512_1h10_Base.mk


//加载moduel,打开获取hw_device_t设备
adev_open(const hw_module_t* module, const char* name, hw_device_t** device){
  //初始话adev
- struct tiny_audio_device *adev = calloc(1, sizeof(struct tiny_audio_device))
- adev->hw_device.get_supported_devices = adev_get_supported_devices
- adev->dev_ctl = init_audio_control(adev)
- *device = &adev->hw_device.common		//要返回的地方
- ext_control_init(adev)
- list_init(&adev->active_out_list)
- list_init(&adev->active_input_list)
  //打开voice,fm流。将流加入active_out_list
- voice_open(adev){
	- struct tiny_stream_out *voice_out=(struct tiny_stream_out *)calloc(1, sizeof(struct tiny_stream_out))
	- voice_out->dev=adev
	- audio_add_output(adev,voice_out)
	}@voice_call.c
- fm_open(adev)
}@audio_hw.c


struct audio_control *init_audio_control(struct tiny_audio_device *adev){
- struct audio_control *control
- control->adev = adev
- parse_audio_config(&control->config)			//"/vendor/etc/audio_config.xml" loglevel,其它配置
- control->mixer = mixer_open(card_num)
- parse_audio_route(control)				//"/vendor/etc/audio_route.xml" 设备配置。android8后使用vendor目录下配置
- parse_audio_pcm_config(&(control->pcm_handle))	//"/vendor/etc/audio_pcm.xml"   通路配置
- stream_routing_manager_create(control)		//开始route进程
- audio_event_manager_create(control
}@audio_control.cpp

//解析AUDIO_ROUTE_PATH "/vendor/etc/audio_route.xml"
parse_audio_route(struct audio_control *control){
- parse_route_device(&(control->route.devices_route), control->mixer, dev){		//device节点
	- struct device_route *route = alloc_route_device(route_hanler)			//创建route加入route_hanler
	- route->name
	- route->devices
	- parse_route_control(mixer, &route->ctl_on, ctl_on)
	- parse_route_control(mixer, &route->ctl_off, ctl_off)				//route中的control
	}
- parse_vbc_route_device(&(control->route.vbc_iis_mux_route), control->mixer, dev)	//vbc_iis_mux节点
- parse_vbc_route_device(&(control->route.be_switch_route), control->mixer, dev)	//be_switch节点
- parse_dsploop_control(&(control->route.dsploop_ctl), control->mixer,tmp)		//dsploop节点
}@audio_parse.cpp

//解析AUDIO_PCM_FILE  "/vendor/etc/audio_pcm.xml"
parse_audio_pcm_config(struct pcm_handle_t *pcm){
- parse_pcm_config(pcm->play, pcm->playback_devices,pcm_tmp){		//playback节点.voip使用pcm6.音乐使用pcm3
	- 
	}
- parse_recordpcm_config(pcm->record,pcm->record_devices, pcm_tmp){	//record节点
	- devices[0]							//recognition channels="1" device 0
	- devices[1]							//mm_normal channels="2" device 2
	}
- parse_compress_config(&(pcm->compress),pcm_tmp)			//compress节点
}@audio_parse.cpp

//解析&control->config  "/vendor/etc/audio_config.xml"
parse_audio_config(struct audio_config_handle *config){
- if(access(AUDIO_DEBUG_CONFIG_TUNNING_PATH, R_OK) == 0){		//是否存在"/data/vendor/local/media/audio_config.xml"
	- load_xml_handle(&xmlhandle, AUDIO_DEBUG_CONFIG_TUNNING_PATH)
  }else{
	- load_xml_handle(&xmlhandle, AUDIO_DEBUG_CONFIG_PATH)		//加载"/vendor/etc/audio_config.xml"
  }
- _parse_audio_config(config,&xmlhandle)
  //解析param "/vendor/etc/audio_params/sprd" 
- parse_audioparam_config(config,false){
	- load_xml_handle(&xmlhandle, AUDIO_PARAM_CONFIG_PATH)		///vendor/etc/audio_params/sprd/audioparam_config.xml
	}@param_config
}@audio_debug.c

/*******
  设置

*/
AUDIO_PORT_TYPE_NONE = 0,
AUDIO_PORT_TYPE_DEVICE = 1,
AUDIO_PORT_TYPE_MIX = 2, 
AUDIO_PORT_TYPE_SESSION = 3,
//设置通路  audiopatch device被修改?
createAudioPatch-->adev->hw_device.create_audio_patch-->
adev_create_audio_patch(struct audio_hw_device *dev,unsigned int num_sources,const struct audio_port_config *sources,
        unsigned int num_sinks,const struct audio_port_config *sinks,audio_patch_handle_t *handle){
- for (i = 0; i < num_sources; i++) {	//获取输入设备
	- sources_device_type |=sources[i].ext.device.type
	}
- for (i = 0; i < num_sinks; i++) {	//获取输出设备
	- sinks_device_type |=sinks[i].ext.device.type
	}
  //设置输入设备
- adev_in_devices_check(adev,sources_device_type)	//检查并设置输入设备。。。输出设备
- adev->in_devices=sources_device_type
- select_devices_new(adev->dev_ctl,AUDIO_HW_APP_INVALID,sources_device_type,true,true,false,false)
  //设置输出设备
- do_set_output_device(adev->dev_ctl,sinks_device_type)-->
	select_devices_new(actl,AUDIO_HW_APP_INVALID,cmd->device,false,true,false,false)
- adev->out_devices=sinks_device_type
}@audio_hw.cpp


//设置设备。检查输出流的输出设备是否正确,并设置
do_set_output_device@audio_control.c-->SET_OUTPUT_DEVICE{
- adev_out_devices_check(void *dev,audio_devices_t device){
   - list_for_each_safe(item, item2,&adev->active_out_list){
	- struct tiny_stream_out *out = node_to_item(item, struct tiny_stream_out, node)
	- out->devices=device
	}
- select_devices_new(actl,AUDIO_HW_APP_INVALID,cmd->device,false,true,false,false)
}@audio_hw.c

/*
 参数
*/
//参数设置
adev_set_parameters(struct audio_hw_device *dev, const char *kvpairs){
- struct str_parms *parms = str_parms_create_str(kvpairs)
- ext_contrtol_process((struct tiny_audio_device *)dev,kvpairs)
}@audio_hw.c

//设备connect disconect
disconnect_audio_devices@ext_control.c-->
set_available_outputdevices(struct audio_control *dev_ctl,int devices,bool avaiable){
- if(true==avaiable){
	- dev_ctl->available_outputdevices |=devices				//out设备
	- dev_ctl->available_inputdevices |=devices				//input设备
  }else{
	- dev_ctl->available_outputdevices &=~devices
	- dev_ctl->available_inputdevices &=~(devices&~AUDIO_DEVICE_BIT_IN)
  }
}@audio_control.cpp

/**************************************************
 设置route

 设备节点接口
*/

//route设置线程。等待命令
stream_routing_manager_create(struct audio_control *actl)-->
pthread_create(&actl->routing_mgr.routing_switch_thread, &attr, stream_routing_thread_entry, (void *)actl)
-->stream_routing_thread_entry(void *param){
- while(!actl->routing_mgr.is_exit){
	- item = list_head(&actl->switch_device_cmd_list)
	  //获取切换命令。切换设备
	- struct switch_device_cmd *cmd = node_to_item(item, struct switch_device_cmd, node)	  
	- SWITCH_DEVICE:do_select_device(actl,cmd->audio_app_type,cmd->device,cmd->is_in,cmd->update_param,cmd->is_force)
	- SET_FM_VOLUME:set_audioparam(actl,PARAM_FM_VOLUME_CHANGE, &cmd->param1,false)
	}
}@audio_control.cpp


do_select_device(struct audio_control *actl,AUDIO_HW_APP_T audio_app_type,audio_devices_t device,bool is_in,bool update_param,bool force_set){
- if(is_in) {
	- if(actl->usecase&UC_HFP) device|=AUDIO_DEVICE_IN_BLUETOOTH_SCO_HEADSET
  }else{
	- if(actl->usecase&UC_HFP) device|=AUDIO_DEVICE_OUT_BLUETOOTH_SCO_HEADSET
  }
- device_access_enable(actl)
- if(is_in) {
	- actl->in_devices=device
  }else{
	- if(true==update_param) set_audioparam_unlock(actl,PARAM_OUTDEVICES_CHANGE,&device,false)	//更新参数
  }
}


switch_vbc_route(struct audio_control *ctl,int device){
- switch_vbc_device_route(&ctl->route.vbc_iis_mux_route,device,is_in_device){

	}
- switch_vbc_device_route(&ctl->route.be_switch_route,device,is_in_device)
}@audio_control.cpp


//选择设备,发送命令到route线程
select_devices_new(struct audio_control *actl, int audio_app_type, audio_devices_t device,
	 bool is_in, bool update_param, bool sync, bool force)-->
select_device_cmd_send(struct audio_control *actl,AUDIO_HW_APP_T audio_app_type,
	SWITCH_DEVICE_CMD_T cmd_param, audio_devices_t device,bool is_in,bool update_param, bool sync, bool force,int param1){
- struct switch_device_cmd *cmd = (struct switch_device_cmd *)calloc(1,sizeof(struct switch_device_cmd))
- cmd->cmd = cmd_param
- cmd->audio_app_type = audio_app_type
- cmd->device = device
- cmd->is_in = is_in				//是否是更新输入设备
- cmd->update_param = update_param		//是否更新参数
- cmd->param1 = param1
- list_add_tail(&actl->switch_device_cmd_list, &cmd->node)
}@audio_control.cpp


/**************************************************
 output
*/
//根据使用场景获取对应的流
get_output_stream(struct tiny_audio_device *adev,AUDIO_HW_APP_T audio_app_type)-->
get_output_stream_unlock(struct tiny_audio_device *adev,AUDIO_HW_APP_T audio_app_type){
  //遍历active_out_list
- list_for_each_safe(item, item2,&adev->active_out_list){
	- if(out->audio_app_type==audio_app_type) out_ret = out
	}
- return out_ret
}@audio_hw.c

out_write(struct audio_stream_out *stream, const void *buffer, size_t bytes){
- if(adev->boot_completed==false) check_headset_status()		//未启动完成，主动获取耳机状态
}



/**************************************************
 input

*/
adev_open_input_stream(struct audio_hw_device *dev,UNUSED_ATTR audio_io_handle_t handle, audio_devices_t devices,struct audio_config *config,
	 struct audio_stream_in **stream_in, audio_input_flags_t flags, const char *address __unused, audio_source_t source ){
- in->devices = devices
}

//读取数据
in_read(struct audio_stream_in *stream, void *buffer,size_t bytes){
- 
- if (in->standby) {
	- ret = start_input_stream(in)
	- in->standby = false
	}
}@audio_hw.c

start_input_stream(struct tiny_stream_in *in){
- usecase = stream_type_to_usecase(in->audio_app_type)
- set_usecase(control,  usecase, true)
- switch_vbc_route(adev->dev_ctl,in->devices)
- dev_ctl_get_in_pcm_config(control, in->audio_app_type, &pcm_devices, in->config)	//根据类型获取录音设备
- in->pcm = pcm_open(adev->dev_ctl->cards.s_tinycard, pcm_devices, PCM_IN | PCM_MMAP | PCM_NOIRQ|PCM_MONOTONIC , in->config)
- select_devices_new(adev->dev_ctl,in->audio_app_type,in->devices,true,false,true, true)//设置route
}@audio_hw.c


vendor/sprd/modules/audio/whale/audio_hw.c
vendor/sprd/modules/audio/whale/audio_control.cpp
vendor/sprd/modules/audio/whale/audio_parse.cpp
vendor/sprd/modules/audio/whale/debug/audio_debug.cpp

/**************************************************
 ext control设置接口

 两种方式：参数设置ext_contrtol_process
	  写命令到/data/vendor/local/media/mmi.audio.ctrl
*/


//命令和操作函数
const struct ext_control_t  ext_contrl_table[] = {
    {"codec_mute",                      audio_codec_mute},
    {"AudioTester_enable",              audiotester_enable},
    {"vbc_pcm_dump",                    vbc_playback_dump},
    {"set_dump_data_switch",            set_audiohal_pcmdump},
    {"dumpmusic",                       set_audiohal_musicpcmdump},
    {"dumpsco",                         set_audiohal_voippcmdump},
    {"dumpinread",                      set_audiohal_recordhalpcmdump},
    {"dumpvbc",                         set_audiohal_vbcpcmdump},
    {"dumploop",                        set_audiohal_looppcmdump},
    {"pipeprocess_exit",                ext_process_exit},
    {"hfp_enable",                      set_hfp_enable},
}

//dump数据控制
adev_open-->ext_control_init(adev)@audio_hw-->
ext_control_init(struct tiny_audio_device *adev){
  //dump控制接口 .创建"/data/vendor/local/media/mmi.audio.ctrl"
- create_audio_pipe(AUDIO_EXT_DATA_CONTROL_PIPE){	
	- mkfifo(pipe_name,S_IFIFO|0666)
	- chmod(pipe_name, S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP| S_IROTH|S_IWOTH)
	- stat(pipe_name, &buf)
	- chmod(pipe_name, S_IRUSR|S_IWUSR|S_IRGRP| S_IWGRP|S_IROTH|S_IWOTH)
	}
  //创建"/data/vendor/local/media/aploopback.pcm"
- create_audio_pipe(MMI_DEFAULT_PCM_FILE)		
- pthread_t control_audio_loop;
  //读取pip命令数据，设置开关
- pthread_create(&control_audio_loop, NULL, control_audio_loop_process, (void *)adev)-->
	control_audio_loop_process(void *arg){
	- int pipe_fd = open(AUDIO_EXT_CONTROL_PIPE, O_RDWR)
	- fcntl(pipe_fd,F_SETFL,O_NONBLOCK)
	- while(false==adev->pipe_process_exit){
		- FD_ZERO(&fds_read)
		- FD_SET(pipe_fd,&fds_read)
		- select(max_fd,&fds_read,NULL,NULL,NULL)
		- read_noblock_l(pipe_fd,data,1024)
		- ext_contrtol_process(adev,data)	//处理命令
		}
	}
- pthread_detach(pthread_self())
}@ext_control.c

ext_contrtol_process(struct tiny_audio_device *adev,const char *cmd_string){
- struct str_parms *parms = str_parms_create_str(cmd_string)
  //遍历ext_contrl_table
- str_parms_get_str(parms,ext_contrl_table[i].cmd_string,value,sizeof(value))
- fun=ext_contrl_table[i].fun
- fun(adev,parms,val_int,value)				//执行函数
}@ext_control.c



vendor/sprd/modules/audio/whale/debug/ext_control.c

/**************************************************
  hfp voice
*/
//设置模式
set_mode-->ext_setVoiceMode@ext_control.c-->
ext_setVoiceMode(void * dev,UNUSED_ATTR struct str_parms *parms,int mode, UNUSED_ATTR char * val){
- adev_set_mode(dev,mode)
- if(AUDIO_MODE_IN_CALL == mode){
	- int voice_device=AUDIO_DEVICE_OUT_EARPIECE
	  //测试通话通路
	- ret = str_parms_get_str(parms,"test_out_stream_route", value, sizeof(value))
	- if(ret >= 0){
		- voice_device= strtoul(value,NULL,0)
		- voice_out->devices=voice_device
		}
	- adev->call_start=true
	- send_cmd_to_dsp_thread(adev->dev_ctl->agdsp_ctl,AUDIO_CTL_START_VOICE,NULL)
	}
}@audio_hw.c

//设置hfp状态
set_hfp_enable(adev,...)-->start_hfp_call(adev->dev_ctl)@ext_control.c-->
start_hfp_call(struct audio_control *actl){
- struct tiny_audio_device *adev=(struct tiny_audio_device *)actl->adev
  //获取当前使用场景下的流
- struct tiny_stream_out *voice_out=get_output_stream(adev,AUDIO_HW_APP_CALL)-->get_output_stream_unlock
- set_usecase(actl, UC_CALL, true)
- switch_vbc_route(adev->dev_ctl,voice_out->devices)
  //打开pcm上下行
- voice_out->pcm_modem_dl = pcm_open(adev->dev_ctl->cards.s_tinycard, actl->pcm_handle.playback_devices[AUD_PCM_HFP_DL]..)
- pcm_is_ready(voice_out->pcm_modem_dl)
- voice_out->pcm_modem_ul = pcm_open(adev->dev_ctl->cards.s_tinycard, actl->pcm_handle.record_devices[AUD_RECORD_PCM_HFP_UL]..)
- pcm_is_ready(voice_out->pcm_modem_ul)
  //选择设备通路
- select_devices_new(actl,voice_out->audio_app_type,voice_out->devices,false,false,true,true)
- set_voice_status(&adev->hw_device,VOICE_START_STATUS)
- set_dsp_volume(adev->dev_ctl,adev->hfp_voice_volume)
}







vendor/sprd/modules/audio/whale/voice_call.c
/******
 dump数据
*/
dump方法如下(dump文件保存在data/vendor/local/media/下):
1．dump hal送给dsp/vbc或从dsp/vbc读到的数据
打开dump: echo "dumpvbc=1" > /data/vendor/local/media/mmi.audio.ctrl
关闭dump: echo "dumpvbc=0" > /data/vendor/local/media/mmi.audio.ctrl
文件保存在/data/vendor/local/media/下面,适合于录音 与播放场景(包含voip),不包含a2dp dump.

2.  dump audioflinger从hal拿到的数据
开启dump:  echo "dumpinread=1" > /data/vendor/local/media/mmi.audio.ctrl
关闭dump:  echo "dumpinread=0" > /data/vendor/local/media/mmi.audio.ctrl

3.  dump audioflinger写到hal的数据
打开dump: echo "dumpmusic=1" > /data/vendor/local/media/mmi.audio.ctrl
关闭dump: echo "dumpmusic=0" > /data/vendor/local/media/mmi.audio.ctrl

4.  dump播放场景vbc输出的数据
开启dump: echo "vbc_pcm_dump=vbc_dac0" > /data/vendor/local/media/mmi.audio.ctrl
关闭dump: echo "vbc_pcm_dump=disable" > /data/vendor/local/media/mmi.audio.ctrl
注意:vbc输出的数据dump与录音场景充突,有录音场景时无法dump.

5.  dump通话场景vbc输出的数据
开启dump:  echo "vbc_pcm_dump=vbc_dac1" > /data/vendor/local/media/mmi.audio.ctrl
关闭dump: echo "vbc_pcm_dump=disable" > /data/vendor/local/media/mmi.audio.ctrl
注意:vbc输出的数据dump与录音场景充突,有录音场景时无法dump. 


typedef enum {
    PCMDUMP_PRIMARY_PLAYBACK_VBC,
    PCMDUMP_PRIMARY_PLAYBACK_MUSIC,

    PCMDUMP_OFFLOAD_PLAYBACK_DSP,

    PCMDUMP_NORMAL_RECORD_VBC,
    PCMDUMP_NORMAL_RECORD_PROCESS,
    PCMDUMP_NORMAL_RECORD_NR,
    PCMDUMP_NORMAL_RECORD_HAL,

    PCMDUMP_VOIP_PLAYBACK_VBC,
    PCMDUMP_VOIP_RECORD_VBC,

    PCMDUMP_LOOP_PLAYBACK_DSP,
    PCMDUMP_LOOP_PLAYBACK_RECORD,
    PCMDUMP_MAX
} AUDIOHAL_PCM_DUMP_TYPE

audiopcmdumpname[PCMDUMP_MAX] = {
    "/data/vendor/local/media/playback_vbc",
    "/data/vendor/local/media/playback_hal",
    "/data/vendor/local/media/playback_offload",

    "/data/vendor/local/media/record_vbc",
    "/data/vendor/local/media/record_hal",
    "/data/vendor/local/media/record_process",
    "/data/vendor/local/media/record_nr",

    "/data/vendor/local/media/voip_playback",
    "/data/vendor/local/media/voip_record",

    "/data/vendor/local/media/loop_playback",
    "/data/vendor/local/media/loop_record",
}@audio_debug.cpp


audiohal_pcmdump(void *ctl,int flag,void *buffer,int size,int dumptype){
- char file_name[128]={0}
- snprintf(file_name,sizeof(file_name)-1,"%s_%d.pcm",audiopcmdumpname[dumptype],flag)
- dev_ctl->pcmdumpfd[dumptype]=open(file_name, O_RDWR | O_CREAT |O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)
- write(dev_ctl->pcmdumpfd[dumptype],buffer,size)
}@audio_debug.cpp

set_audiohal_musicpcmdump(UNUSED_ATTR void *dev,UNUSED_ATTR struct str_parms *parms, int opt, UNUSED_ATTR char * val){
- if(opt){
	- dev_ctl->pcmdumpflag|=(1<<PCMDUMP_PRIMARY_PLAYBACK_MUSIC)
  }else{
	- dev_ctl->pcmdumpflag&=~(1<<PCMDUMP_PRIMARY_PLAYBACK_MUSIC)
  }
}@audio_debug.cpp


vendor/sprd/modules/audio/whale/debug/audio_debug.cpp
/*****************************
 a2dp

*/
hal_module_methods.open-->adev_open(const hw_module_t* module,UNUSED_ATTR const char* name, hw_device_t** device){
- struct sprda2dp_audio_device *sprd_adev=&sprd_a2dp_dev
- stream_ctl=stream_ctl_init()
- a2dp_dev=(struct audio_hw_device *)*device
- sprd_adev->dsp_monitor = dsp_monitor_open()
}@audio_a2dp_hw.c



dsp_monitor_open(){
- dsp_ctl->dsp_pipe_fd = open(SPRD_AUD_DSP_BTHAL,O_RDWR)
- ioctl(dsp_ctl->dsp_pipe_fd, AUDIO_PIPE_BTHAL_STATE_SET,&bthal_state)
- pthread_create((pthread_t *)(&dsp_ctl->thread_id), &attr,dsp_monitor_thread_routine, dsp_ctl)-->
	dsp_monitor_thread_routine(void *arg){
	- struct dsp_monitor_t * dsp_ctl=(struct dsp_monitor_t *)arg
	- read(dsp_ctl->dsp_pipe_fd,&msg,sizeof(struct dsp_smsg))	//读取消息
	- agdsp_msg_process(dsp_ctl,&msg)				//处理消息
	}
}@dsp_monitor.c

vendor/sprd/modules/audio/a2dp_offload_hw/audio_a2dp_hw.c
vendor/sprd/modules/audio/a2dp_offload_hw/dsp_monitor.c


