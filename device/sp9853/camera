//host

module_platform_driver-->
sprd_img_probe{
- misc_register(&image_dev) //"sprd_image"
- sprd_cam_pw_domain_init
- sprd_dcam_parse_dt
- sprd_isp_parse_dt
- sprd_dcam_drv_init{
	- dcam_mod_lock //设置各种lock
	}@dcam_drv.c
- sprd_isp_drv_init{
	- isp_mod_lock //各种锁
	}@isp_drv.c
}@dcam_core.c


//sensor
sprd_sensor_core_module_init{
- sprd_sensor_register_driver
- csi_api_mipi_phy_cfg
- misc_register(&sensor_dev) //"sprd_sensor"
- device_create_file //创建sys文件
}@sprd_sensor_core.c


sprd_sensor_file_ioctl


sprd_sensor_file_ioctl-->sprd_sensor_io_if_cfg{
- sprd_sensor_mipi_if_open-->csi_api_open
- sprd_sensor_mipi_if_close
}

//cpp
module_init(sprd_cpp_init)-->platform_driver_register(&sprd_cpp_driver)
-->sprd_cpp_probe{
- 初始化sprd_cpp_dev
- misc_register(&sprd_cpp_dev->md) //"sprd_cpp"
}@cpp_core.c


kernel/drivers/misc/sprd_camera/dcam/dcam_if_r3p0v2/dcam_core.c
kernel/drivers/misc/sprd_camera/dcam/dcam_if_r3p0v2/dcam_drv.c
kernel/drivers/misc/sprd_camera/dcam/isp_r6p10v2/isp_drv.c
kernel/drivers/misc/sprd_camera/sensor/sprd_sensor_core.c
kernel/drivers/misc/sprd_camera/cpp/lite_r1p0/cpp_core.c

//=======================HAL
HAL_MODULE_INFO_SYM{
- common = camera_common {
	- id = CAMERA_HARDWARE_MODULE_ID
	- methods = mModuleMethods
	}
- get_number_of_cameras =get_number_of_cameras
- get_camera_info = get_camera_info
- set_callbacks = set_callbacks
- get_vendor_tag_ops = get_vendor_tag_ops
- open_legacy = HAL_open_legacy
- set_torch_mode = setTorchMode
}@SprdCamera3Hal.cpp

//打开设备
mModuleMethods.open-->camera_device_open(id,struct hw_device_t **){
- isSingleIdExposeOnMultiCameraMode
- gSprdCamera3Wrapper->cameraDeviceOpen //id大于5,一些自定义的东西?
- gSprdCamera3Factory.cameraDeviceOpen(id, struct hw_device_t **hw_device){
	- SprdCamera3HWI *hw = new SprdCamera3HWI(id){//创建CameraDevice
		- mCameraDevice.common
		- mCameraDevice.ops = &mCameraOps
		- mCameraDevice.priv = this
		}
	- 若是多摄像头模式,hw->setMultiCameraMode 
	- hw->openCamera(hw_device)
	}
}@SprdCamera3Factory.cpp

openCamera(hw_device){
- openCamera(){
	- mSetting = new SprdCamera3Setting(mCameraId);
	- mOEMIf = new SprdCamera3OEMIf(mCameraId, mSetting)
	- mOEMIf->camera_ioctrl(CAMERA_IOCTRL_SET_MULTI_CAMERAMODE, &mMultiCameraMode)
	- mOEMIf->openCamera()
	- mOEMIf->isIspToolMode()==1{
		- mOEMIf->ispToolModeInit()
		- startispserver(mCameraId)
		- ispvideo_RegCameraFunc
		}
	}
- *hw_device = &mCameraDevice.common //返回设备
}@SprdCamera3HWI.cpp

//设备操作函数
volatile uint32_t gHALLogLevel = 4;

camera3_device_ops_t SprdCamera3HWI::mCameraOps = {
    .initialize = SprdCamera3HWI::initialize,
    .configure_streams = SprdCamera3HWI::configure_streams,
    .register_stream_buffers = NULL, // SprdCamera3HWI::register_stream_buffers,
    .construct_default_request_settings =
        SprdCamera3HWI::construct_default_request_settings,
    .process_capture_request = SprdCamera3HWI::process_capture_request,
    .get_metadata_vendor_tag_ops =
        NULL, // SprdCamera3HWI::get_metadata_vendor_tag_ops,
    .dump = SprdCamera3HWI::dump,
    .flush = SprdCamera3HWI::flush,
}

process_capture_request{//处理请求
- SprdCamera3HWI *hw = reinterpret_cast<SprdCamera3HWI *>(device->priv)
- hw->processCaptureRequest(request)-->SprdCamera3HWI::processCaptureRequest
}

vendor/sprd/modules/libcamera/hal3_2v1/SprdCamera3Hal.cpp
vendor/sprd/modules/libcamera/hal3_2v1/SprdCamera3Factory.cpp
vendor/sprd/modules/libcamera/hal3_2v1/SprdCamera3HWI.cpp


