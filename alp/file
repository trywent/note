_____________________
int open(const char *pathname, int flags, mode_t mode);
pathname:文件路径
flags:必须包含O_RDONLY,  O_WRONLY,  or  O_RDWR之一
	文件打开标识 O_CREAT, O_EXCL,O_NOCTTY, and O_TRUNC
	文件状态标识，可以通过fcntl进行修改
mode:需要创建文件时，设置文件的权限

ssize_t read(int fd, void *buf, size_t count);//返回实际读取的数据个数
ssize_t write(int fd, const void *buf, size_t count);//返回写入的数据个数

//流操作stream
fdopen 

/************************************
监听文件描述符，获取数据(等待事件)

fds   监听的文件描述符
nfds  文件描述符的个数
timeout  等待时间


poll，ppoll:等待文件描述符上的事件，直到文件描述符能够执行IO操作。会阻塞直到事件发生
ppoll与poll的区别是，ppoll除了超时结束等待，还会在收到某个信号后结束等待。
************************************/
struct pollfd {
               int   fd;         /* file descriptor */
               short events;     /* requested events */
               short revents;    /* returned events */
           };
int poll(struct pollfd *fds, nfds_t nfds, int timeout);




int ppoll(struct pollfd *fds, nfds_t nfds,
               const struct timespec *tmo_p, const sigset_t *sigmask);


==================================
/************************************
select,pselect:等待文件描述符准备好执行IO操作

readfds   监听可读
writefds  监听可写
exceptfds 监听抛异常的fd
timeout  等待时间


************************************/
int select(int nfds, fd_set *readfds, fd_set *writefds,
                  fd_set *exceptfds, struct timeval *timeout);

int pselect(int nfds, fd_set *readfds, fd_set *writefds,
                   fd_set *exceptfds, const struct timespec *timeout,
                   const sigset_t *sigmask);






==================================
/************************************
epoll:(仅比poll快)
poll的变种可用做边界触发，水平触发，能够监听多个文件描述符

-epoll_create返回指向epoll实例的指针。结束使用close()关闭
-epoll_ctl注册感兴趣的文件描述符。注册在当前epoll上的文件描述符被称为epoll set
-epoll_wait开始工作

epoll事件分发接口能够作用为 edge-triggered (ET)和level-triggered (LT)。
1，在pipe读取端的文件描述符(rfd),注册到epoll实例。
2，pipe写入端，写入2kB数据
3，对epoll_wait的调用会返回rfd    //边界触发,产生事件
4，pipe读取端，从rfd读取1KB数据
5，调用epoll_wait                //边界触发，不会获取事件


************************************/
int epoll_create(int size) //返回一个epoll实例


/************************************

epfd  epoll实例
op    操作类型EPOLL_CTL_ADD EPOLL_CTL_MOD EPOLL_CTL_DEL
fd    要监听的文件
event 
************************************/
int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);



/************************************

epfd  epoll实例
event 返回的事件
************************************/
int epoll_wait(int epfd, struct epoll_event *events,
                      int maxevents, int timeout);

int epoll_pwait(int epfd, struct epoll_event *events,
                      int maxevents, int timeout,
                      const sigset_t *sigmask);


epoll_wait返回epoll_event:

	typedef union epoll_data {
               void    *ptr;
               int      fd;
               uint32_t u32;
               uint64_t u64;
           } epoll_data_t;

           struct epoll_event {
               uint32_t     events;    /* Epoll events */
               epoll_data_t data;      /* User data variable */
           };


==================================
/************************************


************************************/
int eventfd(unsigned int initval, int flags);

read
write
poll/select