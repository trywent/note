/*************************************
  kernel binder
  
  BC_TRANSACTION ---> BR_TRANSACTION 
  BR_REPLY       <--- BC_REPLY
  
*/
CONFIG_ANDROID_BINDER_DEVICES="binder,hwbinder,vndbinder"

device_initcall(binder_init){
- binder_deferred_workqueue = create_singlethread_workqueue("binder")
- debugfs_create_dir("binder") //创建/sys/kernel/debug/binder/*
- debugfs_create_file("state")
- init_binder_device("binder,hwbinder,vndbinder"){
	- struct binder_device *binder_device = kzalloc(sizeof(*binder_device))
	- binder_device->miscdev.fops = &binder_fops
	- misc_register(&binder_device->miscdev)
	- hlist_add_head(&binder_device->hlist, &binder_devices)
	}
}

//open
binder_open(struct inode *nodp, struct file *filp){
- struct binder_proc *proc = kzalloc(sizeof(*proc))
- proc->tsk = current->group_leader
- struct binder_device *binder_dev = container_of(filp->private_data, struct binder_device,miscdev)
- proc->pid = current->group_leader->pid
- filp->private_data = proc //保存proc信息
}

binder_ioctl(struct file *filp,unsigned int cmd, unsigned long arg){
- struct binder_proc *proc = filp->private_data
- struct binder_thread *thread =binder_get_thread(proc){
	- struct binder_thread *thread = binder_get_thread_ilocked(proc, NULL)
	  //若没有获取到,则创建
	- struct binder_thread *new_thread = kzalloc(sizeof(*thread))
	- binder_get_thread_ilocked(proc, new_thread){
		- struct binder_thread *thread = new_thread
		- thread->pid = current->pid
		- thread->task = current
		}
- BINDER_WRITE_READ:binder_ioctl_write_read
}

//binder读写操作
binder_ioctl_write_read(cmd, arg, thread){
 //读取user数据
- void __user *ubuf = (void __user *)arg
- struct binder_write_read bwr
- copy_from_user(&bwr, ubuf, sizeof(bwr))
 //写读数据
- binder_thread_write(bwr.write_buffer,)
- binder_thread_read
}

binder_thread_write(struct binder_proc *proc,struct binder_thread *thread,
	binder_uintptr_t binder_buffer, size_t size,binder_size_t *consumed){
- void __user *buffer = (void __user *)(uintptr_t)binder_buffer
- void __user *ptr = buffer + *consumed //数据位置
- get_user(cmd, (uint32_t __user *)ptr) //获取命令
- BC_TRANSACTION,BC_REPLY:{
	- struct binder_transaction_data tr
	- copy_from_user_preempt_disabled(&tr, ptr, sizeof(tr))//拷贝数据
	- binder_transaction(proc, thread, &tr,cmd == BC_REPLY, 0)
	}
}

//BC_TRANSACTION,BC_REPLY
binder_transaction(struct binder_proc *proc, struct binder_thread *thread,
		 struct binder_transaction_data *tr, int reply){
- reply{

	}
- transaction{
	- tr->target.handle不为空,binder_get_ref(tr->target.handle) //查找handle索引
	}

 //解析数据中binder
- BINDER_TYPE_BINDER:
  BINDER_TYPE_WEAK_BINDER:{
	- struct flat_binder_object *fp //binder 的数据结构
	- struct binder_node *node = binder_get_node(proc, fp->binder) //为binder创建node
	- struct binder_ref *ref = binder_get_ref_for_node(target_proc, node)
	- fp->type = BINDER_TYPE_HANDLE //设置为handle
	- fp->binder = 0,fp->handle = ref->desc
	}

- BINDER_TYPE_HANDLE
  BINDER_TYPE_WEAK_HANDLE:
}

//BC_ENTER_LOOPER BC_REGISTER_LOOPER

kernel/drivers/android/binder.c
