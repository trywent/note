/******************************
 InputMethodManagerService
*/

//服务监听输入法：
SettingsObserver{
-输入法使能监听器,resolver.registerContentObserver(Settings.Secure.ENABLED_INPUT_METHODS)
-默认输入法监听器，resolver.registerContentObserver(Settings.Secure.DEFAULT_INPUT_METHOD)
}@InputMethodManagerService.java



//设置默认输入法
putSelectedInputMethod-->设置默认输入法Settings.Secure.DEFAULT_INPUT_METHOD

//获取使能的输入法列表：
getEnabledInputMethodsAndSubtypeList-->Settings.Secure.getString(Settings.Secure.ENABLED_INPUT_METHODS)

//使能输入法：
InputMethodManagerService-->mSettings.enableAllIMEsIfThereIsNoEnabledIME
@InputMethodManagerService.java(第一次启动使能所有输入法)enableAllIMEsIfThereIsNoEnabledIME
-->putEnabledInputMethodsStr@InputMethodUtils.java


//语言变化reset输入法：
resetStateIfCurrentLocaleChangedLocked-->resetAllInternalStateLocked
resetDefaultImeLocked{
- defIm = InputMethodUtils.isValidSystemDefaultIme{ //获取默认输入法
	
	}
- defIm = InputMethodUtils.getMostApplicableDefaultIME //没有获取到,获取系统默认
- setSelectedInputMethodAndSubtypeLocked{
	- mSettings.putSelectedSubtype
	- Settings.putSelectedInputMethod(
	}
}@InputMethodManagerService.java

frameworks/base/services/java/com/android/server/InputMethodManagerService.java
frameworks/base/core/java/com/android/internal/inputmethod/InputMethodUtils.java

======================
输入框弹出输入法：
onTouchEvent(触摸事件)-->viewClicked-->imm.viewClicked@TextView.java-->viewClicked@
InputMethodManager.java-->viewClicked-->checkFocus-->checkFocusNoStartInput(检测输入法是否已经启动)
--startInputInner@InputMethodManager.java-->onCreateInputConnection@TextView.java--mService.startInput
@InputMethodManager.java-->startInput-->startInputLocked-->startInputUncheckedLocked-->
(开始输入服务)mContext.bindService(SERVICE_INTERFACE)@InputMethodManagerService.java

绑定服务后返回服务代理：
onBind-->onCreateInputMethodInterface@AbstractInputMethodService.java-->onCreateInputMethodInterface
-->new InputMethodImpl@InputMethodService.java

onBind-->(返回服务代理)new IInputMethodWrapper@AbstractInputMethodService.java

服务端：
onServiceConnected-->handleMessage(MSG_CREATE_SESSION)-->((IInputMethod)args.arg1).createSession
-->MethodCallback.sessionCreated-->onSessionCreated-->handleMessage-->
((IInputMethodClient)args.arg1).onBindMethod@InputMethodManagerService.java
mClient.onBindMethod-->mH.sendMessage(MSG_BIND)-->H.handleMessage-->startInputInner@InputMethodManager.java

显示输入法窗口：
showSoftInput-->showWindow-->showWindowInner-->updateInputViewShown-->onCreateInputView
_____________________________________
启动输入法应用：
startInput-->startInputLocked(检测client是否是焦点窗口)-->startInputUncheckedLocked-->
startInputInnerLocked(绑定输入应用，加入输入法窗口)@WindowManagerService.java

选择输入法：
handleMessage(MSG_SHOW_IM_PICKER)-->showInputMethodMenuInternal-->setInputMethodLocked
_____________________________________
输入焦点更新：(窗口增加，移动，删除都有可能更新焦点)
updateFocusedWindowLocked-->H.handleMessage(REPORT_FOCUS_CHANGE)-->newFocus.
mClient.windowFocusChanged@WindowManagerService.java-->W.windowFocusChanged-->
windowFocusChanged-->ViewRootHandler.handleMessage(MSG_WINDOW_FOCUS_CHANGED)-->
imm.onWindowFocus@ViewRootImpl.java


performTraversals-->imm.onWindowFocus@ViewRootImpl.java-->onWindowFocus@InputMethodManager.java

activityStack中更新焦点：
(结束，恢复activity)resumeTopActivityLocked@ActivityStack.java-->setFocusedActivityLocked-->
mWindowManager.setFocusedApp@ActivityManagerService.java-->setFocusedApp-->updateFocusedWindowLocked

_____________________________________
输入法创建窗口：
onCreate-->new SoftInputWindow@InputMethodService.java
SoftInputWindow-->initDockWindow(TYPE_INPUT_METHOD)@SoftInputWindow.java

输入法加入窗口：
addWindow(TYPE_INPUT_METHOD)-->addInputMethodWindowToListLocked-->addWindowToListInOrderLocked@WindwoManagerService.java

输入法显示窗口：
onTouchEvent-->imm.showSoftInput@TextView.java-->showSoftInput-->executeMessage(DO_SHOW_SOFT_INPUT)
-->inputMethod.showSoftInput@IInputMethodWrapper.java-->InputMethodImpl.showSoftInput-->
showWindow-->showWindowInner-->mWindow.show@InputMethodService.java-->show-->mWindowManager.addView
(mDecor, l)@Dialog.java

showSoftInput-->mService.showSoftInput@InputMethodManager.java-->showSoftInput
-->showCurrentInputLocked

frameworks/base/core/java/android/view/inputmethod/InputMethodManager.java
frameworks/base/core/java/android/widget/TextView.java
frameworks/base/services/java/com/android/server/InputMethodManagerService.java
frameworks/base/core/java/android/inputmethodservice/SoftInputWindow.java
frameworks/base/core/java/android/inputmethodservice/InputMethodService.java
frameworks/base/core/java/android/inputmethodservice/AbstractInputMethodService.java
frameworks/base/core/java/android/inputmethodservice/IInputMethodWrapper.java

_____________________________________

startInputInner@InputMethodManager.java-->windowGainedFocus-->
mIWindowManager.inputMethodClientHasFocus@InputMethodManagerService.java
-->

检查输入法窗口的目标:
inputMethodClientHasFocus{

-判断传入的目标是否与找到的目标一致

}-->findDesiredInputMethodWindowIndexLocked{

从上到下，查找能够输入的窗口，被选为目标窗口。返回目标窗口的索引值+1
-canBeImeTarget //判断窗口是否能够输入
-如果找到目标，且目标窗口的应用正在进行动画则返回
-找到目标，设置输入法的调整层次值为目标应用的的层次值
-没有找到目标，且要移动输入法窗口，则仅设置输入法的调整层次值为0
}@WindowManagerService.java 



调整input窗口Z轴位置：
findDesiredInputMethodWindowIndexLocked(根据目标窗口，调整输入法窗口)-->setInputMethodAnimLayerAdjustment
(调整输入法，输入法对话框窗口)-->mInputMethodAnimLayerAdjustment = adj@WindowManagerService.java

移动输入法窗口：
moveInputMethodWindowsIfNeededLocked{

-窗口是否已经在目标位置。查找所有的输入法窗口，判断是否是连续的
-tmpRemoveWindowLocked(从原来位置移除)，reAddWindowLocked(加入到正确位置)
}-->moveInputMethodDialogsLocked{

-将输入对话框移动到指定位置
}@WindowManagerService.java

更新焦点窗口：
updateFocusedWindowLocked{
-computeFocusedWindowLocked,查找一个窗口的appToken不在当前焦点窗口apptocken之下，且能够接收事件，返回该窗口
-moveInputMethodWindowsIfNeededLocked,移动窗口
}

设置应用焦点：
setFocusedActivityLocked-->mWindowManager.setFocusedApp@ActivityManagerService.java-->
setFocusedApp(设置当前焦点应用mFocusedApp)@WindowManagerService.java

==============================
输入法应用：
InputMethodService实现输入法
- 显示界面，onCreateInputView
- 全屏显示(一个单独输入框在输入法之上)，onEvaluateFullscreenMode
- 产生事件/字符到应用，getCurrentInputConnection



onInitializeInterface() 
onBindInput() 绑定到一个client.
onStartInput(EditorInfo, boolean) 开始输入.
onCreateInputView(), onCreateCandidatesView(), and onCreateExtractTextView() 非常驻UI
onStartInputView(EditorInfo, boolean) 


//显示UI
updateInputViewShown-->(设置输入法UI)setInputView(onCreateInputView)@InputMethodService.java



/******************************
自带latin输入法：

*/

发送键值：
KeyboardView.onTouchEvent-->(发送键值)InputConnection.sendKeyEvent

设置键盘UI：
setKeyboard@MainKeyboardView.java-->setKeyboard@keyboardView.java

onCreateInputView@LatinIME.java-->onCreateInputView{
- 创建inputView,(MainKeyboardView)keyboardView，(R.layout.input_view,R.id.keyboard_view)
- AccessibleKeyboardViewProxy
}@KeyBoardSwitcher.java


setAlphabetKeyboard(mKeyboardLayoutSet.getKeyboar(ELEMENT_ALPHABET))-->setKeyboard-->MainKeyboardView.setKeyboard@KeyBoardSwitcher.java
____________________
loadKeyboard{
- 设置键盘大小，builder.setKeyboardGeometry
- 创建键盘，builder.build
}@KeyboardSwitcher.java

加载布局文件：
Builder.build("keyboard_layout_set_")-->parseKeyboardLayoutSet-->parseKeyboardLayoutSetContent
-->parseKeyboardLayoutSetElement@keyboardLayoutSet.java

获取键盘：
getKeyboard(ELEMENT_ALPHABET,键盘宽度params.mKeyboardWidth)-->getKeyboard-->
builder.load@KeyboardLayoutSet.java-->load-->parseKeyboard-->parseKeyboardAttributes(params.mId.mWidth)@KeyboardBuilder.java

packages/inputmethods/LatinIME/java/src/com/android/inputmethod/latin/LatinIME.java
packages/inputmethods/LatinIME/java/src/com/android/inputmethod/latin/KeyboardLayoutSet.java
