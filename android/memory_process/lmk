/***********************
 内存管理
*/
cat /proc/pid/status


//rk的杀应用机制lowmem_package_filter.xml
completePauseLocked-->mService.killAppAtUsersRequest

resumeTopActivityInnerLocked-->mService.killAppAtUsersRequest


config_lowMemoryKillerMinFreeKbytesAbsolute //值大时保留的进程数据多，反之则少
config_maxCachedApps //保留的进程数，不包括service，可见进程，前台进程


adj:
0,58,117,176,529,1000
minfree:
8192,10240,12288,14336,16384,20480



内存信息(读取/proc/meminfo)：mMemInfoReader@RunningProcessesView.java
mForegroundProcessText //系统内存 总内存-可用内存-应用内存
mBackgroundProcessText //可用内存  MemFree + Cached + 后台可杀进程
mAppsProcessText       //应用内存 所有应用的进程内存



Settings/src/com/android/settings/applications/RunningProcessesView.java
=====================

updateOomAdjLocked{
- 
- 
- 遍历mLruProcesses{
	- ENABLE_B_SERVICE_PROPAGATION(B级服务){

		}
	- 应用没有被杀且有进程{
		- computeOomAdjLocked
		- app.curAdj,应用优先级没有设置{}
		- applyOomAdjLocked
		- 检查进程状态curProcState{}
		}
	}
}

applyOomAdjLocked{
- 
- ProcessList.setOomAdj(app.curAdj)

}

/*设置杀进程阈值
  6中回收内存杀进程的级别 0 1 2 3 9 15
  mOomAdj = new int[] {
            FOREGROUND_APP_ADJ, VISIBLE_APP_ADJ, PERCEPTIBLE_APP_ADJ,
            BACKUP_APP_ADJ, CACHED_APP_MIN_ADJ, CACHED_APP_MAX_ADJ
    }
 *mOomMinFreeLow  512M内存
 *mOomMinFreeHigh 1G内存	
*/
updateOomLevels{
- 
- writeLmkd(LMK_TARGET)
}

//设置进程优先级
setOomAdj-->writeLmkd{
- openLmkdSocket{
	- new LocalSocket(LocalSocket.SOCKET_SEQPACKET)
	- sLmkdSocket.connect(new LocalSocketAddress("lmkd"))
	- sLmkdOutputStream//创建stream，写数据
	}
- sLmkdOutputStream.write//写入对应pid要设置的amt（adjustment value）值
}

frameworks/base/services/core/java/com/android/server/am/ProcessList.java
===============
//daemon
main{
- 初始化init{
	- epoll_create
	- android_get_control_socket("lmkd")并且listen
	- 注册监听epoll_ctl(epollfd, EPOLL_CTL_ADD)
	- 是否使用内核memkiller，access("/sys/module/lowmemorykiller/parameters/minfree")
	- 不使用内核机制，则使用init_mp(MEMPRESSURE_WATCH_LEVEL, (void *)&mp_event)
	}
- mainloop{
	- 等待事件epoll_wait 
	- 处理连接事件ctrl_connect_handler(event){
		- 建立连接，accept(ctrl_lfd)
		- 设置处理函数ctrl_data_handler，监听socket,epoll_ctl(epollfd, EPOLL_CTL_ADD, ctrl_dfd)
		}
	- ctrl_data_handler-->ctrl_command_handler{
		- LMK_TARGET {   //设置minfree，adj
			- cmd_target-->writefilestring
			}
		- LMK_PROCPRIO{, //设置进程oom_score_adj
			- cmd_procprio-->writefilestring(/proc/%d/oom_score_adj)//写文件
			}
		- LMK_PROCREMOVE{
			- cmd_procremove-->pid_remove
			}
		}
	}
}
system/core/lmkd/lmkd.c



/proc/sys/vm # echo 1 > overcommit_memory

===========================
//kernel
使用方法：
echo "0,8" > /sys/module/lowmemorykiller/parameters/adj
echo "1024,4096" > /sys/module/lowmemorykiller/parameters/minfree
当内存页数小于4096时开始杀，内存oom_score_adj>=8的进程
当内存页数小于1024时开始杀，内存oom_score_adj>=0的进程


lowmem_scan{
- 获取空闲内存值other_free，file_free，global_page_state()
- 遍历lowmem_minfree获取最小的阈值，记录对应的进程lowmem_adj，min_score_adj //
- 遍历进程for_each_process，记录优先值大于min_score_adj的进程
- send_sig(SIGKILL, selected)//杀掉选择的进程
}

drivers/staging/android/lowmemorykiller.c
=======================
//setting 后台进程，不保留活动...

//立即结束activity
writeImmediatelyDestroyActivitiesOptions-->ActivityManagerNative.getDefault().setAlwaysFinish
@DevelopmentSettings.java-->setAlwaysFinish(mAlwaysFinishActivities)@ActivityManagerService.java

//设置进程限制数
writeAppProcessLimitOptions-->ActivityManagerNative.getDefault().setProcessLimit
@DevelopmentSettings.java-->setProcessLimit(mProcessLimit)@ActivityManageService.java


packages/apps/Settings/src/com/android/settings/DevelopmentSettings.java
packages/apps/Settings/res/xml/development_prefs.xml





