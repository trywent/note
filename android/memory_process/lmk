/***********************
 内存管理
  - 每个进程有个优先级
  - 可用内存分为多个等级（值越小，优先级越高）
  - 当可用内存小于某个等级时，触发杀对用优先级的进程

 查看进程adj:
  dumpsys activity o
*/
cat /proc/pid/status


//rk的杀应用机制lowmem_package_filter.xml
completePauseLocked-->mService.killAppAtUsersRequest

resumeTopActivityInnerLocked-->mService.killAppAtUsersRequest


config_lowMemoryKillerMinFreeKbytesAbsolute //值大时保留的进程数据多，反之则少
config_maxCachedApps //保留的进程数，不包括service，可见进程，前台进程


adj:
0,58,117,176,529,1000
minfree:
8192,10240,12288,14336,16384,20480


内存信息(读取/proc/meminfo)：mMemInfoReader@RunningProcessesView.java
mForegroundProcessText //系统内存 总内存-可用内存-应用内存
mBackgroundProcessText //可用内存  MemFree + Cached + 后台可杀进程
mAppsProcessText       //应用内存 所有应用的进程内存



Settings/src/com/android/settings/applications/RunningProcessesView.java
/************************
  android设置优先级
  
*/
//更新所有进程adj
updateOomAdjLocked{
  //遍历进程
- int N = mLruProcesses.size()
- ProcessRecord app = mLruProcesses.get(i)
- computeOomAdjLocked(app, ProcessList.UNKNOWN_ADJ, TOP_APP, true, now)	//计算进程的adj
- applyOomAdjLocked(app, true, now, nowElapsed)				//设置adj
- 
}@ActivityManagerService.java

//计算adj值
computeOomAdjLocked(ProcessRecord app, int cachedAdj, ProcessRecord TOP_APP,boolean doingAll, long now){

}@ActivityManagerService.java


//设置adj
applyOomAdjLockedProcessRecord app, boolean doingAll, long now, long nowElapsed) {
- 
- ProcessList.setOomAdj(app.pid, app.uid, app.curAdj)

}@ActivityManagerService.java


//设置某个app的adj
updateOomAdjLocked(ProcessRecord app, int cachedAdj,ProcessRecord TOP_APP, boolean doingAll, long now){
- computeOomAdjLocked(app, cachedAdj, TOP_APP, doingAll, now)
- ProcessInfo info = createProcessInfo(app)
- processLmkAdjTunningIfneeded(info, mLastMemoryLevel, now)
- applyOomAdjLocked(app, doingAll, now, SystemClock.elapsedRealtime())
}@ActivityManagerService.java

/*
  根据分辨率，设置kernel中回收内存杀进程的级别 0 1 2 3 9 15
  mOomAdj = new int[] {
            FOREGROUND_APP_ADJ, VISIBLE_APP_ADJ, PERCEPTIBLE_APP_ADJ,
            BACKUP_APP_ADJ, CACHED_APP_MIN_ADJ, CACHED_APP_MAX_ADJ
    }
  mOomMinFreeLow  512M内存
  mOomMinFreeHigh 1G内存
*/
applyDisplaySize(WindowManagerService wm){
- Point p = new Point()
- wm.getBaseDisplaySize(Display.DEFAULT_DISPLAY, p)
- updateOomLevels(p.x, p.y, true)-->
	updateOomLevels(int displayWidth, int displayHeight, boolean write){
	- 
	- writeLmkd(LMK_TARGET)
	}
}@ProcessList.java

//设置进程adj到kernel
setOomAdj(int pid, int uid, int amt){
- ByteBuffer buf = ByteBuffer.allocate(4 * 4)
- buf.putInt(LMK_PROCPRIO)
- buf.putInt(pid)
- buf.putInt(uid)
- buf.putInt(amt)
- writeLmkd(buf){
	- openLmkdSocket{
		- new LocalSocket(LocalSocket.SOCKET_SEQPACKET)
		- sLmkdSocket.connect(new LocalSocketAddress("lmkd"))
		- sLmkdOutputStream//创建stream，写数据
		}
	- sLmkdOutputStream.write//写入对应pid要设置的amt（adjustment value）值
	}
}@ProcessList.java

frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java
frameworks/base/services/core/java/com/android/server/am/ProcessList.java
/************************
 daemon
*/
main{
- 初始化init{
	- epoll_create
	- android_get_control_socket("lmkd")并且listen
	- 注册监听epoll_ctl(epollfd, EPOLL_CTL_ADD)
	- 是否使用内核memkiller，access("/sys/module/lowmemorykiller/parameters/minfree")
	- 不使用内核机制，则使用init_mp(MEMPRESSURE_WATCH_LEVEL, (void *)&mp_event)
	}
- mainloop{
	- 等待事件epoll_wait 
	- 处理连接事件ctrl_connect_handler(event){
		- 建立连接，accept(ctrl_lfd)
		- 设置处理函数ctrl_data_handler，监听socket,epoll_ctl(epollfd, EPOLL_CTL_ADD, ctrl_dfd)
		}
	- ctrl_data_handler-->ctrl_command_handler{
		- LMK_TARGET {   //设置minfree，adj
			- cmd_target-->writefilestring
			}
		- LMK_PROCPRIO{, //设置进程oom_score_adj
			- cmd_procprio-->writefilestring(/proc/%d/oom_score_adj)//写文件
			}
		- LMK_PROCREMOVE{
			- cmd_procremove-->pid_remove
			}
		}
	}
}
system/core/lmkd/lmkd.c



/proc/sys/vm # echo 1 > overcommit_memory


/************************
 kernel
*/
使用方法：
echo "0,8" > /sys/module/lowmemorykiller/parameters/adj
echo "1024,4096" > /sys/module/lowmemorykiller/parameters/minfree
当内存页数小于4096时开始杀，内存oom_score_adj>=8的进程
当内存页数小于1024时开始杀，内存oom_score_adj>=0的进程


lowmem_scan{
- 获取空闲内存值other_free，file_free，global_page_state()
- 遍历lowmem_minfree获取最小的阈值，记录对应的进程lowmem_adj，min_score_adj //
- 遍历进程for_each_process，记录优先值大于min_score_adj的进程
- send_sig(SIGKILL, selected)//杀掉选择的进程
}

drivers/staging/android/lowmemorykiller.c
=======================
//setting 后台进程，不保留活动...

//立即结束activity
writeImmediatelyDestroyActivitiesOptions-->ActivityManagerNative.getDefault().setAlwaysFinish
@DevelopmentSettings.java-->setAlwaysFinish(mAlwaysFinishActivities)@ActivityManagerService.java

//设置进程限制数
writeAppProcessLimitOptions-->ActivityManagerNative.getDefault().setProcessLimit
@DevelopmentSettings.java-->setProcessLimit(mProcessLimit)@ActivityManageService.java


packages/apps/Settings/src/com/android/settings/DevelopmentSettings.java
packages/apps/Settings/res/xml/development_prefs.xml





