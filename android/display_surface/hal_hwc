/************************
  HAL hwc1

*/

//module
typedef struct hwc_module {
    struct hw_module_t common;
} hwc_module_t;

//composer设备
typedef struct hwc_composer_device_1 {
    struct hw_device_t common;
    int (*prepare)(struct hwc_composer_device_1 *dev,size_t numDisplays, hwc_display_contents_1_t** displays);	
    int (*set)(struct hwc_composer_device_1 *dev,size_t numDisplays, hwc_display_contents_1_t** displays);	//eglSwapBuffers
    int (*eventControl)(struct hwc_composer_device_1* dev, int disp,int event, int enabled);	//关闭或打开h/w composer事件(HWC_EVENT_VSYNC)
    union {
        int (*blank)(struct hwc_composer_device_1* dev, int disp, int blank);
        int (*setPowerMode)(struct hwc_composer_device_1* dev, int disp,int mode);		//替代blank
    };
    int (*query)(struct hwc_composer_device_1* dev, int what, int* value);
    void (*registerProcs)(struct hwc_composer_device_1* dev,hwc_procs_t const* procs);		//注册回调
    void (*dump)(struct hwc_composer_device_1* dev, char *buff, int buff_len);
    int (*getDisplayConfigs)(struct hwc_composer_device_1* dev, int disp,uint32_t* configs, size_t* numConfigs);	//获取显示屏config
    int (*getDisplayAttributes)(struct hwc_composer_device_1* dev, int disp, uint32_t config, const uint32_t* attributes, int32_t* values);
    int (*getActiveConfig)(struct hwc_composer_device_1* dev, int disp);
    int (*setActiveConfig)(struct hwc_composer_device_1* dev, int disp,int index);
    int (*setCursorPositionAsync)(struct hwc_composer_device_1 *dev, int disp, int x_pos, int y_pos);	//鼠标箭头，在prepare()/set()之间调用
    void* reserved_proc[1];
} hwc_composer_device_1_t;


//hal层显示器状态回调
typedef struct hwc_procs {
    void (*invalidate)(const struct hwc_procs* procs);				//触发屏幕刷新
    void (*vsync)(const struct hwc_procs* procs, int disp, int64_t timestamp);	//vsync event
    void (*hotplug)(const struct hwc_procs* procs, int disp, int connected);	//显示器连接断开事件
} hwc_procs_t;

//输出到屏幕的内容
typedef struct hwc_display_contents_1 {
    /*  文件描述符，在合成结束时发送信号    */
    int retireFenceFd;

    union {
        struct {
            hwc_display_t dpy;
            hwc_surface_t sur;
        };
        /*虚拟显示*/
        struct {
            buffer_handle_t outbuf;
            int outbufAcquireFenceFd;
        };
    };
    uint32_t flags;
    size_t numHwLayers;
    hwc_layer_1_t hwLayers[0];

} hwc_display_contents_1_t;


//layer
typedef struct hwc_layer_1 {
    /*
     * HWC_BACKGROUND 		背景层，只有backgroundColor有效
     * HWC_FRAMEBUFFER_TARGET 	OpenGL ES合成的内容目标层
     * HWC_FRAMEBUFFER 		OpenGL ES将该层绘制到framebuffer
     * HWC_OVERLAY		被hwc合成(不被OpenGl ES合成)
     * HWC_SIDEBAND		该层的数据来自sideband video stream
     * HWC_CURSOR_OVERLAY 	该层不被HWC合成
     */
    int32_t compositionType;
    uint32_t hints;
    uint32_t flags;
    union {
        hwc_color_t backgroundColor;	//HWC_BACKGROUND layer	
	struct {			//正常layer	    
            union {			//数据源
                /* HWC_FRAMEBUFFER, HWC_OVERLAY,HWC_FRAMEBUFFER_TARGET要合成的数据buffer,一般从 gralloc中分配 */
                buffer_handle_t handle;
                /* HWC_SIDEBAND 类型时sideband数据源 */
                const native_handle_t* sidebandStream;
            };            
            uint32_t transform;		///* transformation to apply to the buffer during composition */            
            int32_t blending;		///* blending to apply during composition */
            union {			//源数据的区域
                hwc_rect_t sourceCropi;
                hwc_rect_t sourceCrop;
                hwc_frect_t sourceCropf;
            };
            hwc_rect_t displayFrame;		//绘制到屏幕哪个区域
            hwc_region_t visibleRegionScreen;	//在屏幕上的可见区域
            int acquireFenceFd;			//用来获取通知buffer中数据可用
            int releaseFenceFd;			//为sync fence object设置的文件描述符，用于hwc读取buffer后发送信号
            uint8_t planeAlpha;			//透明度
            uint8_t _pad[3];
            hwc_region_t surfaceDamage;		//source buffer内容被修改的大小
        };
    };
    uint8_t reserved[96 - 84];
} hwc_layer_1_t;



/*
 default 实现
 */
hwc_module_t HAL_MODULE_INFO_SYM = {
    .common = {
        .tag = HARDWARE_MODULE_TAG,
        .version_major = 1,
        .version_minor = 0,
        .id = HWC_HARDWARE_MODULE_ID,
        .name = "Sample hwcomposer module",
        .author = "The Android Open Source Project",
        .methods = &hwc_module_methods,
    }
}

static struct hw_module_methods_t hwc_module_methods = {
    .open = hwc_device_open
};

hwc_device_open{
- struct hwc_context_t *dev = (hwc_context_t*)malloc(sizeof(*dev))
- dev->device.prepare = hwc_prepare
- dev->device.set = hwc_set
}

//hwcomper1中才使用
HWComposer::fbPost-->mFbDev->post(/*写入位置fb地址保存在module中*/, /*要写入的数据*/buffer->handle)
@HWComposer.cpp-->fb_post@framebuffer.cpp


//获取display信息
queryDisplayProperties{
- 获取config，默认为1个，mHwc->getDisplayConfigs
- 获取属性，mHwc->getDisplayAttributes
- 保存信息到mDisplayData
}


hardware/libhardware/include/hardware/hwcomposer.h
hardware/libhardware/modules/hwcomposer/hwcomposer.cpp
/************************
  HAL hwcomposer2

  IComposer为hal接口
*/

//device
typedef struct hwc2_device {
    struct hw_device_t common;
    void (*getCapabilities)(struct hwc2_device* device, uint32_t* outCount, int32_t* /*hwc2_capability_t*/ outCapabilities)
    hwc2_function_pointer_t (*getFunction)(struct hwc2_device* device, int32_t /*hwc2_function_descriptor_t*/ descriptor)	//获取设备操作函数
} hwc2_device_t


//获取操作函数
getFunction(hwc2_device_t* /*device*/, int32_t descriptor) {
    switch (descriptor) {
        // global functions
        case HWC2_FUNCTION_DUMP:
            return asFP<HWC2_PFN_DUMP>(dumpHook);
        case HWC2_FUNCTION_REGISTER_CALLBACK:
            return asFP<HWC2_PFN_REGISTER_CALLBACK>(registerCallbackHook);

        // virtual display functions
        case HWC2_FUNCTION_GET_MAX_VIRTUAL_DISPLAY_COUNT:
            return asFP<HWC2_PFN_GET_MAX_VIRTUAL_DISPLAY_COUNT>(getMaxVirtualDisplayCountHook);
        case HWC2_FUNCTION_CREATE_VIRTUAL_DISPLAY:
            return asFP<HWC2_PFN_CREATE_VIRTUAL_DISPLAY>(createVirtualDisplayHook);
        case HWC2_FUNCTION_DESTROY_VIRTUAL_DISPLAY:
            return asFP<HWC2_PFN_DESTROY_VIRTUAL_DISPLAY>(destroyVirtualDisplayHook);
        case HWC2_FUNCTION_SET_OUTPUT_BUFFER:
            return asFP<HWC2_PFN_SET_OUTPUT_BUFFER>(setOutputBufferHook);

        // display functions
        case HWC2_FUNCTION_GET_DISPLAY_NAME:
            return asFP<HWC2_PFN_GET_DISPLAY_NAME>(getDisplayNameHook);
        case HWC2_FUNCTION_GET_DISPLAY_TYPE:
            return asFP<HWC2_PFN_GET_DISPLAY_TYPE>(getDisplayTypeHook);
        case HWC2_FUNCTION_GET_DOZE_SUPPORT:
            return asFP<HWC2_PFN_GET_DOZE_SUPPORT>(getDozeSupportHook);
        case HWC2_FUNCTION_GET_HDR_CAPABILITIES:
            return asFP<HWC2_PFN_GET_HDR_CAPABILITIES>(getHdrCapabilitiesHook);
        case HWC2_FUNCTION_SET_POWER_MODE:
            return asFP<HWC2_PFN_SET_POWER_MODE>(setPowerModeHook);
        case HWC2_FUNCTION_SET_VSYNC_ENABLED:
            return asFP<HWC2_PFN_SET_VSYNC_ENABLED>(setVsyncEnabledHook);
        case HWC2_FUNCTION_GET_COLOR_MODES:
            return asFP<HWC2_PFN_GET_COLOR_MODES>(getColorModesHook);
        case HWC2_FUNCTION_SET_COLOR_MODE:
            return asFP<HWC2_PFN_SET_COLOR_MODE>(setColorModeHook);
        case HWC2_FUNCTION_SET_COLOR_TRANSFORM:
            return asFP<HWC2_PFN_SET_COLOR_TRANSFORM>(setColorTransformHook);
        case HWC2_FUNCTION_GET_CLIENT_TARGET_SUPPORT:
            return asFP<HWC2_PFN_GET_CLIENT_TARGET_SUPPORT>(getClientTargetSupportHook);
        case HWC2_FUNCTION_SET_CLIENT_TARGET:
            return asFP<HWC2_PFN_SET_CLIENT_TARGET>(setClientTargetHook);

        // config functions
        case HWC2_FUNCTION_GET_DISPLAY_CONFIGS:
            return asFP<HWC2_PFN_GET_DISPLAY_CONFIGS>(getDisplayConfigsHook);
        case HWC2_FUNCTION_GET_DISPLAY_ATTRIBUTE:
            return asFP<HWC2_PFN_GET_DISPLAY_ATTRIBUTE>(getDisplayAttributeHook);
        case HWC2_FUNCTION_GET_ACTIVE_CONFIG:
            return asFP<HWC2_PFN_GET_ACTIVE_CONFIG>(getActiveConfigHook);
        case HWC2_FUNCTION_SET_ACTIVE_CONFIG:
            return asFP<HWC2_PFN_SET_ACTIVE_CONFIG>(setActiveConfigHook);

        // validate/present functions
        case HWC2_FUNCTION_VALIDATE_DISPLAY:
            return asFP<HWC2_PFN_VALIDATE_DISPLAY>(validateDisplayHook);
        case HWC2_FUNCTION_GET_CHANGED_COMPOSITION_TYPES:
            return asFP<HWC2_PFN_GET_CHANGED_COMPOSITION_TYPES>(getChangedCompositionTypesHook);
        case HWC2_FUNCTION_GET_DISPLAY_REQUESTS:
            return asFP<HWC2_PFN_GET_DISPLAY_REQUESTS>(getDisplayRequestsHook);
        case HWC2_FUNCTION_ACCEPT_DISPLAY_CHANGES:
            return asFP<HWC2_PFN_ACCEPT_DISPLAY_CHANGES>(acceptDisplayChangesHook);
        case HWC2_FUNCTION_PRESENT_DISPLAY:
            return asFP<HWC2_PFN_PRESENT_DISPLAY>(presentDisplayHook);
        case HWC2_FUNCTION_GET_RELEASE_FENCES:
            return asFP<HWC2_PFN_GET_RELEASE_FENCES>(getReleaseFencesHook);

        // layer create/destroy
        case HWC2_FUNCTION_CREATE_LAYER:
            return asFP<HWC2_PFN_CREATE_LAYER>(createLayerHook);
        case HWC2_FUNCTION_DESTROY_LAYER:
            return asFP<HWC2_PFN_DESTROY_LAYER>(destroyLayerHook);

        // layer functions; validateDisplay not required
        case HWC2_FUNCTION_SET_CURSOR_POSITION:
            return asFP<HWC2_PFN_SET_CURSOR_POSITION>(setCursorPositionHook);
        case HWC2_FUNCTION_SET_LAYER_BUFFER:
            return asFP<HWC2_PFN_SET_LAYER_BUFFER>(setLayerBufferHook);
        case HWC2_FUNCTION_SET_LAYER_SURFACE_DAMAGE:
            return asFP<HWC2_PFN_SET_LAYER_SURFACE_DAMAGE>(setLayerSurfaceDamageHook);

        // layer state functions; validateDisplay required
        case HWC2_FUNCTION_SET_LAYER_COMPOSITION_TYPE:
            return asFP<HWC2_PFN_SET_LAYER_COMPOSITION_TYPE>(setLayerCompositionTypeHook);
        case HWC2_FUNCTION_SET_LAYER_BLEND_MODE:
            return asFP<HWC2_PFN_SET_LAYER_BLEND_MODE>(setLayerStateHook<int32_t>);
        case HWC2_FUNCTION_SET_LAYER_COLOR:
            return asFP<HWC2_PFN_SET_LAYER_COLOR>(setLayerStateHook<hwc_color_t>);
        case HWC2_FUNCTION_SET_LAYER_DATASPACE:
            return asFP<HWC2_PFN_SET_LAYER_DATASPACE>(setLayerStateHook<int32_t>);
        case HWC2_FUNCTION_SET_LAYER_DISPLAY_FRAME:
            return asFP<HWC2_PFN_SET_LAYER_DISPLAY_FRAME>(setLayerStateHook<hwc_rect_t>);
        case HWC2_FUNCTION_SET_LAYER_PLANE_ALPHA:
            return asFP<HWC2_PFN_SET_LAYER_PLANE_ALPHA>(setLayerStateHook<float>);
        case HWC2_FUNCTION_SET_LAYER_SIDEBAND_STREAM:
            return asFP<HWC2_PFN_SET_LAYER_SIDEBAND_STREAM>(setLayerStateHook<buffer_handle_t>);
        case HWC2_FUNCTION_SET_LAYER_SOURCE_CROP:
            return asFP<HWC2_PFN_SET_LAYER_SOURCE_CROP>(setLayerStateHook<hwc_frect_t>);
        case HWC2_FUNCTION_SET_LAYER_TRANSFORM:
            return asFP<HWC2_PFN_SET_LAYER_TRANSFORM>(setLayerStateHook<int32_t>);
        case HWC2_FUNCTION_SET_LAYER_VISIBLE_REGION:
            return asFP<HWC2_PFN_SET_LAYER_VISIBLE_REGION>(setLayerStateHook<hwc_region_t>);
        case HWC2_FUNCTION_SET_LAYER_Z_ORDER:
            return asFP<HWC2_PFN_SET_LAYER_Z_ORDER>(setLayerStateHook<uint32_t>);
}@hardware/interface/graphics/composer/2.1/utils/hwc2onfbadapter/HWC2OnFbAdapter.cpp:

/*
 接口
*/
interface IComposer {
    getCapabilities() generates (vec<Capability> capabilities);
    dumpDebugInfo() generates (string debugInfo);
    createClient() generates (Error error, IComposerClient client);
}@IComposer.hal

interface IComposerClient {
    registerCallback(IComposerCallback callback)
    getMaxVirtualDisplayCount() generates (uint32_t count)
    createLayer(Display display, uint32_t bufferSlotCount)
    destroyLayer(Display display, Layer layer) generates (Error error)
    getActiveConfig(Display display) generates (Error error, Config config)
    getDisplayName(Display display) generates (Error error, string name)
}@IComposerClient.hal

//hal服务启动
int main() {
- android::ProcessState::initWithDriver("/dev/vndbinder");
- android::ProcessState::self()->setThreadPoolMaxThreadCount(4);
- android::ProcessState::self()->startThreadPool();
  //打开android.hardware.xxx@1.0::Ixxx库文件。获取接口HIDL_FETCH_Ixxx
- return defaultPassthroughServiceImplementation<IComposer>(4);	//IComposer服务
}@service.cpp

//加载库
IComposer* HIDL_FETCH_IComposer(const char*){
- const hw_module_t* module = nullptr;
- hw_get_module(HWC_HARDWARE_MODULE_ID, &module)
- return new HwcHal(module)
}@Hwc.cpp

hardware/interfaces/graphics/composer/2.1/default/service.cpp
hardware/interfaces/graphics/composer/2.1/default/Hwc.cpp
