/********************************************
  displayDevice 显示器的抽象。显示数据通过这里提交到屏幕？

  egl绘制 --> mSurface(producer) --> FramebufferSurface(consumer) --> screen
*/

SurfaceFlinger::createDefaultDisplayDevice() {
  //bufferqueue
- sp<IGraphicBufferProducer> producer
- sp<IGraphicBufferConsumer> consumer
- BufferQueue::createBufferQueue(&producer, &consumer)
- sp<FramebufferSurface> fbs = new FramebufferSurface(*mHwc, type, consumer)
- sp<DisplayDevice> hw = new DisplayDevice(this, DisplayDevice::DISPLAY_PRIMARY,token, fbs, producer...)//创建设备
- hw->makeCurrent(mEGLDisplay, mEGLContext)
}@SurfaceFlinger.cpp

//
DisplayDevice::DisplayDevice(const sp<SurfaceFlinger>& flinger, DisplayType type,int32_t hwcId...
	const sp<DisplaySurface>& displaySurface, const sp<IGraphicBufferProducer>& producer){
- mFlinger(flinger)
- mDisplaySurface(displaySurface)       			//consumer FramebufferSurface，显示到屏幕上
- Surface* surface
- mNativeWindow = surface = new Surface(producer) 		//producer egl处理的数据填入到producer
- ANativeWindow* const window = mNativeWindow.get()
- mSurface = eglSurface = eglCreateWindowSurface(display, config, window, NULL)
  //
- EGLDisplay display = eglGetDisplay(EGL_DEFAULT_DISPLAY)
- EGLSurface eglSurface = eglCreateWindowSurface(display, config, window, NULL)
- eglQuerySurface(display, eglSurface, EGL_WIDTH,  &mDisplayWidth)
- eglQuerySurface(display, eglSurface, EGL_HEIGHT, &mDisplayHeight)
  //
- setDisplayDevice{
	- property_get("ro.sf.swrotation", property, NULL)	//获取初始旋转
	- mDisplayWidth= w, mDisplayHeight = h			//设置宽高信息
	- DisplayDevice::orientationToTransfrom(displayOrientation, w, h,&mDisplayTransform)
	- setProjection(DisplayState::eOrientationDefault, mViewport, mFrame)
	}
}

//makecurrent.初始化?
createDefaultDisplayDevice-->hw->makeCurrent(mEGLDisplay, mEGLContext)@SurfaceFlinger.cpp
-->DisplayDevice::makeCurrent(EGLDisplay dpy, EGLContext ctx){
- EGLSurface sur = eglGetCurrentSurface(EGL_DRAW)
- eglMakeCurrent(dpy, mSurface, mSurface, ctx)
- setViewportAndProjection
}DisplayDevice.cpp


DisplayDevice::setViewportAndProjection() const {
- if ((mType == DisplayDevice::DISPLAY_PRIMARY)&& (property_get("ro.sf.swrotation", property, NULL) > 0)){
	- switch (atoi(property)) {
		- case 90:	//90,270度调换宽高
           	  case 270:
                	w = mDisplayHeight;
                	h = mDisplayWidth;
		}
	}
- Rect sourceCrop(0, 0, w, h)
- mFlinger->getRenderEngine().setViewportAndProjection(w, h, sourceCrop, h,false, Transform::ROT_0)
}@DisplayDevice.cpp

SurfaceFlinger::doDisplayComposition@SurfaceFlinger.cpp-->
DisplayDevice::swapBuffers(HWComposer& hwc) const {
- EGLBoolean success = eglSwapBuffers(mDisplay, mSurface)	//将数据提交到mSurface(producer)
- status_t result = mDisplaySurface->advanceFrame(){		//mDisplaySurface(conuser)获取数据
	- uint32_t slot = 0
	- sp<GraphicBuffer> buf
	- sp<Fence> acquireFence(Fence::NO_FENCE)
	- nextBuffer(slot, buf, acquireFence, dataspace)	//提交到hwc
	}@FramebufferSurface.cpp
}@DisplayDevice.cpp


frameworks/native/services/surfaceflinger/DisplayDevice.cpp
/********
  FramebufferSurface 在DisplayDevice中,合成窗口，提交到hw数据
  displaySurface = FramebufferSurface
  监听
*/

class FramebufferSurface : public ConsumerBase,public DisplaySurface

//创建frambuffer
new FramebufferSurface(*mHwc, type, consumer)-->
FramebufferSurface(HWComposer& hwc, int disp,const sp<IGraphicBufferConsumer>& consumer){
- ConsumerBase(consumer)
- mConsumer->setConsumerName("FramebufferSurface")
  //默认大小
- mConsumer->setDefaultBufferSize(activeConfig->getWidth(),activeConfig->getHeight())
}@FramebufferSurface.cpp

//hwc2不使用这个接口
void FramebufferSurface::onFrameAvailable(const BufferItem& /* item */) {
- nextBuffer(buf, acquireFence);
- mHwc.fbPost(mDisplayType, acquireFence, buf)
}@FramebufferSurface.cpp


FramebufferSurface::nextBuffer(uint32_t& outSlot, sp<GraphicBuffer>& outBuffer,
	 sp<Fence>& outFence,android_dataspace_t& outDataspace) {
  //从consumer获取buffer
- BufferItem item
- acquireBufferLocked(&item, 0){
	- mConsumer->acquireBuffer(item, presentWhen, maxFrameNumber)
	- mSlots[item->mSlot].mGraphicBuffer = item->mGraphicBuffer
	- mSlots[item->mSlot].mFrameNumber = item->mFrameNumber
	}@ConsumerBase.cpp
- mCurrentBufferSlot = item.mSlot
- mCurrentBuffer = mSlots[mCurrentBufferSlot].mGraphicBuffer
- outDataspace = item.mDataSpace
- mHwc.setClientTarget(mDisplayType, outSlot, outFence, outBuffer, outDataspace)
}@FramebufferSurface.cpp



frameworks/native/services/surfaceflinger/DisplayHardware/DisplaySurface.h
frameworks/native/services/surfaceflinger/DisplayHardware/FramebufferSurface.h
frameworks/native/services/surfaceflinger/DisplayHardware/FramebufferSurface.cpp

