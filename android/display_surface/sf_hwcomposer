/*
 显示屏操作
 
 android6 使用HWComposer_hw1.cpp
 android8.1 TARGET_USES_HWC2 := true@BoardCommon.mk 使用HWComposer.cpp

*/

//加载模块
SurfaceFlinger::init-->HWComposer{
- 初始化mCBContext
- loadFbHalModule{
	- 获取模块，hw_get_module(GRALLOC_HARDWARE_MODULE_ID) //获取gralloc模块
	- 初始化mFbDev,framebuffer_open-->module->methods->open(GRALLOC_HARDWARE_FB0)@fb.h
	}
- loadHwcModule{
	- hw_get_module(HWC_HARDWARE_MODULE_ID) //获取hwcomposer模块
	- 初始化mHwc，hwc_open_1-->module->methods->open(HWC_HARDWARE_COMPOSER)@hwcomposer.h
	}

- mHwc不为空{
	- 注册回调mHwc->registerProcs(&mCBContext->procs)
	- eventControl
	}
- mFbDev不为空{
	- 保存display信息到mDisplayData
	}
- 若没有硬件脉冲则需要模拟，new VSyncThread-->onFirstRef-->run-->threadLoop
}@HWComposer_hw1.cpp

//屏步刷新同步事件，hal回调....mEventHandler为surfaceFlinger
注册回调mHwc->registerProcs-->(读取到同步信息)hook_vsync{
- 将hwc_procs_t强制转换为cb_context //在结构体的第一个成员
- cb_context->hwc->vsync-->HWComposer::vsync-->mEventHandler.onVSyncReceived@HWComposer.cpp
	-->onVSyncReceived@SurfaceFlinger.cpp
}

//创建layer
createWorkList{
- 创建mDisplayData.list中hwc_layer_1_t
- 记录个数disp.list->numHwLayers = numLayers
}

frameworks/native/services/surfaceflinger/DisplayHardware/HWComposer_hw1.cpp



