//service surfaceflinger /system/bin/surfaceflinger@init.rc
inti1@SystemServcer.java-->android_server_SystemServer_init1@com_android_server_SystemServer.cpp-->
system_init-->SurfaceFlinger::instantiate@system_init.c-->instantiate-->publish@BinderServcie.h-->
sm->addService-->addService@BpServiceManager-->BpServiceManager.addService-->remote()->transact
@IServiceManager.cpp

main{
- new SurfaceFlinger-->onFirstRef-->(消息队列初始化)mEventQueue.init
- flinger->init
- sm->addService(String16(SurfaceFlinger::getServiceName()), flinger)
- flinger->run-->waitForEvent@SurfaceFlinger.cpp
}@main_surfaceflinger.cpp


//消息队列
SurfaceFlinger::onFirstRef-->(MessageQueue)mEventQueue.init{
- 保存surfaceFlinger，mFlinger
- new Looper
- new Handler
}

//初始化
SurfaceFlinger::init{
- eglInitialize(mEGLDisplay= eglGetDisplay(EGL_DEFAULT_DISPLAY))
- new EventThread(vsyncSrc= DispSyncSource("app"))//应用程序的刷新事件源
- mSFEventThread = new EventThread(sfVsyncSrc= DispSyncSource("sf"))//surfaceflinger刷新事件源
- mEventQueue.setEventThread(mSFEventThread)
- mHwc = mRealHwc = new HWComposer //设置hwcomposer
- mHwc->setEventHandler(this) //设置hw同步事件的回调
- getDefaultDisplayDeviceLocked()->makeCurrent(mEGLDisplay, mEGLContext)
- 新建一个进程用来控制hal层打开关闭sync，EventControlThread
- initializeDisplays--onInitializeDisplays-->onScreenAcquired-->
	resyncToHardwareVsync-->mEventControlThread->setVsyncEnabled//开始同步信号
- new StartBootAnimThread().start()
}@SurfaceFlinger.cpp


//hw的同步源
HWComposer::vsync-->SurfaceFlinger::onVSyncReceived{
- mPrimaryDispSync.addResyncSample
- enableHardwareVsync
}


===================
//MessageQueue接受display的同步事件信息，分发同步信息

SurfaceFlinger::onFirstRef-->(MessageQueue)mEventQueue.init{
- 保存surfaceFlinger，mFlinger
- new Looper
- new Handler
}

SurfaceFlinger::init{
- setEventThread{
	- 创建事件监听，mEvents = eventThread->createEventConnection-->new connetion//连接到EventThread
	- createEventConnection
	- looper开始监听，mLooper->addFd(cb_eventReceiver)
	}
- 
}

SurfaceFlinger::run-->MessageQueue::waitMessage{
- IPCThreadState::self()->flushCommands //获取client操作？
- 等待同步消息，mLooper->pollOnce-->cb_eventReceiver-->eventReceiver{//读取EventThread事件
	- mHandler->dispatchInvalidate
	}
}

//请求同步事件
MessageQueue::invalidate-->mEvents->requestNextVsync

//收到同步事件
MessageQueue::Handler::handleMessage(INVALIDATE/REFRESH)-->mQueue.mFlinger->onMessageReceived
SurfaceFlinger::onMessageReceived{
- INVALIDATE--signalRefresh
- REFRESH--handleMessageRefresh
}


frameworks/native/services/surfaceflinger/main_surfaceflinger.cpp
frameworks/native/libs/gui/ISurfaceComposer.cpp
frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp
frameworks/native/services/surfaceflinger/MessageQueue.cpp

===================
//producer
createDefaultDisplayDevice-->new DisplayDevice(fbs,producer)-->new Surface(producer)@DisplayDevice.cpp
-->


//consumer显示到fb
createDefaultDisplayDevice-->new FramebufferSurface(consumer)

FramebufferSurface::onFrameAvailable-->HWComposer::fbPost





frameworks/native/services/surfaceflinger/DisplayDevice.cpp
frameworks/native/services/surfaceflinger/MonitoredProducer.cpp
frameworks/native/services/surfaceflinger/DisplayHardware/FramebufferSurface.cpp
============
//(应用提交绘制数据)layer更新
repaintEverything-->signalTransaction/signalLayerUpdate@SurfaceFlinger.cpp-->
invalidate-->mEvents->requestNextVsync-->mHandler->dispatchInvalidate
-->Handler::handleMessage@MessageQueue.cpp-->
onMessageReceived(INVALIDATE){
- handleMessageTransaction
- handleMessageInvalidate-->handlePageFlip
- signalRefresh
}


//创建默认显示器
handleMessageTransaction-->handleTransaction-->
handleTransactionLocked-->onHotplugReceived-->createDefaultDisplayDevice{
- BufferQueue::createBufferQueue(&producer, &consumer)
- fbs = new FramebufferSurface(*mHwc, type, consumer)
- new DisplayDevice(fbs,producer)
- mDisplays.add(token, hw)
}@SurfaceFlinger.cppp

//
signalRefresh-->MessageQueue::refresh-->mHandler->dispatchRefresh-->
sendMessage(REFRESH)@MessageQueue.cpp-->onMessageReceived(REFRESH)-->
handleMessageRefresh{
- preComposition
- rebuildLayerStacks
- setUpHWComposer
- doDebugFlashRegions
- doComposition
- postComposition
}@SurfaceFlinger


setUpHWComposer{
- 若layer变化了(mHwWorkListDirty){
	- 获取layer，mDisplays.getVisibleLayersSortedByZ
	- 创建hwcomposer中的layer,createWorkList //初始化mDisplayData[0].list
	- layer->setGeometry{ //将display中layer信息设置到hwcomposer中layer
		- layer.setFrame
		- layer.setCrop
		}
	}
- 设置hwc中layer的帧数据{
	- layer->setAcquireFence-->setAcquireFenceFd
	- layer->setPerFrameData{
		- setVisibleRegionScreen
		- setBuffer
		- setLayername
		}@Layer.cpp
	}
- hw->prepareFrame@DisplayDevice.cpp
}@SurfaceFlinger

doComposition{
//遍历所有显示器
- 计算新的脏区,dirtyRegion(hw->getDirtyRegion())
- doDisplayComposition(hw,dirtyRegion){	
	- doComposeSurfaces
	- displayDevice->swapBuffers
	}
- postFramebuffer
}

doComposeSurfaces{
- 若有hasGlesComposition{

	}
- 遍历layer,hw->getVisibleLayersSortedByZ{
	- 获取layer需更新的可见区域,clip
	- 根据合成类型执行操作,layer->getCompositionType{
		- hwc处理,HWC_OVERLAY
		- surfaceFlinger绘制HWC_FRAMEBUFFER,layer->draw
		}
	}
}

postComposition{
- 
- mAnimFrameTracker.setActualPresentFence/setActualPresentTime
- mAnimFrameTracker.advanceFrame
}



==================
//surfaceFlinger 提供的接口 ISurfaceComposer.cpp
ISurfaceComposer{//提供的接口
- createConnection
- createDisplayEventConnection
- createDisplay
- destroyDisplay
- setTransactionState
}


SurfaceFlinger::onTransact{
- 创建/销毁surface，BnSurfaceComposer::onTransact
- 1002(SHOW_UPDATES)Surface更新时闪烁界面,mDebugRegion
- 
}


//=======
drawMesh@GLES20RenderEngine.cpp-->
ProgramCache::getInstance().useProgram-->ProgramCache@ProgramCache.cpp


waitForEvent@EventThread.cpp

frameworks/native/services/surfaceflinger/RenderEngine/GLES20RenderEngine.cpp
frameworks/native/services/surfaceflinger/RenderEngine/ProgramCache.cpp
frameworks/native/services/surfaceflinger/EventThread.cpp
