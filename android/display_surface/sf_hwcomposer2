/************************************
 hwcomposer2 hal接口

 device的操作都是composer接口进行。composer为hal接口
*/
SurfaceFlinger.HWComposer-->

//IComposer接口
class Composer {
    Error createLayer(Display display, Layer* outLayer);
    Error destroyLayer(Display display, Layer layer);
    //display信息
    Error getActiveConfig(Display display, Config* outConfig);
    Error getDisplayConfigs(Display display, std::vector<Config>* outConfigs);
    Error getDisplayName(Display display, std::string* outName);
    ......
    //设置display
    Error setOutputBuffer(Display display, const native_handle_t* buffer,int releaseFence);
    Error setPowerMode(Display display, IComposerClient::PowerMode mode);
    Error setVsyncEnabled(Display display, IComposerClient::Vsync enabled);
    //设置layer
    Error setLayerBuffer(Display display, Layer layer, uint32_t slot,const sp<GraphicBuffer>& buffer, int acquireFence);
    Error setLayerSurfaceDamage(Display display, Layer layer,const std::vector<IComposerClient::Rect>& damage);
    ........

    sp<IComposer> mComposer;
    sp<IComposerClient> mClient;
    CommandWriter mWriter;
    CommandReader mReader;
}@ComposerHal.h

//hwc2_device_t
class Device{
    uint32_t getMaxVirtualDisplayCount() const;
    Error createVirtualDisplay(uint32_t width, uint32_t height,android_pixel_format_t* format, Display** outDisplay);
    void destroyDisplay(hwc2_display_t displayId);

    void onHotplug(hwc2_display_t displayId, Connection connection);
    Display* getDisplayById(hwc2_display_t id);
    android::Hwc2::Composer* getComposer() { return mComposer.get(); }
    std::unique_ptr<android::Hwc2::Composer> mComposer;
    std::unordered_set<Capability> mCapabilities;
    std::unordered_map<hwc2_display_t, std::unique_ptr<Display>> mDisplays;
}@HWC2.h

//封装hwc2_device_t中的display
class Display{
    [[clang::warn_unused_result]] Error createLayer(Layer** outLayer);
    [[clang::warn_unused_result]] Error destroyLayer(Layer* layer);
    [[clang::warn_unused_result]] Error getActiveConfig(
            std::shared_ptr<const Config>* outConfig) const;
    // Doesn't call into the HWC2 device, so no errors are possible
    std::vector<std::shared_ptr<const Config>> getConfigs() const;

    [[clang::warn_unused_result]] Error getName(std::string* outName) const;

    android::Hwc2::Composer& mComposer;
    const std::unordered_set<Capability>& mCapabilities;

    DisplayType mType;
    std::unordered_map<hwc2_layer_t, std::unique_ptr<Layer>> mLayers;
    std::map<hwc2_config_t, std::shared_ptr<const Config>> mConfigs;
}@HWC2.h

//封装hwc2_device_t中的layers
class Layer{
    [[clang::warn_unused_result]] Error setCursorPosition(int32_t x, int32_t y);
    [[clang::warn_unused_result]] Error setBuffer(uint32_t slot,
            const android::sp<android::GraphicBuffer>& buffer,
            const android::sp<android::Fence>& acquireFence);
    [[clang::warn_unused_result]] Error setPlaneAlpha(float alpha);
    [[clang::warn_unused_result]] Error setSidebandStream(
            const native_handle_t* stream);
    [[clang::warn_unused_result]] Error setSourceCrop(
            const android::FloatRect& crop);
    [[clang::warn_unused_result]] Error setTransform(Transform transform);
    [[clang::warn_unused_result]] Error setVisibleRegion(
            const android::Region& region);
    [[clang::warn_unused_result]] Error setZOrder(uint32_t z);
}@HWC2.h

frameworks/native/services/surfaceflinger/DisplayHardware/ComposerHal.h
frameworks/native/services/surfaceflinger/DisplayHardware/HWC2.h
hardware/libhardware/include/hardware/hwcomposer2.h
/************************
 显示屏操作。显示屏的信息获取

 事件上报 hal ---> ComposerCallbackBridge ---> surfaceflinger
 显示数据提交 surfaceflinger---> hwcomposer ---> （hwc2:device，layer) ---> composer

*/
android8.1设置 TARGET_USES_HWC2 := true@BoardCommon.mk 使用HWComposer.cpp。老版本使用HWComposer1.cpp
//创建hwcomposer
SurfaceFlinger::init-->new HWComposer(false)-->
HWComposer(bool useVrComposer){
- mLastHwVSync[i] = 0,mVSyncCounts[i] = 0
- std::unique_ptr<HWC2::Device> mHwcDevice = std::make_unique<HWC2::Device>(useVrComposer)-->Device(bool useVrComposer)@HWC2.cpp
- mRemainingHwcVirtualDisplays = mHwcDevice->getMaxVirtualDisplayCount()
}@HWComposer.cpp

//创建mComposer,获取hal服务
Device::Device(bool useVrComposer){
- mComposer(std::make_unique<Hwc2::Composer>(useVrComposer))-->Composer(false /*不是vr*/){
	- mWriter(kWriterInitialSize)
	- mComposer = IComposer::getService()
	- mComposer->createClient-->(const auto& tmpError, const auto& tmpClient){//hal层回调创建mClient
		- mClient = tmpClient
            	}
	}@ComposerHal.cpp
- loadCapabilities{
	- capabilities = mComposer->getCapabilities()
	- mCapabilities.emplace(static_cast<Capability>(capability))
	}
}@HWC2.cpp



frameworks/native/services/surfaceflinger/DisplayHardware/HWComposer.cpp
frameworks/native/services/surfaceflinger/DisplayHardware/HWC2.cpp
frameworks/native/services/surfaceflinger/DisplayHardware/ComposerHal.cpp
/********
 hal层信息通过回调发给上层。surfaceFinger获取事件

*/
//hal层回调接口
ComposerCallbackBridge : public Hwc2::IComposerCallback{
- mCallback(callback)	//callback为surfaceflinger对象
- onHotplug(Hwc2::Display display, IComposerCallback::Connection conn){
	- mCallback->onHotplugReceived(mSequenceId, display,connection, false)
	}
- onRefresh(Hwc2::Display display){
	- mCallback->onRefreshReceived(mSequenceId, display)
	}
- onVsync(Hwc2::Display display, int64_t timestamp){
	- mCallback->onVsyncReceived(mSequenceId, display, timestamp)
	}
}@HWC2.cpp

//注册hal回调
SurfaceFlinger::init()-->registerCallback(this)@SurfaceFlinger.cpp-->
HWComposer::registerCallback(HWC2::ComposerCallback* callback,int32_t sequenceId)-->
mHwcDevice->registerCallback(callback, sequenceId)@HWComposer.cpp
-->Device::registerCallback(ComposerCallback* callback, int32_t sequenceId){
- sp<ComposerCallbackBridge> callbackBridge(new ComposerCallbackBridge(callback, sequenceId))
- mComposer->registerCallback(callbackBridge) //注册到hal
}@HWC2.cpp

//获取vsync事件。调用hal回调
ComposerCallbackBridge::onVsync(Hwc2::Display display, int64_t timestamp)/*hal层回调*/-->
mCallback->onVsyncReceived(mSequenceId, display, timestamp)@HWC2.cpp-->
SurfaceFlinger::onVsyncReceived(int32_t sequenceId,hwc2_display_t displayId, int64_t timestamp){
- mHwc->onVsync(displayId, timestamp, &type)-->HWComposer::onVsync@HWComposer.cpp
- bool needsHwVsync = mPrimaryDispSync.addResyncSample(timestamp)
- if (needsHwVsync) {
	- enableHardwareVsync()
    } else {
        - disableHardwareVsync(false)
    }
}@SurfaceFlinger.cpp

//获取hotpulg事件。调用hal回调
SurfaceFlinger::onHotplugReceived(int32_t sequenceId,hwc2_display_t display,
	 HWC2::Connection connection, bool primaryDisplay) {
- if (primaryDisplay) {
        - mHwc->onHotplug(display, connection)
	- createBuiltinDisplayLocked(DisplayDevice::DISPLAY_PRIMARY)
  }else{
	- mHwc->onHotplug(display, connection)
	- createBuiltinDisplayLocked(type)
	}
}@SurfaceFlinger.cpp

/********
 提交显示数据

*/
//创建layer
createWorkList{
- 创建mDisplayData.list中hwc_layer_1_t
- 记录个数disp.list->numHwLayers = numLayers
}

//设置buffer接收合成数据。有标记HWC2_COMPOSITION_CLIENT的layer将合成到这个buffer
HWComposer::setClientTarget(int32_t displayId, uint32_t slot, const sp<Fence>& acquireFence,
	const sp<GraphicBuffer>& target,android_dataspace_t dataspace)-->
hwcDisplay->setClientTarget(slot, target, acquireFence, dataspace)@HWComposer.cpp-->
Display::setClientTarget(uint32_t slot, const sp<GraphicBuffer>& target,
	const sp<Fence>& acquireFence, android_dataspace_t dataspace)-->
mComposer.setClientTarget(mId, slot, target...)@HWC2.cpp


//
HWComposer::prepare(DisplayDevice& displayDevice) {
- hwcDisplay->acceptChanges()-->mComposer.acceptDisplayChanges(mId)
}


//将数据显示到屏幕
SurfaceFlinger::postFramebuffer@SurfaceFlinger.cpp-->
HWComposer::presentAndGetReleaseFences(int32_t displayId){
- 
- hwcDisplay->present(&displayData.lastPresentFence)
- std::unordered_map<HWC2::Layer*, sp<Fence>> releaseFences
- hwcDisplay->getReleaseFences(&releaseFences)
}@HWComposer.cpp


Display::present(sp<Fence>* outPresentFence){
- mComposer.presentDisplay(mId, &presentFenceFd)
- *outPresentFence = new Fence(presentFenceFd)
}@HWC2.cpp







