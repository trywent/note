/****************************
 displayManager

 display信息
*/
mDisplayManagerService = mSystemServiceManager.startService(DisplayManagerService.class)@SystemServer.java-->s
DisplayManagerService{
- mHandler = new DisplayManagerHandler(DisplayThread.get().getLooper())
- mDisplayAdapterListener = new DisplayAdapterListener()
- mDefaultDisplayDefaultColorMode
- pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE)
}@DisplayManagerService.java

startService@SystemServer.java-->onStart(){
  //注册监听Display
- mHandler.sendEmptyMessage(MSG_REGISTER_DEFAULT_DISPLAY_ADAPTERS)
- publishBinderService(Context.DISPLAY_SERVICE, new BinderService())
- publishLocalService(DisplayManagerInternal.class, new LocalService())
}@DisplayManagerService.java

//displsy设备消息处理
DisplayManagerHandler.handleMessage(Message msg){
  //注册默认display
- MSG_REGISTER_DEFAULT_DISPLAY_ADAPTERS:
	registerDefaultDisplayAdapters{
	- registerDisplayAdapterLocked(new LocalDisplayAdapter(mHandler, mDisplayAdapterListener)){
		- mDisplayAdapters.add(adapter)
		- adapter.registerLocked()
		}
	}
- MSG_REGISTER_ADDITIONAL_DISPLAY_ADAPTERS:
	registerAdditionalDisplayAdapters{
	- registerOverlayDisplayAdapterLocked
	- registerWifiDisplayAdapterLocked
	}
- MSG_DELIVER_DISPLAY_EVENT:
        deliverDisplayEvent(msg.arg1, msg.arg2)
}@DisplayManagerService.java

//创建displayAdatper
LocalDisplayAdapter(DisplayManagerService.SyncRoot syncRoot,Context context, Handler handler, Listener listener)
@LocalDisplayAdapter.java-->DisplayAdapter(Context context, Handler handler, Listener listener, String name){
- mHandler = handler
- mListener = listener
}@DisplayAdapter.java

//从surfaceFlinger获取display信息
registerDisplayAdapterLocked@DisplayManagerService.java-->registerLocked{
- super.registerLocked()
  //监听热拔插
- mHotplugReceiver = new HotplugDisplayEventReceiver(getHandler().getLooper())
  //遍历获取默认屏幕，hdmi屏幕信息BUILT_IN_DISPLAY_IDS_TO_SCAN
- tryConnectDisplayLocked(builtInDisplayId){
	  //surfaceFlinger获取getActiveConfig
	- IBinder displayToken = SurfaceControl.getBuiltInDisplay(builtInDisplayId)
	- SurfaceControl.PhysicalDisplayInfo[] configs = SurfaceControl.getDisplayConfigs(displayToken)
	- int activeConfig = SurfaceControl.getActiveConfig(displayToken)	
	- int activeColorMode = SurfaceControl.getActiveColorMode(displayToken)
	- int[] colorModes = SurfaceControl.getDisplayColorModes(displayToken)
	  //创建display
	- LocalDisplayDevice device = new LocalDisplayDevice(displayToken, builtInDisplayId,configs, activeConfig){
		- 
		- updatePhysicalDisplayInfoLocked(physicalDisplayInfos, activeDisplayInfo,allowedDisplayInfos, colorModes, activeColorMode)
		}
	- mDevices.put(builtInDisplayId, device)
	- sendDisplayDeviceEventLocked(device, DISPLAY_DEVICE_EVENT_ADDED){
		- mHandler.post(new Runnable() {public void run() { mListener.onDisplayDeviceEvent(device, event)}})	
		}
	}@LocalDisplayAdapter.java
}@DisplayAdapter.java

//display添加
sendDisplayDeviceEventLocked@LocalDisplayAdapter.java-->
DisplayAdapterListener.onDisplayDeviceEvent{
- DisplayAdapter.DISPLAY_DEVICE_EVENT_ADDED{
	- handleDisplayDeviceAdded(device)-->handleDisplayDeviceAddedLocked(DisplayDevice device){
		- DisplayDeviceInfo info = device.getDisplayDeviceInfoLocked()
		- mDisplayDevices.add(device)
		- LogicalDisplay display = addLogicalDisplayLocked(device)
		- Runnable work = updateDisplayStateLocked(device)
		}
	}
- DisplayAdapter.DISPLAY_DEVICE_EVENT_CHANGED{
	- handleDisplayDeviceChanged(device)
	}
}@DisplayManagerService.java

//display初始化
addLogicalDisplayLocked(DisplayDevice device){
- DisplayDeviceInfo deviceInfo = device.getDisplayDeviceInfoLocked()
  //创建logic设备
- LogicalDisplay display = new LogicalDisplay(displayId, layerStack, device){
	- mDisplayId = displayId
	- mPrimaryDisplayDevice = primaryDisplayDevice
	}
  //更新display信息。大小
- display.updateLocked(mDisplayDevices)
- configureColorModeLocked(display, device)
 //保存
- mLogicalDisplays.put(displayId, display)
- sendDisplayEventLocked(displayId, DisplayManagerGlobal.EVENT_DISPLAY_ADDED)
}@DisplayManagerService.java

//设置LogicalDisplay的override信息
setDisplayInfoOverrideFromWindowManager-->setDisplayInfoOverrideFromWindowManagerInternal@DisplayManagerService.java
-->setDisplayInfoOverrideFromWindowManagerLocked@LogicalDisplay.java



/****************************
 设置屏幕方位。设置SurfaceFlinger，InputManager
 
*/

//android6 
LocalService.performTraversal-->performTraversalInternal-->
performTraversalLocked{
- clearViewportsLocked //清除viewport
- 遍历mDisplayDevices{
	- device = mDisplayDevices.get(i)
	- configureDisplayLocked(device){
		- findLogicalDisplayForDeviceLocked(device).configureDisplayLocked
		- setViewportLocked-->//设置mDefaultViewport，mExternalTouchViewport，virtualViewport
		}
	- device.performTraversalLocked(t)
	}
  //更显inputManager中viewport
- mHandler.sendEmptyMessage(MSG_UPDATE_VIEWPORT)-->mInputManagerInternal.setDisplayViewports 
}@DisplayManagerService.java


/**********
 android8.0

*/
updateRotationUnchecked(boolean inTransaction)@DisplayContent.java-->
performTraversalInTransactionFromWindowManager-->performTraversalInTransactionFromWindowManagerInternal
-->performTraversalInTransactionLocked{
 //清除viewport
- clearViewportsLocked
 //遍历mDisplayDevices
- DisplayDevice device = mDisplayDevices.get(i)
- configureDisplayInTransactionLocked(device){
	- LogicalDisplay display = findLogicalDisplayForDeviceLocked(device)
	- setViewportLocked(mDefaultViewport, display, device)
	- setViewportLocked(mExternalTouchViewport, display, device)
	- setViewportLocked(viewport, display, device)
	}
- mHandler.sendEmptyMessage(MSG_UPDATE_VIEWPORT)
}@DisplayManagerService.java

//从DisplayDevice获取viewPort大小
setViewportLocked-->device.populateViewportLocked@DisplayManagerService.java-->
populateViewportLocked(viewport){
- viewport.orientation = mCurrentOrientation
- viewport.deviceWidth
- viewport.deviceHeight
}@DisplayDevice.java


//displayDevice
configureDisplayLocked(DisplayDevice){
- displayDeviceInfo = device.getDisplayDeviceInfoLocked()
- setProjectionLocked@DisplayDevice.java
}@LogicalDisplay.java

//获取display信息
getDisplayInfo(int displayId)-->getDisplayInfoInternal(int displayId, int callingUid){
- LogicalDisplay display = mLogicalDisplays.get(displayId)
- DisplayInfo info = display.getDisplayInfoLocked()
}

/*********
 android10

 windowManager设置到surfaceFlinger
*/
applyRotationLocked(final int oldRotation, final int rotation)-->@DisplayContent.java-->
mWmService.mDisplayManagerInternal.performTraversal(getPendingTransaction())-->performTraversal-->
performTraversalInternal(SurfaceControl.Transaction t){
- performTraversalLocked(t){
	- clearViewportsLocked()
	- final int count = mDisplayDevices.size()
	  //更新到surfaceFlinger
	- for (int i = 0; i < count; i++) {
		- DisplayDevice device = mDisplayDevices.get(i)
		- configureDisplayLocked(t, device)
		- device.performTraversalLocked(t)
		}
	  //更新到InputManager
	- mHandler.sendEmptyMessage(MSG_UPDATE_VIEWPORT)
	}
- for (DisplayTransactionListener listener : mDisplayTransactionListeners) {
	- listener.onDisplayTransaction(t)
	}
}@DisplayManagerService.java

configureDisplayLocked(SurfaceControl.Transaction t, DisplayDevice device) {
- LogicalDisplay display = findLogicalDisplayForDeviceLocked(device)
  //设置的到surfaceFlinger
- display.configureDisplayLocked(t, device, info.state == Display.STATE_OFF){
	- device.setLayerStackLocked(t, isBlanked ? BLANK_LAYER_STACK : mLayerStack)
	- orientation = (orientation + displayDeviceInfo.rotation) % 4
	- device.setProjectionLocked(t, orientation, mTempLayerStackRect, mTempDisplayRect)	//设置到surfaceControl
	}@LogicDisplay.java
- populateViewportLocked(viewportType, display.getDisplayIdLocked(), device, info.uniqueId){
	- DisplayViewport viewport = getViewportLocked(viewportType, uniqueId)
	- device.populateViewportLocked(viewport)
	}
}@DisplayManagerService.java

setProjectionLocked(SurfaceControl.Transaction t, int orientation,Rect layerStackRect, Rect displayRect) {
- 
- t.setDisplayProjection(mDisplayToken, orientation, layerStackRect, displayRect);
}@DisplayDevice.java


/****************************
 DisplayManager接口。上层获取屏幕信息

*/
mDisplayManager = (DisplayManager)context.getSystemService(Context.DISPLAY_SERVICE)@ContextImpl.java-->
new DisplayManager(ctx.getOuterContext())@SystemServiceRegistry.java-->
DisplayManager(Context context){
- mContext = context
- mGlobal = DisplayManagerGlobal.getInstance(){
	- IBinder b = ServiceManager.getService(Context.DISPLAY_SERVICE)
	- sInstance = new DisplayManagerGlobal(IDisplayManager.Stub.asInterface(b))
	}@DisplayManagerGlobal.java
}DisplayManager.java


getDisplay(int displayId)-->getOrCreateDisplayLocked(displayId, false /*assumeValid*/){
- Display display = mGlobal.getCompatibleDisplay(displayId, context.getResources()){
	- getDisplayInfo{
		- DisplayInfo info = mDm.getDisplayInfo(displayId)
		- registerCallbackIfNeededLocked
		}
	- new Display(this, displayId, displayInfo, daj)
	}
- mDisplays.put(displayId, display)
}@DisplayManager.java


getDisplayInfo(int displayId)-->getDisplayInfoInternal(displayId, callingUid){
- LogicalDisplay display = mLogicalDisplays.get(displayId)
- DisplayInfo info = display.getDisplayInfoLocked(){
	- mInfo = new DisplayInfo()
	- mInfo.copyFrom(mBaseDisplayInfo)
	- if(mOverrideDisplayInfo!=null)
	- return mInfo
	}
- return inof
}@DisplayManangerService.java


/*********
   app   获取display信息接口
*/
//通过resource获取分辨率
getResources-->mResource@ContextImpl.java-->getDisplayMetrics-->mResourcesImpl.getDisplayMetrics()@Resource.java

//通过display获取分辨率 android8.0
getWindowManager-->mWindowManager@Activity.java-->mWindowManager@Window.java-->WindowManagerImpl@WindowManagerImpl.java

getDefaultDisplay@WindowManagerImpl.java-->mContext.getDisplay()-->getDisplay-->mResourcesManager.getAdjustedDisplay
@ContextImpl.java-->getAdjustedDisplay@ResourceManager.java

//最终调用到getAdjustedDisplay
getAdjustedDisplay{
- DisplayManagerGlobal dm = DisplayManagerGlobal.getInstance(){
	  //只创建一个实例
	- IBinder b = ServiceManager.getService(Context.DISPLAY_SERVICE)
	- sInstance = new DisplayManagerGlobal(IDisplayManager.Stub.asInterface(b))
	}
- dm.getCompatibleDisplay(displayId, resources){
	- DisplayInfo displayInfo = getDisplayInfo(displayId){
		- info = mDm.getDisplayInfo(displayId) //从服务端获取displayInfo
		- registerCallbackIfNeededLocked	
		}
	- return new Display(this, displayId, displayInfo, daj)
	}@DisplayManangerGlobal.java
}@ResourceManager.java

//获取display android6.1
getWindowManager(dm.getDisplay)@ContextImpl.java-->getDisplay-->getOrCreateDisplayLocked
@DisplayManager.java-->getCompatibleDisplay{
- getDisplayInfo-->mDm.getDisplayInfo-->display.getDisplayInfoLocked@DisplayManagerService.java
- new Display(displayInfo)
}@DisplayManagerGlobal.java


frameworks/base/services/core/java/com/android/server/display/DisplayManagerService.java
frameworks/base/services/core/java/com/android/server/display/DisplayDevice.java
frameworks/base/services/core/java/com/android/server/display/LogicalDisplay.java
frameworks/base/core/java/android/hardware/display/DisplayManager.java
frameworks/base/core/java/android/hardware/display/DisplayManagerGlobal.java
frameworks/base/services/core/java/com/android/server/display/LocalDisplayAdapter.java
frameworks/base/services/core/java/com/android/server/display/DisplayAdapter.java
