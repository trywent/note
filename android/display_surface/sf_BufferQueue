/********************************************
  应用surface---Layer{ BufferQueue }@surfaceFlinger

- 分配使用的buffer
- 所有的producer和cosumer的buffer都在这里分配
- 两条线：
	1,应用 surface--BufferQueue--Layer
	2,系统 framebufferSurface--BufferQueue--display

*/
//创建队列，管理producer,consumer
BufferQueue::createBufferQueue(sp<IGraphicBufferProducer>* outProducer, 
	sp<IGraphicBufferConsumer>* outConsumer,bool consumerIsSurfaceFlinger) {
- sp<BufferQueueCore> core(new BufferQueueCore())-->BufferQueueCore{	//consumer和producer的中介。数据分发通过这里的listener
	- mConsumerListener						//一般由consumer设置，用来监听producer数据
	}@BufferQueueCore.cpp
- sp<IGraphicBufferProducer> producer(new BufferQueueProducer(core, consumerIsSurfaceFlinger))
- sp<IGraphicBufferConsumer> consumer(new BufferQueueConsumer(core))
- *outProducer = producer,*outConsumer = consumer
}BufferQueue.cpp


//监听器接口。用于producer通知consumer。ConsumerBase中创建对象并使用
BufferQueue::ProxyConsumerListener::ProxyConsumerListener(const wp<ConsumerListener>& consumerListener)
-->mConsumerListener(consumerListener)@BufferQueue.cpp

//listener监听到数据
BufferQueue::ProxyConsumerListener::onFrameAvailable(const BufferItem& item){
- sp<ConsumerListener> listener(mConsumerListener.promote())
- listener->onFrameAvailable(item)
}@BufferQueue.cpp


frameworks/native/include/gui/IConsumerListener.h
frameworks/native/libs/gui/BufferQueue.cpp
frameworks/native/libs/gui/BufferQueueCore.cpp

/********
  producer

*/
BufferQueueProducer : public BnGraphicBufferProducer : public BnInterface<IGraphicBufferProducer>

//提交数据，通知listener --> consumer
BufferQueueProducer::queueBuffer{
- sp<IConsumerListener> frameAvailableListener
- if (mCore->mQueue.empty()) {
	- frameAvailableListener = mCore->mConsumerListener
  }else{
	- frameAvailableListener = mCore->mConsumerListener
  }
- frameAvailableListener->onFrameAvailable
}@BufferQueueProducer.cpp



BufferQueueProducer::setSidebandStream@BufferQueueProducer.cpp-->
onSidebandStreamChanged@SurfaceFlingerConsumer.cpp-->onSidebandStreamChanged@Layer.cpp


frameworks/native/libs/gui/BufferQueueProducer.cpp
/********
 consumer 设置listener到mCore

*/
BufferQueueConsumer : public BnGraphicBufferConsumer :public SafeBnInterface<IGraphicBufferConsumer>

//设置listener。供producer分发数据使用
consumerConnect(const sp<IConsumerListener>& consumer,bool controlledByApp)@BufferQueueConsumer.h-->
BufferQueueConsumer::connect(const sp<IConsumerListener>& consumerListener, bool controlledByApp) {
- mCore->mConsumerListener = consumerListener
- mCore->mConsumerControlledByApp = controlledByApp
}@BufferQueueConsumer.cpp

//获取数据，处理数据


frameworks/native/include/gui/BufferQueueConsumer.h
frameworks/native/libs/gui/BufferQueueConsumer.cpp
/********
 ConsumerBase 作为监听器，监听producer是否有可用数据。处理数据：
	- onFrameAvailable
	- 若子类没有重写onFrameAvailable，则再转给frameAvailableListener
*/
ConsumerBase : public virtual RefBase, protected ConsumerListener

ConsumerBase::ConsumerBase(const sp<IGraphicBufferConsumer>& bufferQueue, bool controlledByApp){
- mConsumer(bufferQueue)
- wp<ConsumerListener> listener = static_cast<ConsumerListener*>(this)
- sp<IConsumerListener> proxy = new BufferQueue::ProxyConsumerListener(listener)
- mConsumer->consumerConnect(proxy, controlledByApp)	//设置listener
- mConsumer->setConsumerName("unnamed-%d-%d")
}@ConsumerBase.cpp

//设置listener
ConsumerBase::setFrameAvailableListener(const wp<FrameAvailableListener>& listener) {
- mFrameAvailableListener = listener;
}

//有数据可用
ConsumerBase::onFrameAvailable(const BufferItem& item) {
- sp<FrameAvailableListener> listener = mFrameAvailableListener.promote()
- listener->onFrameAvailable(item)
}@ConsumerBase.cpp



frameworks/native/libs/gui/ConsumerBase.cpp
/********
  SurfaceFlingerConsumer Layer处理应用的数据。将所有应用的数据获取到surfaceflinger

  监听MonitoredProducer的数据(应用填入数据)
*/
//GL_TEXTURE_EXTERNAL_OES 从bufferQueue中消耗数据
SurfaceFlingerConsumer : public GLConsumer : public ConsumerBase

//监听器，监听数据是否可用
mSurfaceFlingerConsumer.setContentsChangedListener(this)@Layer.cpp-->
SurfaceFlingerConsumer::setContentsChangedListener(const wp<ContentsChangedListener>& listener){
- setFrameAvailableListener(listener){
	- mFrameAvailableListener = listener
	}@ConsumerBase.cpp
- mContentsChangedListener = listener
}

frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.cpp

/********
  FramebufferSurface 在DisplayDevice中,合成窗口，提交到hw数据
 
  监听
*/
class FramebufferSurface : public ConsumerBase,public DisplaySurface



