/******************************
 SurfaceComposerClient(对应java SurfaceSession)   创建操作surface的接口
 
 将所有设置保存到mComposerStates，mDisplayStates@composer，最后一起提交

*/
SurfaceSession-->nativeCreate@android_view_SurfaceSession.cpp
SurfaceComposerClient(创建Composer)-->onFirstRef{
- sp<ISurfaceComposer> sm(ComposerService::getComposerService())-->
	ComposerService::getComposerService-->ComposerService::connectLocked{
	- getService("SurfaceFlinger")
	}
  //SurfaceFlinger端
- ISurfaceComposerClient mClient = sm->createConnection-->new Client@SurfaceFlinger
}@SurfaceComposerClient.cpp


//创建surfaceControl，提供给上层的操作接口
createSurface(const String8& name,uint32_t w,uint32_t h, PixelFormat format, uint32_t flags,SurfaceControl* parent,int32_t windowType,int32_t ownerUid)
-->createSurfaceChecked(String8(name.c_str()), w, h, format, &surface,){
- sp<IBinder> handle
- sp<IGraphicBufferProducer> gbp
- mClient->createSurface(name, w, h, format, flags, parentHandle,windowType, ownerUid, &handle, &gbp)
- *outSurface = new SurfaceControl(this, handle, gbp, true /* owned */)
}SurfaceComposerClient.cpp

//窗口操作接口
composer{
//保存所有的设置，最后提交
 SortedVector<ComposerState> mComposerStates
 SortedVector<DisplayState > mDisplayStates
//本地端接口，设置layer（surface）的位置大小...
 openGlobalTransaction
 setPosition
 setSize    
 setLayer
 closeGlobalTransaction
}@SurfaceComposerClient.cpp


//创建ComposerState，并加入容器
layer_state_t* getLayerStateLocked(const sp<SurfaceComposerClient>& client, const sp<IBinder>& id){
- ComposerState s
- s.client = client->mClient, s.state.surface = id
- if(mComposerStates.indexOf(s)<0){	//不在容器中，则加入
	- mComposerStates.add(s)
	}
- return &(out[index].state) 		//s.state
}@SurfaceComposerClient.cpp

//创建DisplayState，并加入容器
DisplayState& getDisplayStateLocked(const sp<IBinder>& token){
- DisplayState s
- s.token = token
- if (mDisplayStates.indexOf(s) < 0) {
	- mDisplayStates.add(s);
    }
- return mDisplayStates
}@SurfaceComposerClient.cpp

//开始设置。每次开始设置时增加计数
nativeOpenTransaction-->SurfaceComposerClient::openGlobalTransaction-->
Composer::openGlobalTransaction-->Composer::getInstance().openGlobalTransactionImpl{
- mTransactionNestCount += 1
}@SurfaceComposerClient.cpp

//设置
setSize@SurfaceControl.java-->ctrl->setSize@android_view_SurfaceControl.cpp-->
setSize-->client->setSize@SurfaceControl.cpp-->setSize-->Composer::setSize{
- 将状态加入mComposerStates，
- 将要设置的值保存到，ComposerState
}@SurfaceComposerClient.cpp

//提交设置mComposerStates,mDisplayStates。每次结束设置时减少计数，当减到为0时开始提交
closeGlobalTransactionImpl(bool synchronous){
- sp<ISurfaceComposer> sm(ComposerService::getComposerService())
- if(--mTransactionNestCount) return //设置计数大于1返回
- Vector<ComposerState> transaction = mComposerStates
- Vector<DisplayState> displayTransaction = mDisplayStates
- if (mForceSynchronous) {
	- flags |= ISurfaceComposer::eSynchronous
	}
- sm->setTransactionState((transaction, displayTransaction, flags))-->setTransactionState@SrufaceFlinger.cpp
}SurfaceComposerClient.cpp

//设置到surfaceFlinger
setTransactionState{
- 设置display，setDisplayStateLocked
- 设置layer状态，setClientStateLocked{
	- layer->setPosition
	- layer->setSize{
		- 设置请求高宽，mCurrentState.requested.w = w
		- 设置更新标识，setTransactionFlags
		}
	}
}@Surfaceflinger.cpp

/*
 surfaceControl,提供给上层的操作接口
	SurfaceComposerClient	用于操作surface
	IGraphicBufferProducer  用于填充显示数据的buffer

*/
createSurface-->
SurfaceControl(const sp<SurfaceComposerClient>& client,const sp<IBinder>& handle,const sp<IGraphicBufferProducer>& gbp,bool owned){
- mClient(client)
- mHandle(handle)
- mGraphicBufferProducer(gbp)
- mOwned(owned)
}@SurfaceControl.cpp

//设置
SurfaceControl::setLayer-->mClient->setLayer

SurfaceControl::setPosition-->mClient->setPosition

SurfaceControl::setSize-->mClient->setSize

//创建surface。用于填充显示数据
getSurface-->generateSurfaceLocked{
- sp<Surface> mSurfaceData = new Surface(mGraphicBufferProducer, false)
- return mSurfaceData
}@SurfaceControl.cpp

//销毁,surface,GraphicBufferProducer
~SurfaceControl-->destroy(){
- mClient->destroySurface(mHandle)
- mClient.clear()
- mHandle.clear()
- mGraphicBufferProducer.clear()
- IPCThreadState::self()->flushCommands()
}@SurfaceControl.cpp

frameworks/base/core/java/android/view/SurfaceSession.java
frameworks/base/core/java/android/view/SurfaceControl.java
frameworks/base/core/jni/android_view_SurfaceControl.cpp
frameworks/base/core/jni/android_view_SurfaceSession.cpp
frameworks/native/libs/gui/SurfaceComposerClient.cpp
frameworks/native/libs/gui/SurfaceControl.cpp

/*
 surface (native)
 应用端填充显示数据

*/
Surface(const sp<IGraphicBufferProducer>& bufferProducer, bool controlledByApp){
- mGraphicBufferProducer(bufferProducer)
- mCrop(Rect::EMPTY_RECT)
}@Surface.cpp

//获取ANativeWindow_Buffer
surface->lock(outBuffer,dirtyRectPtr)@android_view_Surface.cpp-->
Surface::lock( ANativeWindow_Buffer* outBuffer, ARect* inOutDirtyBounds){
- Surface::connect(NATIVE_WINDOW_API_CPU){
	- IGraphicBufferProducer::QueueBufferOutput output
	- mGraphicBufferProducer->connect(listener, api, mProducerControlledByApp, &output)
	}
- ANativeWindowBuffer* out
- dequeueBuffer(&out, &fenceFd){ //获取一个buffer
	- int buf = -1
	- sp<Fence> fence
	- mGraphicBufferProducer->dequeueBuffer(&buf, &fence, reqWidth, reqHeight..)//返回一个可用的buffer编号
	  //需要重新分配
	- if ((result & IGraphicBufferProducer::BUFFER_NEEDS_REALLOCATION) || gbuf == nullptr) {
		- mGraphicBufferProducer->requestBuffer(buf, &gbuf)
		}
	- sp<GraphicBuffer>& gbuf(mSlots[buf].buffer)//获取返回的编号buffer
	- *buffer = gbuf.get()
	}
- sp<GraphicBuffer> backBuffer(GraphicBuffer::getSelf(out))
- fence->waitForever("Surface::lock")
- 设置新脏区域为大小newDirtyRegion，设置为指定大小否则设置为buffer大小
  //是否能复用前一个buffer的数据
- mPostedBuffer(绘制部分脏区域时可用){
	- 若可复用，则拷贝数据copyBit
	- 不能复用，设置脏区域为整个buffer，newDirtyRegion.set(bounds)
	}
  //设置outbuffer,宽高地址
- void* vaddr
- backBuffer->lockAsync(newDirtyRegion.bounds(), &vaddr, fenceFd)
- mLockedBuffer = backBuffer
- outBuffer->width  = backBuffer->width
- outBuffer->bits   = vaddr
}@surface.cpp


//提交buffer数据。传送给bufferQueue
surface->unlockAndPost{
- mLockedBuffer->unlockAsync(&fd)
- queueBuffer(mLockedBuffer.get(), fd){
	- int i = getSlotFromBufferLocked(buffer)
	- sp<Fence> fence(fenceFd >= 0 ? new Fence(fenceFd) : Fence::NO_FENCE)
	- IGraphicBufferProducer::QueueBufferOutput output
	- IGraphicBufferProducer::QueueBufferInput input(timestamp, isAutoTimestamp,static_cast<android_dataspace>(mDataSpace)...)
	- input.setSurfaceDamage(Region::INVALID_REGION)
	- mGraphicBufferProducer->queueBuffer(i, input, &output)
	- mQueueBufferCondition.broadcast()
	}
- mPostedBuffer = mLockedBuffer
}@Surface.cpp






=============
//layer
commitTransaction{
- mDrawingState= mCurrentState
}@Layer.cpp

handleMessageInvalidate-->handlePageFlip{
- latchBuffer
- invalidateLayerStack
}@SurfaceFlinger.cpp



frameworks/native/services/surfaceflinger/Layer.cpp
frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp

//consumer
Layer::onFirstRef()-->new SurfaceFlingerConsumer(IGraphicBufferConsumer)

frameworks/native/services/surfaceflinger/Client.cpp
frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp
frameworks/native/services/surfaceflinger/Layer.cpp
frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.cpp


//layer提交数据到flinger
queueBuffer@BufferQueue.cpp-->Layer::onFrameAvailable@Layer.cpp-->
mFlinger->signalLayerUpdate@Layer.cpp-->mEventQueue.invalidate@SurfaceFlinger



handleMessageRefresh-->setUpHWComposer-->setGeometry

================
//提交数据到显示buffer

//初始化
SurfaceFlinger::init-->new DisplayDevice{
- mNativeWindow = new Surface(producer, false) //传入BufferQueue
- window = mNativeWindow.get()
- surface = eglCreateWindowSurface(display, config, window)
	-->createWindowSurface-->new egl_window_surface_v2_t(window)@egl.cpp
- 创建mDisplay，mSurface
}

//准备数据
doComposition-->doDisplayComposition{
- doComposeSurfaces
- SurfaceFlinger::doDisplayComposition-->hw->swapBuffers
}

//提交数据
swapBuffers@DisplayDevice.cpp-->eglSwapBuffers-->(获取nativeWindow，提交数据)
d->swapBuffers-->egl_window_surface_v2_t::swapBuffers-->nativeWindow->
queueBuffer@egl.cpp-->queueBuffer-->mGraphicBufferProducer->queueBuffer@Surface.cpp

frameworks/base/core/java/android/view/Surface.java
frameworks/base/core/jni/android_view_Surface.cpp
frameworks/native/libs/gui/Surface.cpp
frameworks/native/services/surfaceflinger/Layer.cpp
frameworks/native/libs/gui/IGraphicBufferProducer.cpp
frameworks/native/libs/gui/BufferQueue.cpp
frameworks/native/libs/gui/IGraphicBufferConsumer.cpp
frameworks/native/libs/gui/ConsumerBase.cpp
frameworks/native/libs/ui/GraphicBuffer.cpp
frameworks/native/libs/ui/GraphicBufferMapper.cpp
frameworks/native/opengl/libagl/egl.cpp
