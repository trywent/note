/***********************
 inputFlinger服务 （没有使用）
*/
INPUT_HARDWARE_MODULE_ID "input"
INPUT_INSTANCE_EVDEV "evdev"

//服务加入到ServiceManager
main(int, char**)-->BinderService<InputFlinger>::publishAndJoinThreadPool(true)@main.cpp-->
InputFlinger{
- mHost = new InputHost()
- mHost->registerInputDriver(new InputDriver(INPUT_INSTANCE_EVDEV)){ 
	- new InputDriver(INPUT_INSTANCE_EVDEV)){
		- const hw_module_t* module
		- input_open(&module, name)-->hw_get_module_by_class(INPUT_HARDWARE_MODULE_ID, type, module)
		- mHal = reinterpret_cast<const input_module_t*>(module)
		}
	- InputHost::registerInputDriver(InputDriverInterface* driver)-->driver->init()
		-->mHal->init(mHal, static_cast<input_host_t*>(this), kCallbacks)
	}
}@InputFlinger.cpp


frameworks/native/services/inputflinger/host/main.cpp
frameworks/native/services/inputflinger/host/InputFlinger.cpp
frameworks/native/services/inputflinger/host/InputHost.cpp
frameworks/native/services/inputflinger/host/InputDriver.cpp

/***********************
 inputMananger（当前使用）
*/
InputManagerService{
- this.mHandler = new InputManagerHandler
- mPtr = nativeInit-->NativeInputManager{//返回NativeInputManager
	- eventHub = new EventHub()
	- mInputManager = new InputManager(eventHub) //inputManager
	}@com_android_server_input_InputManagerService.cpp
}@InputManagerService.java

new InputManager(eventHub){
- mDispatcher = new InputDispatcher(dispatcherPolicy)
- mReader = new InputReader(eventHub, mDispatcher)
- initialize{
	- mReaderThread = new InputReaderThread(mReader)
	- mDispatcherThread = new InputDispatcherThread(mDispatcher)
	}
}@InputMananger.cpp

new InputManager(eventHub){
- mDispatcher = new InputDispatcher(dispatcherPolicy)
- mReader = new InputReader(eventHub, mDispatcher)
- initialize{
	- mReaderThread = new InputReaderThread(mReader)
	- mDispatcherThread = new InputDispatcherThread(mDispatcher)
	}
}@InputMananger.cpp

//开始读取分发线程
WindowManagerService-->mInputManager.start@WindowManagerService.java-->start@InputManagerService.java
-->nativeStart-->im->getInputManager()->start()@com_android_server_input_InputManagerService.cpp-->
start{
- mDispatcherThread->run("InputDispatcher")
- mReaderThread->run("InputReader")
}@InputManager.cpp


/*
 event:type code

 keyevent:type code(上层键值) scanCode(kernel键值值)
*/

//Event type 事件类型
DEVICE_ADDED = 0x10000000          //设备加入事件类型
DEVICE_REMOVED = 0x20000000
FINISHED_DEVICE_SCAN = 0x30000000
EV_SYN 0x00  //分隔事件
EV_KEY 0x01  //按键类型
EV_ABS 0x03  //绝对坐标，触摸屏

//Event codes 事件编码(事件的精确类型)
EV_SYN{
- SYN_REPORT 0   //一组事件发送完成。鼠标一个坐标REL_X，REL_Y，SYN_REPORT
- SYN_CONFIG
- SYN_MT_REPORT
- SYN_DROPPED		
}

EV_KEY{
- KEY_A xxxx //按键
}

EV_ABS{
- ABS_MT_POSITION_X 0x35
- ABS_MT_POSITION_Y 0x36
}

/***********************
 eventhub
*/
static const char *DEVICE_PATH = "/dev/input"

EventHub(void){
  //监听目录/dev/input
- mEpollFd = epoll_create(EPOLL_SIZE_HINT)  
- mINotifyFd = inotify_init()
- inotify_add_watch(mINotifyFd, DEVICE_PATH, IN_DELETE | IN_CREATE)
- struct epoll_event eventItem
- eventItem.events = EPOLLIN //监听数据可读
- eventItem.data.u32 = EPOLL_ID_INOTIFY  //标记
- epoll_ctl(mEpollFd, EPOLL_CTL_ADD, mINotifyFd, &eventItem)
  //监听管道数据。唤醒
- int wakeFds[2]
- pipe(wakeFds)
- mWakeReadPipeFd = wakeFds[0];mWakeWritePipeFd = wakeFds[1]
- fcntl(mWakeReadPipeFd, F_SETFL, O_NONBLOCK)
- fcntl(mWakeWritePipeFd, F_SETFL, O_NONBLOCK)
- eventItem.data.u32 = EPOLL_ID_WAKE //标记
- epoll_ctl(mEpollFd, EPOLL_CTL_ADD, mWakeReadPipeFd, &eventItem)
}@EventHub.cpp

//读取事件，设备变化事件，输入事件
EventHub::getEvents(int timeoutMillis, RawEvent* buffer, size_t bufferSize) {
- struct input_event readBuffer[bufferSize] //读取缓存
- RawEvent* event = buffer //事件数据保存位置
 //循环处理
 {
- nsecs_t now = systemTime(SYSTEM_TIME_MONOTONIC)
- if (mNeedToReopenDevices) {
	- closeAllDevicesLocked
	}
 //上报移除设备
- while (mClosingDevices) {
	- event->type = DEVICE_REMOVED
	}
 //需要扫描设备
- if (mNeedToScanDevices) {
        - scanDevicesLocked()
	}
 //上报添加设备
- while (mOpeningDevices != NULL) {
	- event->type = DEVICE_ADDED
	}
 //有数据处理
- while (mPendingEventIndex < mPendingEventCount) {
	- const struct epoll_event& eventItem = mPendingEventItems[mPendingEventIndex++]
	  //设备事件，延后处理
	- if (eventItem.data.u32 == EPOLL_ID_INOTIFY) {
		- mPendingINotify = true	
		}
	  //唤醒
	- if (eventItem.data.u32 == EPOLL_ID_WAKE) {
		- awoken = true
		}
	  //其它的就是输入事件
	- ssize_t deviceIndex = mDevices.indexOfKey(eventItem.data.u32)
	- Device* device = mDevices.valueAt(deviceIndex)
	- int32_t readSize = read(device->fd, readBuffer,sizeof(struct input_event) * capacity
	- struct input_event& iev = readBuffer[i]
	- event->when = nsecs_t(iev.time.tv_sec) * 1000000000LL + nsecs_t(iev.time.tv_usec) * 1000LL //设置event
	- event->deviceId = deviceId
	- event->type = iev.type
	- event->code = iev.code
	- event->value = iev.value
	- event += 1
	}
 //等待事件
- nt pollResult = epoll_wait(mEpollFd, mPendingEventItems, EPOLL_MAX_EVENTS, timeoutMillis)
 }//循环处理
- return event - buffer
}@EventHub.cpp



//扫描"/dev/input"，打开设备,初始化设备
scanDevicesLocked-->scanDirLocked(DEVICE_PATH)-->
openDeviceLocked(devname){
  //获取输入设备信息
- int fd = open(devicePath, O_RDWR | O_CLOEXEC | O_NONBLOCK)
- ioctl(fd, EVIOCGNAME(sizeof(buffer) - 1), &buffer) //设备名
- ioctl(fd, EVIOCGVERSION, &driverVersion) //驱动版本
- ioctl(fd, EVIOCGID, &inputId)  //identifer标识
- ioctl(fd, EVIOCGUNIQ(sizeof(buffer) - 1), &buffer) //唯一id
  //创建设备
- assignDescriptorLocked(identifier)
- Device* device = new Device(fd, deviceId, String8(devicePath), identifier)
- loadConfigurationLocked(device){
	  //获取设备配置文件 .idc
	- device->configurationFile = getInputDeviceConfigurationFilePathByDeviceIdentifier
	- PropertyMap::load(device->configurationFile,&device->configuration)
	}
  //获取输入设备支持的事件。判断是否支持按键
- ioctl(fd, EVIOCGBIT(EV_KEY, sizeof(device->keyBitmask)), device->keyBitmask)
- ioctl(fd, EVIOCGBIT(EV_ABS, sizeof(device->absBitmask)), device->absBitmask)
- haveKeyboardKeys，haveGamepadButtons
  //设置输入设备类型
- if (haveKeyboardKeys || haveGamepadButtons) device->classes |= INPUT_DEVICE_CLASS_KEYBOARD //键盘类型
- device->classes |= INPUT_DEVICE_CLASS_TOUCH | INPUT_DEVICE_CLASS_TOUCH_MT //触摸，多点触摸
 //加载设备键值表，KeyMap
- loadKeyMapLocked(device){
	- 
	}
 //监听设备，用于读取输入事件
- registerDeviceForEpollLocked(Device* device){
	- eventItem.events = EPOLLIN
	- if (mUsingEpollWakeup) {
       		eventItem.events |= EPOLLWAKEUP
    		}
	- eventItem.data.u32 = device->id
	- epoll_ctl(mEpollFd, EPOLL_CTL_ADD, device->fd, &eventItem)
	}
- configureFd(device)
- addDeviceLocked(device)-->mDevices.add(device->id, device) //保存到mDevice
}@EventHub.cpp


frameworks/native/services/inputflinger/EventHub.cpp
frameworks/base/libs/androidfw/Keyboard.cpp
frameworks/base/libs/androidfw/KeyLayoutMap.cpp
frameworks/native/libs/utils/Tokenizer.cpp
frameworks/base/include/androidfw/KeycodeLabels.h


/***********************
 InputReader
 
 InputReader Pointer

 读取触摸事件，时间打印为100ms一个坐标
*/
InputReader(eventHub, mDispatcher){
- mContext(this), mEventHub(eventHub), mPolicy(policy)
  //mDispatcher为listener
- mQueuedListener = new QueuedInputListener(listener){
	
	}
- refreshConfigurationLocked(0){
	- mPolicy->getReaderConfiguration(&mConfig)
	- mEventHub->setExcludedDevices(mConfig.excludedDeviceNames)
	- for (size_t i = 0; i < mDevices.size(); i++) {
		- InputDevice* device = mDevices.valueAt(i)
		- device->configure(now, &mConfig, changes)
		}
	}
- updateGlobalMetaStateLocked{
	- 
	}
}@InputReader.cpp

InputReaderThread(mReader):Thread(/*canCallJava*/ true), mReader(reader)@InputReader.cpp

//开始读取数据
mReaderThread->run("InputReader")-->InputReaderThread::threadLoop()-->mReader->loopOnce()
InputReader::loopOnce() {
- size_t count = mEventHub->getEvents(timeoutMillis, mEventBuffer, EVENT_BUFFER_SIZE)
- processEventsLocked(mEventBuffer, count){
	 //遍历mEventBuffer,处理event
	- for (const RawEvent* rawEvent = rawEvents; count;) {
		- int32_t type = rawEvent->type
		- if (type < EventHubInterface::FIRST_SYNTHETIC_EVENT) {//输入事件
			- 查找同一类型的事件，batchSize 
			- processEventsForDeviceLocked(deviceId, rawEvent, batchSize){
				- ssize_t deviceIndex = mDevices.indexOfKey(deviceId)
				- InputDevice* device = mDevices.valueAt(deviceIndex)
				- device->process(rawEvents, count)	
				}
		  }else{//设备事件
			- EventHubInterface::DEVICE_ADDED:addDeviceLocked(rawEvent->when, rawEvent->deviceId)
			- EventHubInterface::DEVICE_REMOVED:removeDeviceLocked(rawEvent->when, rawEvent->deviceId)
			- EventHubInterface::FINISHED_DEVICE_SCAN:handleConfigurationChangedLocked
			}
		}
	}
}@InputReader.cpp


//加入输入设备
InputReader::addDeviceLocked(nsecs_t when, int32_t deviceId) {
- InputDeviceIdentifier identifier = mEventHub->getDeviceIdentifier(deviceId)
- uint32_t classes = mEventHub->getDeviceClasses(deviceId)
  //创建设备
- InputDevice* device = createDeviceLocked(deviceId, controllerNumber, identifier, classes){
	- InputDevice* device = new InputDevice(&mContext, deviceId, bumpGenerationLocked(),controllerNumber, identifier, classes)
	- device->addMapper(new KeyboardInputMapper(device, keyboardSource, keyboardType))
	- device->addMapper(new MultiTouchInputMapper(device))
	}
- device->configure(when, &mConfig, 0)
- mDevices.add(deviceId, device)
}@InputReader.cpp

//移除输入设备
InputReader::removeDeviceLocked(nsecs_t when, int32_t deviceId) {
- 
}@InputReader.cpp

//事件处理
InputReader::processEventsForDeviceLocked(int32_t deviceId,const RawEvent* rawEvents, size_t count)-->
device->process(rawEvents, count)-->InputDevice::process(const RawEvent* rawEvents, size_t count){
- size_t numMappers = mMappers.size()
- for (const RawEvent* rawEvent = rawEvents; count--; rawEvent++) {
	- if (mDropUntilNextSync) {

	  }else if(){

	  }else{
	   //遍历mapper
	  - mapper->process(rawEvent)
	  }
	}

}@InputReader.cpp

//键盘mapper
void KeyboardInputMapper::process(const RawEvent* rawEvent) {

}@InputReader.cpp

/* 触摸事件 TouchInputMapper 
  事件保存到 mRawStatesPending
*/
void TouchInputMapper::process(const RawEvent* rawEvent) {
- mCursorButtonAccumulator.process(rawEvent)
- mCursorScrollAccumulator.process(rawEvent)
- mTouchButtonAccumulator.process(rawEvent)
  //一个完整事件周期
- if (rawEvent->type == EV_SYN && rawEvent->code == SYN_REPORT) {
	- sync(rawEvent->when)
	}
}@InputReader.cpp

//一个事件完成，提交事件。正常一个坐标跟随一个sync
TouchInputMapper::sync(nsecs_t when) {
  // Push a new state.
- mRawStatesPending.push()
- RawState* next = &mRawStatesPending.editTop()
- next->buttonState = mTouchButtonAccumulator.getButtonState()| mCursorButtonAccumulator.getButtonState()
- next->rawVScroll = mCursorScrollAccumulator.getRelativeVWheel()
- next->rawHScroll = mCursorScrollAccumulator.getRelativeHWheel()
  //获取触摸状态
- syncTouch(when, next)
  //提交事件到dispatcher
- processRawTouches(false)-->TouchInputMapper::processRawTouches(bool timeout)
}@InputReader.cpp

//上报事件
TouchInputMapper::processRawTouches(bool timeout){
- const size_t N = mRawStatesPending.size()
- for(count = 0; count < N; count++) {
	- const RawState& next = mRawStatesPending[count]
	- mCurrentRawState.copyFrom(next)
	- cookAndDispatch(mCurrentRawState.when)
	}
}@InputReader.cpp

cookAndDispatch(mCurrentRawState.when){
- consumeRawTouches(when, policyFlags)
}
/* 单点触摸 SingleTouchInputMapper 

*/
class SingleTouchInputMapper : public TouchInputMapper

/* 多点触摸 MultiTouchInputMapper */
class MultiTouchInputMapper : public TouchInputMapper

void MultiTouchInputMapper::process(const RawEvent* rawEvent) {
- TouchInputMapper::process(rawEvent)
- mMultiTouchMotionAccumulator.process(rawEvent){
	- 
	}
}@InputReader.cpp

MultiTouchInputMapper::syncTouch(nsecs_t when, RawState* outState) {
- size_t inCount = mMultiTouchMotionAccumulator.getSlotCount()
  //遍历solts
- for (size_t inIndex = 0; inIndex < inCount; inIndex++) {
	- const MultiTouchMotionAccumulator::Slot* inSlot = mMultiTouchMotionAccumulator.getSlot(inIndex)
	- RawPointerData::Pointer& outPointer = outState->rawPointerData.pointers[outCount]
	- outPointer.x = inSlot->getX()
	- outPointer.y = inSlot->getY()
	}
}@InputReader.cpp

/* Keeps track of the state of mouse or touch pad buttons. 
   鼠标左右键？
*/
class CursorButtonAccumulator

//保存键值
CursorButtonAccumulator::process(const RawEvent* rawEvent) {
- BTN_LEFT:mBtnLeft = rawEvent->value
- BTN_RIGHT:mBtnRight = rawEvent->value
}

/* Keeps track of cursor movements. 
  鼠标坐标
*/
class CursorMotionAccumulator

CursorScrollAccumulator::process(const RawEvent* rawEvent) {

/* Keeps track of cursor scrolling motions. 
  鼠标滚轮
*/
class CursorScrollAccumulator

CursorScrollAccumulator::process(const RawEvent* rawEvent) {
- REL_WHEEL:mRelWheel = rawEvent->value
- REL_HWHEEL:mRelHWheel = rawEvent->value
}

/* Keeps track of the state of touch, stylus and tool buttons. 
  触摸按键
*/
class TouchButtonAccumulator

TouchButtonAccumulator::process(const RawEvent* rawEvent) {
- BTN_TOUCH:mBtnTouch = rawEvent->value
- BTN_STYLUS:mBtnStylus = rawEvent->value
- BTN_TOOL_FINGER:mBtnToolFinger = rawEvent->value
- BTN_TOOL_PEN:mBtnToolPen = rawEvent->value
}
/***********************
 InputDispatcher
 
*/
InputDispatcher(dispatcherPolicy){
- mPolicy(policy)
- mLooper = new Looper(false)
}@InputDispatcher.cpp

InputDispatcherThread(mDispatcher):Thread(/*canCallJava*/ true), mDispatcher(dispatcher)@InputDispatcher.cpp

//加入事件
InputDispatcher::notifyKey(const NotifyKeyArgs* args) {
-
- mPolicy->interceptKeyBeforeQueueing(&event, /*byref*/ policyFlags)
  //是否不分发
- if (shouldSendKeyToInputFilterLocked(args)) {
	- (!mPolicy->filterInputEvent(&event, policyFlags)) return;
	}
  //将事件加入队列末尾
- enqueueInboundEventLocked(newEntry){
	- mInboundQueue.enqueueAtTail(entry)
	- EventEntry::TYPE_KEY{
	
		}
	- EventEntry::TYPE_MOTION{
		- 
		}
	}
}@InputDispatcher.cpp


//开始处理数据
mDispatcherThread->run("InputDispatcher")-->InputDispatcherThread::threadLoop()-->mDispatcher->dispatchOnce()
InputDispatcher::dispatchOnce(){
- nsecs_t nextWakeupTime = LONG_LONG_MAX
  //分发事件
- dispatchOnceInnerLocked(&nextWakeupTime)
  //执行命令
- runCommandsLockedInterruptible
}@InputDispatcher.cpp

//分发事件
dispatchOnceInnerLocked(&nextWakeupTime){
 //mInboundQueue 获取队列头事件
- if (! mPendingEvent) {
	- if (mInboundQueue.isEmpty()) {
	
	  }else{
		- mPendingEvent = mInboundQueue.dequeueAtHead()	
		}
	}
- EventEntry::TYPE_CONFIGURATION_CHANGED{

	}
- EventEntry::TYPE_DEVICE_RESET{

	}
- EventEntry::TYPE_KEY{

	}
- EventEntry::TYPE_MOTION
 //事件是否丢弃
- if (dropReason != DROP_REASON_NOT_DROPPED) {
	- dropInboundEventLocked(mPendingEvent, dropReason)
	}
}

synthesizeCancelationEventsForConnectionLocked


//分发完成
finishDispatchCycleLocked(nsecs_t currentTime,const sp<Connection>& connection, uint32_t seq, bool handled)-->
onDispatchCycleFinishedLocked(currentTime, connection, seq, handled)-->
postCommandLocked(& InputDispatcher::doDispatchCycleFinishedLockedInterruptible)-->
doDispatchCycleFinishedLockedInterruptible{
- 
}@InputDispatcher.cpp

//将事件加入到目标窗口(connection)的队列
enqueueDispatchEntryLocked(const sp<Connection>& connection, EventEntry* eventEntry, const InputTarget* inputTarget,int32_t dispatchMode){
- DispatchEntry* dispatchEntry = new DispatchEntry(eventEntry,inputTargetFlags, inputTarget->xOffset, inputTarget->yOffset...)
- switch (eventEntry->type) {
	- EventEntry::TYPE_KEY{
		- KeyEntry* keyEntry = static_cast<KeyEntry*>(eventEntry)
		  //若不是跟踪的key则丢弃(现在是没有丢弃。都上报了)
		- connection->inputState.trackKey(keyEntry,dispatchEntry->resolvedAction...)-->
		}
	- EventEntry::TYPE_MOTION{

		}
	}
- connection->outboundQueue.enqueueAtTail(dispatchEntry)
}@InputDispatcher.cpp

//跟踪每次Down状态按键
InputDispatcher::InputState::trackKey(const KeyEntry* entry, int32_t action, int32_t flags){
- AKEY_EVENT_ACTION_UP{
	  //查找相同键值的按键，并移除
	- ssize_t index = findKeyMemento(entry){
		- 遍历mKeyMementos
		}
	- mKeyMementos.removeAt(index)
	}
- AKEY_EVENT_ACTION_DOWN{
	  //查找是否已经存在按键。存在则移除，加入新按键
	- ssize_t index = findKeyMemento(entry)
	- mKeyMementos.removeAt(index)
	- addKeyMemento(entry, flags){
		- mKeyMementos.push()
		- KeyMemento& memento = mKeyMementos.editTop()
		- memento.keyCode = entry->keyCode			
		}
	}
}@

/*
 窗口注册获取事件
*/
registerInputChannel(const sp<InputChannel>& inputChannel,const sp<InputWindowHandle>& inputWindowHandle, bool monitor) {
- sp<Connection> connection = new Connection(inputChannel, inputWindowHandle, monitor)
- int fd = inputChannel->getFd()
- mConnectionsByFd.add(fd, connection)
- mMonitoringChannels.push(inputChannel)
  //监听client
- mLooper->addFd(fd, 0, ALOOPER_EVENT_INPUT, handleReceiveCallback, this)
}@InputDispatcher.cpp

//收到处理结果
handleReceiveCallback(int fd, int events, void* data){
  //获取收到回复的connection
- ssize_t connectionIndex = d->mConnectionsByFd.indexOfKey(fd)
- sp<Connection> connection = d->mConnectionsByFd.valueAt(connectionIndex)
}


frameworks/native/services/inputflinger/InputDispatcher.cpp


/*
 触摸坐标根据屏幕比例进行缩放，使触摸坐标(x,y)与屏幕坐标(x1,y1)能够对应。
*/
设置输入配置信息：
NativeInputManager::setDisplayOrientation-->(更新读取器信息)mInputManager->getReader()->
requestRefreshConfiguration

获取输入配置信息：
InputReader::refreshConfigurationLocked-->mPolicy->getReaderConfiguration@InputReader.cpp
-->NativeInputManager::getReaderConfiguration@com_android_server_input_InputManagerService.cpp

InputReader::addDeviceLocked-->InputDevice::configure-->mapper->configure
TouchInputMapper::configure(设置mConfig)@InputReader.cpp

获取触摸设备的信息：
InputMapper::getAbsoluteAxisInfo-->getEventHub->getAbsoluteAxisInfo@InputReader.cpp-->
EventHub::getAbsoluteAxisInfo(deviceID){
- 获取对应设备，getDeviceLocked(deviceID)
- 获取信息，ioctl(EVIOCGABS(axis))
- 填充信息
}@EventHub.cpp

TouchInputMapper::configure-->configureParameters(获取参数信息)-->configureSurface-->
TouchInputMapper::configureSurface(若屏幕比例与触摸比例不同，则计算触摸坐标转换比例)-->
mConfig.getDisplayInfo(获取屏幕信息)

TouchInputMapper::configureSurface{
- 判断输入设备类型，是鼠标，触摸屏，触摸板？
- 获取屏幕方位，尺寸
- 保存屏幕属性值
	- 根据触摸属性值，计算x，y坐标的转换比例
	- 配置虚拟按键，设置虚拟按键的位置坐标。configureVirtualKeys

- 设置转换方位后，x，y轴的范围值，与转换比例
}@InputReader.cpp

//input事件
nativeInit-->new NativeInputManager-->new InputManager(EventHub(),this,this)-->
InputManager{
- mDispatcher = new InputDispatcher(dispatcherPolicy)
- mReader = new InputReader(eventHub, readerPolicy, mDispatcher)
}

NativeInputManager::notifySwitch@
notifySwitch{
- mWindowManagerCallbacks.notifyLidSwitchChanged
- mWindowManagerCallbacks.notifyCameraLensCoverSwitchChanged
- mWiredAccessoryCallbacks.notifyWiredAccessoryChanged
}


frameworks/native/services/inputflinger/InputReader.cpp
