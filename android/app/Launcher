/*****************************************
 launcher

 logcat -s Launcher  Launcher.Model
*/
onCreate(Bundle savedInstanceState) {

- LauncherAppState app = LauncherAppState.getInstance(){
	- mIconCache = new IconCache(sContext, mInvariantDeviceProfile)
	- WidgetCache = new WidgetPreviewLoader(sContext, mIconCache)
	- mModel = new LauncherModel(this, mIconCache, mAppFilter)
	- IntentFilter filter = new IntentFilter()
	- filter.addAction(Intent.ACTION_LOCALE_CHANGED)	//INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED,INTENT_ACTION_SEARCHABLES_CHANGED...
	- sContext.registerReceiver(mModel, filter)
	}@LauncherAppState.java
- LauncherModel mModel = app.setLauncher(launcher){
	- getLauncherProvider().setLauncherProviderChangeListener(launcher)
	- mModel.initialize(launcher)
	- mAccessibilityDelegate =  new LauncherAccessibilityDelegate(launcher)
	- return mModel
	}@LauncherAppState.java
- mIconCache = app.getIconCache()
- mStats = new Stats(this)
  //widget
- mAppWidgetManager = AppWidgetManagerCompat.getInstance(this)
- mAppWidgetHost = new LauncherAppWidgetHost(this, APPWIDGET_HOST_ID)
- mAppWidgetHost.startListening()
  //设置view
- setContentView(R.layout.launcher)
- setupViews()
  //加载icon
- if (!mRestoring) {
	- mModel.startLoader(mWorkspace.getRestorePage())
	}
  //显示介绍画面
- if (shouldShowIntroScreen()) {
	- showIntroScreen()
  }else{
	- showFirstRunActivity()	//是否启动其它第一个启动activity
	- showFirstRunClings()
	}
}Launcher.java


/***********
 launcherModel

*/
{//static语句
- HandlerThread sWorkerThread = new HandlerThread("launcher-loader")
- sWorkerThread.start()
- Handler sWorker = new Handler(sWorkerThread.getLooper())
}@LauncherModel.java

new LauncherModel(this, mIconCache, mAppFilter)@LauncherAppState.java-->
LauncherModel(LauncherAppState app, IconCache iconCache, AppFilter appFilter){
- mApp = app
- mIconCache = iconCache
- mUserManager = UserManagerCompat.getInstance(context)
}@LauncherModel.java

//初始化。设置launcher的引用(callback是一个Launcher)
setLauncher@LauncherAppState.java-->initialize(Callbacks callbacks) {
- mCallbacks = new WeakReference<Callbacks>(callbacks)
}@LauncherModel.java

//开始加载
startLoader(int synchronousBindPage, int loadFlags) {
- mLoaderTask = new LoaderTask(mApp.getContext(), loadFlags)
- if (synchronousBindPage != PagedView.INVALID_RESTORE_PAGE){
 	- mLoaderTask.runBindSynchronousPage(synchronousBindPage)
  }else{
	- sWorker.post(mLoaderTask)
	}
}@LauncherModel.java

LoaderTask.run(){
- loadAndBindWorkspace{
	- loadWorkspace
	- bindWorkspace(-1)
	}
  //等待主线程空闲
- waitForIdle{
	- mHandler.postIdle(new Runnable() {public void run() {
                            synchronized (LoaderTask.this) {
                                mLoadAndBindStepFinished = true;
                                LoaderTask.this.notify();
                            }
                        }
                    })
	- while (!mStopped && !mLoadAndBindStepFinished) {
		- this.wait(1000)
		}
	}
- loadAndBindAllApps
}

packages/apps/Launcher3/src/com/android/launcher3/LauncherAppState.java
packages/apps/Launcher3/src/com/android/launcher3/Launcher.java
packages/apps/Launcher3/src/com/android/launcher3/LauncherModel.java

//获取启动图标
processShortcut-->(选择能够接收CATEGORY_LAUNCHER的activity)startActivityForResult-->


//接收app变化信息
onReceive()-->enqueuePackageUpdated--sWorker.post(runable)-->
PackageUpdatedTask.run(加入新app)@LauncherModel.java-->addPackage-->findActivitiesForPackage
(查找能够Launcer的activity)--add
_____________________________________________
应用图片初始化(与ApplicationInfo一起初始化)：

总流程：通过queryIntentActivities@PackageManager.java查询应用信息,再通过应用信息获取图片资源。

onCreate-->mModel.startLoader@Launcher.java-->
startLoader-->sWorker.post(mLoaderTask)@LauncherModel.java(handler运行runnable)-->
run-->loadAndBindAllApps-->loadAllAppsByBatch(查询所有的LAUNCHER的app)@LoaderTask@LauncherModel.java
-->mAllAppsList.add(new ApplicationInfo(packageManager, apps.get(i), mIconCache, mLabelCache))
-->ApplicationInfo@ApplicationInfo.java(构造函数中获取app信息包括Icon，tittle)--getTitleAndIcon
@IconCache.java-->cacheLocked(获取缓存的icon。如果没有则根据传入的info生成icon放入缓存中(HashMap))
-->Utilities.createIconBitmap@@IconCahe.java-->getFullResIcon-->getFullResIcon(resources, iconId) [getFullResDefaultActivityIcon(获取默认图片，机器人)]@IconCache.java--> getDrawableForDensity-->
loadDrawable@Resource.java

获取图标：
getDrawableForDensity@Resource.java-->getValueForDensity-->getResourceValue@AssetManager.java-->
loadResourceValue@android_uitl_AssetManager.cpp-->android_content_AssetManager_loadResourceValue-->

createIconBitmap@Utilities.java会将图片设置合适大小

—————————————————————————————————————————————
使用获取的图标：
createShortcut@Launcher.java-->applyFromShortcutInfo@BubbleTextView.java-->getIcon
-->updateIcon@ShortcutInfo.java

获取想要的大图片：
getFullResIcon@IconCache.java
resources.getDrawableForDensity(iconId, 240，360图片);
---修改最小的canvas(画图所用),修改app_icon_size
createIconBitmap@Utilies.java
sIconWidth = sIconHeight = (int) resources.getDimension(R.dimen.app_icon_size)


loadIcon@PackageItemIfo.java-->getDrawable(PackageManger.java在comtextimpl中。
这里获取appinfo，其中有资源路径信息)-->getResourcesForApplication(appinfo)
@contextImpl.java-->getTopLevelResources@ActivityThread.java-->


getApplicationInfo@ContextImpl.ApplicationPackageManager.java-->mPM.getApplicationInfo
@PackageManagerService.java-->

=============================================
/***********
 drag
*/
 



____________________________________________
第一次使用：
first_run_cling_title

src/com/android/launcher3/LauncherClings.java

//设置壁纸：
setup-->setWallpaperDimension-->mWallpaperManager.suggestDesiredDimensions@Workspace.java

/***********
 launcher2
*/


loadAllApps{
  //查询主页app信息
- PackageManager packageManager = mContext.getPackageManager()
- Intent mainIntent = new Intent(Intent.ACTION_MAIN, null)
- mainIntent.addCategory(Intent.CATEGORY_LAUNCHER)
- List<ResolveInfo> apps = packageManager.queryIntentActivities(mainIntent, 0)
  //获取应用名
- Collections.sort(apps, new LauncherModel.ShortcutNameComparator(packageManager, mLabelCache))-->
	compare(Object a, Object b) {
	- ComponentName keyA = LauncherModel.getComponentNameFromResolveInfo(a)
	- ComponentName keyB = LauncherModel.getComponentNameFromResolveInfo(b)
	}@ShortcutNameComparator
  //获取图标
- mBgAllAppsList.add(new AppInfo(packageManager, app, mIconCache,mLabelCache))
- ArrayList<AppInfo> added = mBgAllAppsList.added
- callbacks.bindAllApplications(added)-->bindAllApplications-->mAppsCustomizeContent.setApps(apps)@Launcher.java
}@LauncherModel.java

setApps(ArrayList<AppInfo> list) {
- mApps = list
- Collections.sort(mApps, LauncherModel.getAppNameComparator())
- updatePageCountsAndInvalidateData{
	- updatePageCounts-->mNumAppsPages		//计算页数
	- invalidateOnDataChange{
		- cancelAllTasks
		- invalidatePageData-->invalidatePageData{
			- 
			- loadAssociatedPages(mCurrentPage, immediateAndOnly)	//加载图片
			}@PagedView.java
		}
	}
}@AppsCustomizePagedView.java

//icon
getIcon(ComponentName component, ResolveInfo resolveInfo,HashMap<Object, CharSequence> labelCache){
- CacheEntry entry = cacheLocked(component, resolveInfo, labelCache)-->
	cacheLocked(ComponentName componentName, ResolveInfo info, HashMap<Object, CharSequence> labelCache) {
	- entry = new CacheEntry()
	- mCache.put(componentName, entry)
	- ComponentName key = LauncherModel.getComponentNameFromResolveInfo(info)	//组件名
	- entry.icon = Utilities.createIconBitmap(getFullResIcon(info), mContext)
	}
- return entry.icon
}@IconCache.java

setIcon(String packageName, CacheEntry entry,ResolveInfo info) {
- final int resid = CustomIcons.getIcon(info.activityInfo)
- if (resid != 0) {
	- return Utilities.createIconBitmap_enlarge(res.getDrawable(resid), mContext)
  } else {
	- return Utilities.createIconBitmap_minify(new BitmapDrawable(entry.icon), mContext) //return entry.icon			
  }
}@IconCache.java


src/com/android/launcher3/Launcher.java
src/com/android/launcher3/LauncherModel.java
src/com/android/launcher3/AppsCustomizePagedView.java
src/com/android/launcher3/IconCache.java
