//installd服务：在init.rc中启动
main(接收命令)-->execute-->cmds[i].func(命令有ping，install)-->(若install)do_install@installd.c
-->install(在/data/data/com.xxx.xxx(包名)下创建文件夹，改变用户权限)@commands.c

frameworks/base/cmds/installd/installd.c
frameworks/base/cmds/installd/commands.c
================================
应用安装：
位置在manifest.xml中说明：android:installLocation="preferExternal"或“auto”
如果没有说明，应用被安装在内部存储，并且不能被移到外部存储。如果说明为“auto”，则可被用户移动。
当安装在外部空间时：
-只要外部存储被挂载，程序执行是没有影响。
-apk文件存储在外部空间，其他的用户数据，数据库，.dex文件和扩展的本地代码都存储在内部。
-存储应用的容器被加密，只有安装这个应用的设备能够解密该应用。安装在SD卡上的应用只能在安装时的设备上使用
-用户可以将应用程序移动到内部空间

安装：系统首先启动PackageInstallActivity
onCreate-->initiateInstall-->startInstallConfirm(安装确认对话框)-->onClick-->startActivity@
PackageInstallActivity.java-->onCreate-->initView--> pm.installPackage(传入observer)-->
PackageInstallObserver.packageInstalled-->mHandler.sendMessage-->handleMessage(处理安装结果)
@InstallAppProgress.java

packageManagerService中的安装处理流程：
pm.installPackage@nstallAppProgress.java-->installPackage@ApplicationPackageManager.java-->
installPackage-->installPackage(packageURI, observer, flags, null)-->installPackageWithVerification-->
mHandler.sendMessage(INIT_COPY)-->PackageHandler.handleMessage-->PackageHandler.doHandleMessage-->
connectToService-->mContext.bindService-->DefaultContainerConnection.onServiceConnected-->
(将要安装的信息加入mPendingInstalls，如果0位置则没有开始，发送开始信息)mHandler.sendMessage(MCS_BOUND)
-->(开始执行操作，如果有多个要安装则顺序处理)params.startCopy(拷贝完调用handleReturnCode)-->handleStartCopy
-->InstallParams.handleStartCopy(判断装内部或外部存储)-->(安装在内部)args.copyApk(mContainerService, true)
-->FileInstallArgs.copyApk(安装在/data/app)-->imcs.copyResource@PackageManagerService.java-->
copyResource-->copyFile-->copyToFile@DefaultContainerService.java

拷贝完成安装：
params.startCopy(拷贝完调用handleReturnCode)-->InstallParams.handleReturnCode-->processPendingInstall
-->installPackageLI(调用args.doRename将拷贝的文件，重命名为包名)-->setApplicationInfoPaths(设置路径)
--installNewPackageLI(扫描指定文件)-->scanPackageLI(package)-->


//8.0
installPackage-->installCommon@ApplicationPackageManager.java-->
installPackageAsUser{
- 
}@PackageManagerService.java

frameworks/base/core/java/android/app/ApplicationPackageManager.java
frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java
___________________________________
安装在外部sd卡：创建/mnt/secure/asec/xxx.asec文件,通过/mnt/secure/asec能够访问sd卡中.android_secure文件夹内容。
获取容器id：
getTempContainerId-->(获取)smdl2tmp(编号)@PackageManagerService.java
asec位置：
外部/mnt/secure/asec，内部/data/app-asec

args.copyApk(mContainerService, true)-->AsecInstallArgs.copyApk-->imcs.copyResourceToContainer(smdl2tmp1)
@PackageManagerService.java-->copyResourceToContainer-->copyResourceInner-->PackageHelper.createSdDir
@DefaultContainerService.java-->mountService.createSecureContainer@PackageHelper.java-->
createSecureContainer-->mConnector.execute(asec,create)@MountService.java-->AsecCmd::runCommand
vm->createAsec@CommandListener.cpp-->createAsec(创建/data/secure/asec/smdl2tmp[x],建立挂载点
/mnt/asec/xxx)@VolumeManager.cpp

在/mnt/secure/asec中创建.asec文件后，返回缓存目录/mnt/asec/

重命名文件：
doRename-->PackageHelper.renameSdDir@PackageManagerService.java-->renameSdDir@PackageHelper.java
-->renameSecureContainer-->mConnector.execute@MountService.java-->AsecCmd::runCommand-->
vm->renameAsec@CommandListener.cpp-->renameAsec(将/mnt/secure/asec/xxx.asec重命名)@VolumeManager.cpp

挂载文件到新目录：
AsecInstallArgs.doRename@PackageManagerService.java-->mountSdDir@PackageHelper.java-->mountSecureContainer
-->mConnector.execute@MountService.java-->execute.NativeDaemonConnector.java-->(通过socket)-->
mountAsec(创建/mnt/asec/xxx挂载点)@VolumeManager.cpp

拷贝文件：拷贝到/mnt/asec/
copyResourceToContainer(创建asec文件,返回目录/mnt/asec/xxx)-->FileUtils.copyFile
(拷贝.apk和lib文件到/mnt/asec/xxx)@DefaultContainerService.java
