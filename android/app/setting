/*

 设置应用
*/
//定义各种activtiy extends SettingsActivity
Settings extends SettingsActivity{
public static class NightDisplaySuggestionActivity extends NightDisplaySettingsActivity { /* empty */ }
public static class DeviceInfoSettingsActivity extends SettingsActivity { /* empty */ }
public static class ApplicationSettingsActivity extends SettingsActivity { /* empty */ }
public static class ManageApplicationsActivity extends SettingsActivity { /* empty */ }
}@Settings.java

//启动Activity。。SettingsActivity extends SettingsDrawerActivity
onCreate(Bundle savedState) {
- super.onCreate(savedState)
  //获取对应的fragment.AndroidManifext中定义"com.android.settings.FRAGMENT_CLASS"
- getMetaData{
	- ActivityInfo ai = getPackageManager().getActivityInfo(getComponentName())
	- mFragmentClass = ai.metaData.getString(META_DATA_KEY_FRAGMENT_CLASS)
	}
- getIntent(){//修改intent
	- String startingFragment = getStartingFragmentClass(superIntent)
	- Intent modIntent = new Intent(superIntent)
	- modIntent.putExtra(EXTRA_SHOW_FRAGMENT, startingFragment)
	- return modIntent
	}
- final String initialFragmentName = intent.getStringExtra(EXTRA_SHOW_FRAGMENT) //要启动的界面
  //获取component
- final ComponentName cn = intent.getComponent()
  //是不是主页界面。其它的显示详细信息
- mIsShowingDashboard = className.equals(Settings.class.getName())
- setContentView(mIsShowingDashboard ? R.layout.settings_main_dashboard : R.layout.settings_main_prefs)
- mContent = findViewById(R.id.main_content)
  //子项设置
- isSubSettings = this instanceof SubSettings ||intent.getBooleanExtra(EXTRA_SHOW_FRAGMENT_AS_SUBSETTING, false)
- setTheme(R.style.Theme_SubSettings)
  //启动
- launchSettingFragment(initialFragmentName, isSubSettings, intent){
	- if (!mIsShowingDashboard && initialFragmentName != null){
		- setTitleFromIntent(intent)
		- switchToFragment(initialFragmentName, initialArguments, true, false....)
	   }else{
		- mInitialTitleResId = R.string.dashboard_title
		- switchToFragment(DashboardSummary.class.getName(), ...mInitialTitleResId, mInitialTitle)
		}	
	}
}@SettingsActivity.java
/* 
 主界面
*/
//主界面设置项
{
- <activity android:name=".Settings$NetworkDashboardActivity"
  <meta-data android:name="com.android.settings.category" android:value="com.android.settings.category.ia.homepage"/>
  </activity>
- <activity android:name=".Settings$ConnectedDeviceDashboardActivity"
  <meta-data android:name="com.android.settings.category" android:value="com.android.settings.category.ia.homepage"/>
  </activity>
- <activity android:name="Settings$DisplaySettingsActivity"
  <meta-data android:name="com.android.settings.category" android:value="com.android.settings.category.ia.homepage"/>
  </activity>
}@AndroidManifest.xml

static{
- PARENT_TO_CATEGORY_KEY_MAP = new ArrayMap<>()
- PARENT_TO_CATEGORY_KEY_MAP.put(NetworkDashboardFragment.class.getName(), CategoryKey.CATEGORY_NETWORK)
- PARENT_TO_CATEGORY_KEY_MAP.put(AppAndNotificationDashboardFragment.class.getName(),CategoryKey.CATEGORY_APPS)
  ....
}@DashboardFragmentRegistry.java

//主界面
onCreate(Bundle savedInstanceState) {
- mDashboardFeatureProvider = FeatureFactory.getFactory(activity).getDashboardFeatureProvider(activity){
	- new DashboardFeatureProviderImpl(context)
	}@FeatureFactoryImpl.java
- mSuggestionFeatureProvider = FeatureFactory.getFactory(activity).getSuggestionFeatureProvider(activity){
	- new SuggestionFeatureProviderImpl(context)
	}@FeatureFactoryImpl.java
  //加载设置中CATEGORY_HOMEPAGE类型子条目。。AndroidManifest中定义
- mSummaryLoader = new SummaryLoader(activity, CategoryKey.CATEGORY_HOMEPAGE){
	- mCategoryKey = categoryKey
	- DashboardCategory category = mDashboardFeatureProvider.getTilesForCategory(categoryKey)
	- for (Tile tile : category.tiles) 
	  - mWorker.obtainMessage(Worker.MSG_GET_PROVIDER, tile).sendToTarget()-->
	    makeProviderW{
		- SummaryProvider provider = getSummaryProvider(tile)
		- mSummaryProviderMap.put(provider, tile.intent.getComponent())
		}
	}@SummaryLoader.java
}@DashboardSummary.java

onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState) {
- inflater.inflate(R.layout.dashboard, container, false)
}@DashboardSummary.java

onViewCreated(View view, Bundle bundle) {
- mDashboard = view.findViewById(R.id.dashboard_container)
- mAdapter = new DashboardAdapter(getContext(), bundle, mConditionManager.getConditions(), mSuggestionParser, this){
	- mCallback = callback
	- mDashboardData = new DashboardData.Builder()
                .setConditions(conditions)
                .setSuggestions(suggestions)
                .setCategory(category)
		.build()
	}@DashboardAdapter.java
- mSummaryLoader.setSummaryConsumer(mAdapter)
}@DashboardSummary.java

DashboardData(Builder builder) {//要显示的数据
- mSuggestionConditionMode = builder.mSuggestionConditionMode
- mItems = new ArrayList<>()
- buildItemsData(){
	- addToItemList(R.layout.suggestion_condition_header)
	- for (int j = 0; j < mCategory.tiles.size(); j++) {
		- addToItemList(tile, R.layout.dashboard_tile)
		}
	}
}@DashboardData.java

/*
 子界面
*/



/* 
 搜索资源

*/
addIndex(NetworkDashboardFragment.class, NO_DATA_RES_ID, R.drawable.ic_settings_wireless)@SearchIndexableResources.java


packages/apps/Settings/src/com/android/settings/Settings.java
packages/apps/Settings/src/com/android/settings/SettingsActivity.java
packages/apps/Settings/src/com/android/settings/dashboard/DashboardSummary.java
packages/apps/Settings/src/com/android/settings/dashboard/DashboardAdapter.java
packages/apps/Settings/src/com/android/settings/dashboard/DashboardData.java
packages/apps/Settings/src/com/android/settings/dashboard/DashboardFragmentRegistry.java
packages/apps/Settings/src/com/android/settings/search/SearchIndexableResources.java
packages/apps/Settings/src/com/android/settings/overlay/FeatureFactoryImpl.java
packages/apps/Settings/src/com/android/settings/dashboard/SummaryLoader.java
frameworks/base/packages/SettingsLib/src/com/android/settingslib/drawer/CategoryManager.java
/*
 时间日期

*/


date_time_prefs


packages/apps/Settings/src/com/android/settings/DateTimeSettings.java
/*
 背光

*/

onClick-->getContext().sendBroadcastAsUser(new Intent(ACTION_SHOW_BRIGHTNESS_DIALOG))//启动设置界面
new QSPanel-->new BrightnessController(ToggleSlider)@QSPanel.java-->

OnSeekBarChangeListener-->mListener.onChanged@ToggleSlider.java-->onChange-->setBrightness
@BrightnessController.java-->setTemporaryScreenBrightnessSettingOverride@PowerManagerService.java

mScreenUpdateRunnable-->mPhotonicModulator.setState-->PhotonicModulator.run-->
setBrightness@DisplayPowerState.java-->setBrightness-->setLightLocked@LightsService.java-->
setLight_native-->devices->lights[light]->set_light@com_android_server_lights_LightsService.cpp

frameworks/base/packages/SystemUI/src/com/android/systemui/settings/SettingUI.java
Settings/src/com/android/settings/BrightnessPreference.java
frameworks/base/packages/SystemUI/src/com/android/systemui/settings/BrightnessDialog.java
frameworks/base/packages/SystemUI/src/com/android/systemui/settings/BrightnessController.java
frameworks/base/packages/SystemUI/src/com/android/systemui/settings/ToggleSlider.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/BatteryController.java
frameworks/base/services/core/java/com/android/server/display/DisplayPowerState.java
frameworks/base/services/core/java/com/android/server/lights/LightsService.java
frameworks/base/services/core/jni/com_android_server_lights_LightsService.cpp

/*
 字体：
*/
entries_font_size//字体字符

onCreate{
- 获取资源，addPreferencesFromResource(R.xml.display_settings)
- 字体显示preference，mFontSizePref = (ListPreference) findPreference(KEY_FONT_SIZE);
}

onResume-->updateState{
- 更新字体显示，readFontSizePreference(mFontSizePref)
}

onPreferenceChange-->writeFontSizePreference-->ActivityManagerNative.getDefault().updatePersistentConfiguration@DisplaySettings.java-->updatePersistentConfiguration
-->updateConfigurationLocked(需保存更新值)-->mHandler.sendMessage(UPDATE_CONFIGURATION_MSG)
-->mHandler.handleMessga-->Settings.System.putConfiguration@ActivityManagerService.java
-->putConfiguration-->putConfigurationForUser-->Settings.System.putFloatForUser(FONT_SCALE)
@Settings.java

packages/apps/Settings/src/com/android/settings/DisplaySettings.java
frameworks/base/services/java/com/android/server/am/ActivityManagerService.java
frameworks/base/core/java/android/provider/Settings.java


/*
语言：

*/
getLocales()@AssetManager.java

//6.0
onCreate{
- addPreferencesFromResource(R.xml.language_settings)
- mAutoLanguagePref = (CheckBoxPreference) findPreference(KEY_AUTO_LANGUAGE) //自动设置语言
- mLanguagePref = findPreference(KEY_PHONE_LANGUAGE) //语言
}@InputMethodAndLanguageSettings.java


frameworks/base/core/java/android/content/res/AssetManager.java
packages/apps/Settings/src/com/android/settings/inputmethod/InputMethodAndLanguageSettings.java
packages/apps/Settings/src/com/android/settings/LocalePicker.java


//8.0
mAddLanguage.setOnClickListener(new View.OnClickListener(){
	 public void onClick(View v) {
                final LocalePickerWithRegion selector = LocalePickerWithRegion.createLanguagePicker()
		}
	} )

onCreate{
- mAdapter = new SuggestedLocaleAdapter(mLocaleList)
}@LocalePickerWithRegion.java

packages/apps/Settings/src/com/android/settings/localepicker/LocaleListEditor.java
frameworks/base/core/java/com/android/internal/app/LocalePickerWithRegion.java

/*
恢复出厂设置:reset
 
写命令到misc BCB(bootloader command block)

还可以写命令到/cache/recovery/command
*/

mFinalClickListener{
- 清除sd卡，startService(ExternalStorageFormatter)-->updateProgressState{
	- 格式化卡， mountService.formatVolume(extStoragePath)
	- 清除data，sendBroadcast(new Intent("android.intent.action.MASTER_CLEAR"))
	}
- 清除数据，sendBroadcast(new Intent("android.intent.action.MASTER_CLEAR"))
}

//广播接收端
MasterClearReceiver.onReceive@MasterClearReceiver.java-->RecoverySystem.rebootWipeUserData
-->rebootWipeUserData-->bootCommand(写入命令重启)@RecoverySystem.java


packages/apps/Settings/src/com/android/settings/MasterClearConfirm.java
frameworks/base/core/java/com/android/internal/os/storage/ExternalStorageFormatter.java
frameworks/base/services/java/com/android/server/MasterClearReceiver.java
frameworks/base/core/java/android/os/RecoverySystem.java
frameworks/base/services/core/java/com/android/server/RecoverySystemService.java


/*
wifi:

*/
打开wifi：
onCheckedChanged-->mWifiManager.setWifiEnabled@WifiEnabler.java-->setWifiEnabled-->
mWifiStateMachine.setWifiEnabled@WifiService.java-->setWifiEnabled-->
sendMessage(CMD_LOAD_DRIVER,WIFI_STATE_ENABLING)-->mSmHandler.sendMessage@WifiStateMachine.java-->
SmHandler.handleMessage-->SmHandler.processMsg-->curStateInfo.state.processMessage@StateMachine.java
-->DriverLoadingState.enter-->mWifiNative.loadDriver()@WifiStateMachine.java-->
android_net_wifi_loadDriver@android_net_wifi_Wifi.cpp-->wifi_load_driver@wifi.c

状态变化：
InitialState-->DriverUnloadedState-->DriverLoadingState.enter-->mWifiNative.loadDriver()


设置界面变化：
mReceiver.onReceive-->handleWifiStateChanged--> mSwitch.setEnabled-->switch状态变
化onCheckedChanged@WifiEnabler.java


连接wifi:
onCreateDialog-->new WifiDialog@WifiSetting.java-->onCreate(设置listener为WifiSetting)-->
new WifiConfigController@WifiDialog.java-->WifiConfigController(设置提交密码按钮)@WifiConfigController.java

提交密码：
onClick-->submit-->mWifiManager.connect@WifiSetting.java-->connect@WifiManager.java

/*
 密码保存检查 pin
 SecuritySettingsActivity
*/



//密码设置

//密码检查
launchConfirmationActivity{
- 
- switch (mLockPatternUtils.getKeyguardStoredPasswordQuality(effectiveUserId)) {
	- DevicePolicyManager.PASSWORD_QUALITY_SOMETHING{
		- launchConfirmationActivity(request, title, header, description,
                        returnCredentials || hasChallenge
                                ? ConfirmLockPattern.InternalActivity.class
                                : ConfirmLockPattern.class)
		}
	- DevicePolicyManager.PASSWORD_QUALITY_NUMERIC{
		- launchConfirmationActivity(request, title, header, description,
                        returnCredentials || hasChallenge
                                ? ConfirmLockPassword.InternalActivity.class
                                : ConfirmLockPassword.class)
		}
	}
}

//检查pin码
startCheckPassword-->LockPatternChecker.checkPassword(mLockPatternUtils,pin)@ConfirmLockPassword.java
utils.checkPassword(password)@LockPatternChecker.java-->mLockPatternUtils.checkPassword-->checkPassword
-->checkCredential-->getLockSettings().checkCredential(credential)@LockPatternUtils.java-->
checkCredential@LockSettingsService.java


Settings/src/com/android/settings/password/ChooseLockSettingsHelper.java
Settings/src/com/android/settings/password/ConfirmDeviceCredentialBaseActivity.java
Settings/src/com/android/settings/password/ConfirmDeviceCredentialBaseFragment.java
Settings/src/com/android/settings/password/ConfirmLockPassword.java
frameworks/base/core/java/com/android/internal/widget/LockPatternChecker.java
frameworks/base/core/java/com/android/internal/widget/LockPatternUtils.java

/*
加密sd卡：
*/


//加密
CryptKeeperSettings-->mInitiateListener.onClick-->
runKeyguardConfirmation-->showFinalConfirmation@CryptKeeperSettings.java-->
mFinalClickListener.onClick-->startActivity(Blank.class)-->Blank.onCreate-->
mountService.encryptStorage@CryptKeeperConfirm.java

CryptfsCmd::runCommand@CommandListener.cpp-->cryptfs_enable@cryptfs.c

//检测是否加密
onStart-->setupUi-->ValidationTask.doInBackground@CryptKeeper.java


mount_all@init.rc-->do_mount_all{
- fork子进程进行挂载{
	- fs_mgr_mount_all{
		- 挂载设备，__mount
		- 挂载失败，接测MF_CRYPT(fstab设置了加密，encryptable){
			- encrypted = 1 //设置加密标识
			}		
		}@fs_mgr.c	
	}
- 若返回值为1,则已经加密{
	- property_set("ro.crypto.state", "encrypted")
        - property_set("vold.decrypt", "1")
	}
}@builtins.c


//检测
service defaultcrypto /system/bin/vdc --wait cryptfs mountdefaultencrypted@init.rc
-->main(连接socket Vold)@vdc.c-->cryptfs_mount_default_encrypted@crypts.c-->



//
mke2fs -t ext4 /dev/block/platform/soc0/e0000000.noc/by-name/ImcPartID069 -b 4096 2883584

[vold.decrypt]: [trigger_restart_min_framework]

Settings/src/com/android/settings/CryptKeeperSettings.java
Settings/src/com/android/settings/CryptKeeper.java
Settings/src/com/android/settings/CryptKeeperConfirm.java
system/vold/cryptfs.c
system/vold/vdc.c
system/core/init/builtins.c


/*
 位置location
*/
onRadioButtonClicked@LocationMode.java-->setLocationMode(mode){
- getActivity().sendBroadcast(MODE_CHANGING_ACTION)
- refreshLocationMode
}@LocationSettingsBase.java




packages/apps/Settings/src/com/android/settings/location/LocationMode.java
packages/apps/Settings/src/com/android/settings/location/LocationSettings.java
packages/apps/Settings/src/com/android/settings/location/LocationSettingsBase.java
