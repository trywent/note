/***********************
  系统加载定义的权限
  应用请求权限

*/

//系统加载权限,功能配置/system/etc/permissions
startBootstrapServices@SystemServer.java-->SystemConfig{//加载system,vendor,oem目录下
- readPermissions("ect","sysconfig")
- readPermissions("ect","permissions")
}

readPermissions(遍历目录下的所有xml文件)-->readPermissionsFromXml{//读取xml的配置
- "group"{
	- gid = android.os.Process.getGidForName(gidStr)
	- appendInt(mGlobalGids, gid)
	}
- "permission"{	
	- readPermission-->mPermissions.put(name, perm)//保存权限，GID
	}
- "assign-permission"{
	- perms.add(perm)
	}
- "library"{
	- mSharedLibraries.put(lname, lfile)
	}
- "feature"{
	- addFeature-->mAvailableFeatures.put(name, fi)
	}
- "privapp-permissions"{
	- readPrivAppPermissions-->mPrivAppPermissions.put(packageName, permissions)//保存报名和关联的权限
	}
- addFeature(PackageManager.FEATURE_RAM_LOW/PackageManager.FEATURE_RAM_NORMAL)
- mUnavailableFeatures,removeFeature//移除不可用功能
}@SystemConfig.java

frameworks/base/core/java/com/android/server/SystemConfig.java
===================
//文件用户组设置
static const struct fs_path_config android_files[] = {
    { 00644, AID_SYSTEM,    AID_SYSTEM,    0, "data/app/*" },
    { 00644, AID_SYSTEM,    AID_SYSTEM,    0, "data/app-ephemeral/*" },
	...
}@fs_config.cpp

//服务进程用户组设置
service xxx /system/bin/xxx
    user root
    group root


//应用进程设置UID,GID
根据权限字符串获取GID：
Process.getGidForName@Process.java-->android_os_Process_getGidForName


//shareduid
若AndoridManifest.xml中定义了android:sharedUserId="string"
readSharedUserLPw-->addSharedUserLPw(name.intern(), userId, pkgFlags))@Settings.java

system/core/libcutils/fs_config.cpp
system/core/libcutils/include/private/android_filesystem_config.h
frameworks/base/core/java/android/os/Process.java
frameworks/base/core/jni/android_util_Process.cpp
frameworks/base/services/java/com/android/server/am/ActivityManagerService.java

/*
 权限检查 
*/
checkPermission(String permission, int pid, int uid, IBinder callerToken)@ContextImpl.java-->
ActivityManager.getService().checkPermissionWithToken(permission, pid, uid, callerToken)-->
checkComponentPermission-->ActivityManager.checkComponentPermission@ActivityManagerService.java-->
AppGlobals.getPackageManager().checkUidPermission(permission, uid)@ActivityManager-->
AppGlobals.getPackageManager().checkUidPermission(permission,uid)-->
checkUidPermission(String permName, int uid){
- obj= mSettings.getUserIdLPr(UserHandle.getAppId(uid))
- SettingBase settingBase = (SettingBase) obj
- permissionsState = settingBase.getPermissionsState()
- permissionsState.hasPermission(permName, userId)
}@PackageManagerService.java


//native
checkCallingPermission-->checkCallingPermission-->
checkPermission{
- PermissionCache::getInstance() //创建cache
- pc.check(&granted, permission, uid) //从cache中检查
- cache中不存在{
	- android::checkPermission
	- pc.cache(permission, uid, granted)
	}
}@PermissionCache.cpp



AppOpsService.java

/*
 权限请求
 android.content.pm.PermissionInfo.PROTECTION_NORMAL  在manifest中申请并分配
 android.content.pm.PermissionInfo.PROTECTION_DANGEROUS，在manifest中申请，但是并没有分配

*/
//安装权限(intall)
parsePackage{
- if (tagName.equals("uses-permission"))-->parseUsesPermission
- 
}@PackageParser.java


//运行时权限(runtime)
requestPermissions(String[] permissions, int requestCode){//请求权限
- intent = getPackageManager().buildRequestPermissionsIntent
  //弹框
- startActivityForResult(intent)-->GrantPermissionsActivity
}@Activty.java

onCreate{
 //实际UI。
- mViewHandler = GrantPermissionsViewHandlerImpl(this).setResultListener(this) 
- setContentView(mViewHandler.createView())//设置请求窗口
- showNextPermissionGroupGrantRequest
}@GrantPermissionsActivity.java


//分配权限
onClick-->mResultListener.onPermissionGrantResult@GrantPermissionsViewHandlerImpl.java-->
onPermissionGrantResult-->groupState.mGroup.grantRuntimePermissions@GrantPermissionsActivity.java
grantSignaturePermission@PackageManagerService.java





frameworks/base/core/java/android/widget/AppSecurityPermissions.java
frameworks/base/core/java/android/content/pm/PackageParser.java
frameworks/base/services/java/com/android/server/pm/PackageManagerService.java
frameworks/base/services/core/java/com/android/server/pm/Settings.java
PackageInstaller/src/com/android/packageinstaller/permission/ui/GrantPermissionsActivity.java
PackageInstaller/src/com/android/packageinstaller/permission/ui/handheld/GrantPermissionsViewHandlerImpl.java
frameworks/native/libs/binder/PermissionCache.cpp
frameworks/base/core/java/android/app/AppOpsManager.java
frameworks/base/services/core/java/com/android/server/AppOpsService.java
===============
//应用状态权限
//判断权限
hasPermission@UsageStatsService.java


frameworks/base/services/usage/java/com/android/server/usage/UsageStatsService.java
//有权查看使用情况的应用 (Context.USAGE_STATE_SERVICE).getAllPkgUsageStats
onPreferenceChange-->setHasAccess-->mAppOpsManager.setMode@UsageAccessDetails.java
-->

packages/apps/Settings/src/com/android/settings/applications/UsageAccessDetails.java

/***********************
  ops

*/




frameworks/base/core/java/android/app/AppOpsManager.java
frameworks/base/services/core/java/com/android/server/AppOpsService.java
