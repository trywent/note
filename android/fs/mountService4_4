//
USB mass storage (UMS)

PackageManagerService也使用
====================================
更新挂载状态：
interface INativeDaemonConnectorCallbacks {
    void onDaemonConnected();
    boolean onEvent(int code, String raw, String[] cooked);
}MountService实现该接口
------------------------------------
mVolumeStates	路径和状态hashMap
mVolume     	卷ArrayList
mVolumeMap  	卷和路径hashMap

与Vold建立连接：
MountService-->new Thread(NativeDaemonConnector, VOLD_TAG).start@MonuntService.java-->
run-->listenToSocket-->(收到底层的事件或上层发送命令后的回复)mCallbackHandler.sendMessage-->
handleMessage-->mCallbacks.onEvent@NativeDaemonConnector.java-->onEvent-->(处理不同的事件。状态改变notifyVolumeStateChange，插入doMountVolume，移除updatePublicVolumeState）doMountVolume@MountService.java
--> mConnector.execute-->

连接建立后获取已经存在卷的信息：
listenToSocket(建立连接)@NativeDaemonConnector.java-->onDaemonConnected(执行命令获取卷列表和状态)
-->addNewVolume(加入新获取的卷)--updatePublicVolumeState(更新卷状态)@MountService.java
从vold获取volume,将没有移除的卷更新mVolume数组列表

执行命令：
execute-->executeForList-->execute(int timeout, String cmd, Object... args)-->mOutputStream.write
@NativeDaemonConnector.java--> mResponseQueue.remove-->remove(int cmdNum, int timeoutMs, String origCmd)
@NativeDaemonConnector.ResponseQueue

通知卷状态发生改变：
(onEvent卷状态变化，或在启动后探测已存在的卷状态)notifyVolumeStateChange(加入新卷，路径)-->(是插入，移除等)sendStorageIntent-->mContext.sendBroadcast(Path,mVolumeMap.get(path))

更新卷状态发:
updatePublicVolumeState-->(更新mVolumeStates)mVolumeStates.put--(通知所有的监听器)
bl.mListener.onStorageStateChanged


onEvent{
- 卷状态变化，notifyVolumeStateChange
- 卷插入，移除，错移除，updatePublicVolumeState
}
------------------------------------
启动和监听usb
mBroadcastReceiver.onReceive（启动结束或usb状态改变）-->挂载状态为unmount的设备--notifyVolumeStateChange
-->sendStorageIntent(发送挂载广播)

____________________________________
处理unmount：
handleMessage@Mountservice.java-->
updateExternalMediaStatus-->mHandler.sendMessage(msg)(msg是H_UNMOUNT_PM_UPDATE)-->doHandleMessage
-->(通知packageManager工作)updateExternalMediaStatus(发送消息UPDATED_MEDIA_STATUS)-->
handleMessage-->doHandleMessage@PackageManagerService.java-->(PackageManagerService完成工作)
finishMediaUpdate-->sendEmptyMessage(发送H_UNMOUNT_PM_DONE)-->mHandler.sendEmptyMessage-->
handleMessage(取出数组容器中UnmountCallBack，若强制卸载则杀死正使用卷的进程)-->sendMessage
(处理完卸载前工作发送H_UNMOUNT_MS)-->handleMessage-->ucb.handleFinished@Mountservice.java-->
doUnmountVolume-->mConnector.execute(cmd)@MountService.java

finishMediaUpdate【这里会执行传入的IMountShutdownObserver】
————————————————————————————————————
更新状态：
readStorageList读取storage_list.xml中的配置，建立StorageVolume和路径的(键值对)mVolumeMap，建立Volume的ArrayList

notifyVolumeStateChange(null,Environment.getExternalStorageDirectory().getPath(),
VolumeState.NoMedia, VolumeState.Mounted)-->updatePublicVolumeState(更新mVolumeStates)
-->bl.mListener.onStorageStateChanged
------------------------------------
发送状态广播：
(发送状态改变通知)notifyVolumeStateChange-->

------------------------------------
挂载路径的获取：
onEvent(从底层直接获取)-->notifyVolumeStateChange
onEvent(从底层直接获取)-->doMountVolume
BroadcastReceiver(从mVolumeStates获取)-->doMountVolume



readStorageList-->mVolumeMap.put
addNewVolume-->mVolumeMap.put
mVolumeMap两个地方获取，storagelist或底层
_________________________________
connector初始化:
MountService-->new Thread(NativeDaemonConnector, VOLD_TAG).start@MonuntService.java-->
run-->listenToSocket@NativeDaemonConnector.java

connector与vold交互：
(格式化,项Vold传数据)formatVolume-->doFormatVolume@MountService.java-->Connector.execute
@MountService.java-->execute.NativeDaemonConnector.java-->(通过socket)-->VolumeCmd::VolumeCmd
-->vm->formatVolume@CommandListener.cpp-->@VolumeManager.cpp

(接收Vold上传数据)：
handleBlockEvent@DirectVolume.cpp-->mVm->getBroadcaster()->(在main中赋值)sendBroadcast-->
sendBroadcast@SocketListener.cpp-->sendMsg(向mountService发数据)@SocketClient.cpp-->

mountService处理接收数据：
listenToSocket-->(收到底层的事件或上层发送命令后的回复)mCallbackHandler.sendMessage-->
handleMessage-->mCallbacks.onEvent@NativeDaemonConnector.java-->onEvent@MountService.java

frameworks/base/services/java/com/android/server/MountService.java
frameworks/base/services/java/com/android/server/PackageManagerService.java
frameworks/base/services/java/com/android/server/NativeDaemonConnector.java
frameworks/base/core/res/res/xml/storage_list.xml
====================================
shutdown时处理mountservice:

//设置要卸载的卷
MountServiceHandler.handleMessage(H_UNMOUNT_PM_UPDATE){
- 卸载回调加入，mForceUnmounts
- finishMediaUpdate-->mHandler.sendEmptyMessage(H_UNMOUNT_PM_DONE)	
}

//准备卷，清除打开该卷的应用
handleMessage(H_UNMOUNT_PM_DONE){
- 获取打开卷的进程getStorageUsers(path)
- ams.killPids(pids)
- sendMessage(H_UNMOUNT_MS)
}

//执行卸载
handleMessage(H_UNMOUNT_MS){
- ucb.handleFinished-->ShutdownCallBack.handleFinished
}

                                
====================================
USB设备：
usb事件：I/MediaScannerReceiver( 1375): action: android.intent.action.MEDIA_UNMOUNTED path: /mnt/usb/sda1

jb/frameworks/base/services/java/com/android/server/usb/UsbService.java
jb/frameworks/base/services/java/com/android/server/usb/UsbHostManager.java


____________
设置显示容量：
measureApproximateStorage //加个循环遍历路径

getFileSystemStats-->Libcore.os.statvfs

Settings/src/com/android/settings/deviceinfo/StorageMeasurement.java


