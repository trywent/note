/******************************************
  android.hardware.camera
  camera 老接口

*/
使用camera流程{
- public static Camera open (int cameraId)
- void setParameters (Camera.Parameters params)
- public final void setPreviewDisplay (SurfaceHolder holder)
- public final void startPreview ()
- public final void release ()
}
//检测摄像头：
context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA) //设备是否有摄像头功能

//打开摄像头：
open{
- getNumberOfCameras-->android_hardware_Camera_getNumberOfCameras{//获取摄像头个数
	- Camera::getNumberOfCameras()
	}@android_hardware_Camera.cpp
- getCameraInfo(i, cameraInfo)				//获取摄像头信息用来判断摄像头前后
- new Camera(back)-->cameraInitNormal(cameraId)-->	//打开后面摄像头
	cameraInitVersion(cameraId, CAMERA_HAL_API_VERSION_NORMAL_CONNECT){
	- mEventHandler = new EventHandler(this, looper)
	- native_setup(new WeakReference<Camera>(this), cameraId, halVersion..)
	}
}@Camera.java

native_setup-->android_hardware_Camera_native_setup(JNIEnv *env, jobject thiz,
    jobject weak_this, jint cameraId, jint halVersion, jstring clientPackageName){
  //应用名
- jsize rawClientNameLen = env->GetStringLength(clientPackageName)
- String16 clientName(rawClientName, rawClientNameLen)
  //创建camera.连接到服务端camera
- sp<Camera> camera = Camera::connect(cameraId, clientName, Camera::USE_CALLING_UID, Camera::USE_CALLING_PID)
- sp<JNICameraContext> context = new JNICameraContext(env, weak_this, clazz, camera)
- camera->setListener(context)
- camera->sendCommand(CAMERA_CMD_SET_DISPLAY_ORIENTATION, defaultOrientation, 0)
}@android_hardware_Camera.cpp

CameraTraits<Camera>::TCamConnectService CameraTraits<Camera>::fnConnectService =  &::android::hardware::ICameraService::connect;

Camera::connect(int cameraId, const String16& clientPackageName,int clientUid, int clientPid)@Camera.cpp-->
connect(int cameraId,const String16& clientPackageName, int clientUid, int clientPid){
- sp<TCam> c = new TCam(cameraId)
- sp<::android::hardware::ICameraService> cs = getCameraService()
- (cs.get()->*fnConnectService)(cl, cameraId, clientPackageName, clientUid,clientPid, /*out*/ &c->mCamera)-->
	connect@CameraService.cpp
}@CameraBase.cpp

/*************
 属性
*/
public class Parameters {
        // Parameter keys to communicate with the camera driver.
        private static final String KEY_PREVIEW_SIZE = "preview-size";
        private static final String KEY_PREVIEW_FORMAT = "preview-format";
        private static final String KEY_PREVIEW_FRAME_RATE = "preview-frame-rate";
        private static final String KEY_PREVIEW_FPS_RANGE = "preview-fps-range";
        private static final String KEY_PICTURE_SIZE = "picture-size";
        private static final String KEY_PICTURE_FORMAT = "picture-format"
	......
}@Camera.java

//设置属性。分辨率设置后不能改变
setParameters(Parameters params)-->native_setParameters(params.flatten())@Camera.java-->
android_hardware_Camera_setParameters{
- sp<Camera> camera = get_native_camera(env, thiz, NULL)
- String8 params8 = String8(reinterpret_cast<const char16_t*>(str),env->GetStringLength(params))
- camera->setParameters(params8){
	- sp <::android::hardware::ICamera> c = mCamera
	- c->setParameters(params)-->
	}@camera.cpp
}@android_hardware_Camera.cpp

//获取摄像头属性：
Camera.getParameters(返回值类型为Camera.Parameters)-->






frameworks/base/core/java/android/hardware/Camera.java
frameworks/base/core/jni/android_hardware_Camera.cpp
frameworks/av/camera/CameraBase.cpp
frameworks/av/camera/Camera.cpp


/******************************************
camera服务开始：

*/
mediaserver@init.rc-->main-->CameraService::instantiate(加入服务管理器，等待远程调用)-->
new CameraService@main_mediaserver.cpp-->onFirstRef(获取HAL模块)@CameraService.cpp

CameraService::onFirstRef-->hw_get_module(CAMERA_HARDWARE_MODULE_ID)--mModule->get_number_of_cameras
@CameraService.cpp-->


//相机个数：
mModule->get_number_of_cameras@CameraService.cpp-->camera_get_number_of_cameras{
- 查找video设备并打开，获取摄像头信息。open("/dev/videox")
- 将获取的摄像头信息填充到gCamInfos，ioctl(获取信息)
- 返回摄像头个数
}@CameraHal_Module.cpp

CameraService::connect( const sp<ICameraClient>& cameraClient,int cameraId,const String16& clientPackageName,
	int clientUid,int clientPid, /*out*/sp<ICamera>* device) {
- sp<Client> client = nullptr
- connectHelper<ICameraClient,Client>(cameraClient, id,CAMERA_HAL_API_VERSION_UNSPECIFIED, 
	clientPackageName, clientUid, clientPid, API_1,..client){
	- 
	}
- *device = client
}@CameraService.cpp


frameworks/av/media/mediaserver/main_mediaserver.cpp
frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp
hardware/xxx/camera/CameraHal_Module.cpp
frameworks/av/services/camera/libcameraservice/CameraService.cpp
frameworks/av/services/camera/libcameraservice/CameraHardwareInterface.h
frameworks/av/include/camera/ICameraService.h
frameworks/av/camera/ICameraService.cpp

/******************************************
 应用
*/
打开：
open-->new Camera()-->native_setup@Camera.java-->android_hardware_Camera_native_setup(初始化本地camera)
-->Camera::connect(cameraId)@android_hardware_Camera.cpp-->cs->connect@Camera.cpp-->connect(连接到服务,
返回ICamera)@ICameraService.cpp-->interface_cast<ICamera>-->ICamera.asInterface-->new BpCamera(
是一个Client的远程代理)@ICamera.cpp

connect-->cs->connect(CameraId)@Camera.cpp-->CameraService::connect(设置client)-->hardware->initialize
@CameraService.cpp-->initialize-->module->methods->open@CameraHardwareInterface.h-->
HAL_MODULE_INFO_SYM.method.open-->camera_module_methods.open-->camera_device_open(根据cameraId打开)-->
new android::CameraHardware@CameraHal_Module.cpp-->openCamera(打开/dev/vediox)@CameraHardware.cpp

camer@对应service端的一个client:(如典型调用流程)
releaseRecordingFrame-->c->releaseRecordingFrame@Camera.cpp-->(跨进程，服务端)Client::releaseRecordingFrame
-->mHardware->releaseRecordingFrame@CameraService.cpp-->releaseRecordingFrame-->(mDevice在HAL中初始化)
mDevice->ops->release_recording_frame@CameraHardwareInterface.h-->release_recording_frame-->
camera_release_recording_frame@CamerHal_Module.cpp


查询数目：
open-->getNumberOfCameras@Camera.java-->android_hardware_Camera_getNumberOfCameras
@android_hardware_Camera.cpp-->Camera::getNumberOfCameras()@Camera.cpp-->cs->getNumberOfCameras
@CameraService.cpp-->get_number_of_cameras-->camera_get_number_of_cameras(一直返回2)@CameraHal_module.cpp

查询信息：
getCameraInfo-->android_hardware_Camera_getCameraInfo@android_hardware_Camera.cpp-->Camera::getCameraInfo
@Camera.cpp-->cs->getCameraInfo-->mModule->get_camera_info@CameraService.cpp-->get_camera_info
@CameraHal_Module.cpp

应用：
onCreate-->CameraStartUpThread.start-->CameraStartUpThread.run-->Util.openCamera@Camera.java-->
CameraHolder.instance().open@Util.java-->open-->CameraManager.instance().cameraOpen@CameraHolder.java
-->android.hardware.Camera.open@CameraManager.java


获取服务：
getCameraServicer-->interface_cast<ICameraService>@Camera.cpp-->ICameraService.asInterface@IInterface.h
-->IMPLEMENT_META_INTERFACE@ICameraService.cpp-->new Bp##INTERFACE(obj)@IInterface.h-->
new BpCameraService(封装了能够远程调用的方法，通过这些接口进行远程调用)@ICameraService.cpp


initialize@IndicatorControlBar.java-->initializeCameraPicker@IndicatorControl.java-->CameraPicker
-->onClick@CameraPicker.java

packages/apps/Camera/src/com/android/camera/ui/IndicatorControl.java
packages/apps/Camera/src/com/android/camera/ui/IndicatorControlBar.java
----------------------------------------
CameraService::connect-->new CameraHardware@CameraService.cpp-->openCamera-->
mCamera->Open@CameraHardware.cpp-->

拍照流程：
onCreate-->CameraStartUpThread.start-->initializeFocusManager-->new FocusManager(Carmer为listener)
@Camera.java

onShutterButtonFocus-->mFocusManager.onShutterDown()-->autoFocus-->mListener.autoFocus()@FocusManager.java
-->autoFocus@Camera.java

onShutterButtonClick-->mFocusManager.doSnap()@Camera.java-->capture-->mListener.capture(设置
SNAPSHOT_IN_PROGRESS)@FocusManager.java-->

onShutterButtonFocus-->mFocusManager.onShutterUp()@Camera.java-->cancelAutoFocus-->mListener.
cancelAutoFocus@FocusManager.java-->cancelAutoFocus@Camera.java

移除相机：
DisableCameraReceiver(接收启动广播判断是否存在摄像头设备)@DisableCameraReceiver.java

setCameraState
onShutterButtonClick
SNAPSHOT_IN_PROGRESS
pref_video_time_lapse_frame_interval_default  0->1s


packages/apps/Camera/src/com/android/camera/Camera.java

/******************************************
camera:

*/

JNI
所在位置frameworks/base/core/jni/android_hardware_Camera.cpp。调用更底层函数操作摄像头，返回数据。

Native framework
本地框架定义在frameworks/av/camera/Camera.cpp，提供与android.hardware.Camera类相同的功能的本地操作。
这个类通过IPC代理访问摄像头服务

Binder IPC proxies
IPC代理执行跨进程通信。在frameworks/av/camera文件夹中有三个binder类使用摄像头服务。
ICameraService是摄像头服务的接口。ICamera是打开的摄像头设备的接口。ICameraClient是提供给应用程序的设备接口。

Camera service
在frameworks/av/services/camera/libcameraservice/CameraService.cpp,与HAL层交互

HAL
硬件抽象层，摄像头服务调用的接口，根据硬件实现。




/******************************************
video:

*/
配置文件初始化：
android_media_MediaProfiles_native_init-->MediaProfiles::getInstance@android_media_MediaProfiles.cpp-->
getInstance(从xml中获取配置或使用默认)-->createDefaultInstance(没有xml,初始每个属性值)-->
createDefaultCamcorderProfiles(创建默认)--createDefaultAudioEncoders-->profiles->mAudioEncoders.add-->
返回MediaProfile@MediaProfiles.cpp

从xml获取配置：
createInstanceFromXmlFile-->startElementHandler@MediaProfiles.cpp

获取配置文件：
get(quality)-->get(cameraId,quality)@CamcorderProfile.java-->native_get_camcorder_profile-->
android_media_MediaProfiles_native_get_camcorder_profile@android_media_MediaProfiles.cpp-->
getCamcorderProfileParamByName(获取profile值)@MediaProfiles.cpp

设置配置：
setProfile-->setVideoEncoder@MediaRecorder.java-->android_media_MediaRecorder_setVideoEncoder@
android_media_MediaRecorder.cpp-->setVideoEncoder-->mMediaRecorder->setVideoEncoder-->
(服务端binder service->createMediaRecorder).setVideoEncoder@mediarecorder.cpp-->
setVideoEncoder-->mRecorder->setVideoEncoder@MediaRecorderClient.cpp-->setVideoEncoder@



frameworks/base/media/java/android/media/CamcorderProfile.java
frameworks/base/media/jni/android_media_MediaProfiles.cpp
frameworks/av/media/libmedia/MediaProfiles.cpp
frameworks/base/media/java/android/media/MediaRecorder.java
frameworks/base/media/jni/android_media_MediaRecorder.cpp
frameworks/av/media/libmedia/mediarecorder.cpp
frameworks/av/media/libmediaplayerservice/MediaRecorderClient.cpp
frameworks/av/media/libmediaplayerservice/StagefrightRecorder.cpp
__________________________________________
MediaRecorder@MediaRecorder.java-->(设置recorder)native_setup-->android_media_MediaRecorder_native_setup
(创建MediaRecorder)-->setMediaRecorder@android_media_MediaRecorder.cpp

创建MediaRecorder:
new MediaRecorder(getService(String16("media.player")，创建createMediaRecorder)@mediarecorder.cpp
-->(远程调用)createMediaRecorder-->new MediaRecorderClient@MediaPlayerService.cpp-->
MediaRecorderClient-->mRecorder= new StagefrightRecorder@MediaRecorderClient.cpp-->StagefrightRecorder
@StagefrightRecorder.cpp

创建MPEG4Writer：
start@MediaRecorderClient.cpp-->start-->startMPEG4Recording-->setupMPEG4Recording-->new MPEG4Writer
@StagefrightRecorder.cpp-->

设置Tracks：
setupMPEG4Recording-->writer->addSource@StagefrightRecorder.cpp-->addSource-->
new Tracks--mTracks.push_back@MPEG4Writer.cpp

设置声音：
startMPEG4Recording-->setupMPEG4Recording-->setupAudioEncoder-->createAudioSource
@StagefrightRecorder.cpp-->initCheck@AudioSource.cpp

start(开始)@MediaRecorder.java-->android_media_MediaRecorder_start-->getMediaRecorder().start()
@android_media_MediaRecorder.cpp-->start-->mMediaRecorder->start@mediarecorder.cpp-->start
-->(是一个StagefrightRecorder)mRecorder->start@MediaRecorderClient.cpp-->start-->
startMPEG4Recording--setupMPEG4Recording--mWriter->start@StagefrightRecorder.cpp-->start-->
startTracks(遍历mTracks，执行Tracks.start)-->Track::start@MPEG4Writer.cpp-->

录制代理：
RecordingProxy(方法实现都是通过Camera)@Camera.cpp

CameraSource

frameworks/base/media/java/android/media/MediaRecorder.java
frameworks/base/media/jni/android_media_MediaRecorder.cpp
frameworks/av/media/libmedia/mediarecorder.cpp
frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp
frameworks/av/media/libmediaplayerservice/MediaRecorderClient.cpp
frameworks/av/media/libmediaplayerservice/StagefrightRecorder.cpp
frameworks/av/media/libstagefright/MPEG4Writer.cpp
frameworks/av/media/libstagefright/AudioSource.cpp


