/**********************
 android8.0 HAL Service

 api，farmework到hal的接口发生变化。。针对库的接口还是保留
*/

struct CaptureResult {
    uint32_t frameNumber;
    uint64_t fmqResultSize;
    CameraMetadata result;
    vec<StreamBuffer> outputBuffers;
    StreamBuffer inputBuffer;
    uint32_t partialResult;
};

hardware/interfaces/camera/device/3.2/type.hal

/**********************
    CameraProvider接口
    用于获取CameraDevice
*/
interface ICameraProvider {
- setCallback(ICameraProviderCallback callback)
- getVendorTags()
- getCameraIdList()
- isSetTorchModeSupported() //闪光灯
- getCameraDeviceInterface_V1_x  //返回ICameraDevice
- getCameraDeviceInterface_V3_x
}

//camera hal service 名"legacy/0"
service vendor.camera-provider-2-4 /vendor/bin/hw/android.hardware.camera.provider@2.4-service_64
@android.hardware.camera.provider@2.4-service_64.rc-->main-->
defaultPassthroughServiceImplementati on<ICameraProvider>("legacy/0")@service.cpp

//获取camera库的接口
HIDL_FETCH_ICameraProvider-->CameraProvider-->initialize{
- hw_get_module(CAMERA_HARDWARE_MODULE_ID, &rawModule)	//加载HAL库
- mModule = new CameraModule(rawModule) 		//将module封装
- mModule->init()-->CameraModule::init()-->mModule->init@CameraModule.cpp
- mModule->setCallbacks(this)
- mNumberOfLegacyCameras = mModule->getNumberOfCameras-->mModule->get_number_of_cameras@CameraModule.cpp//获取camera个数
- 遍历,mNumberOfLegacyCameras{
	- mModule->getCameraInfo(i)-->mModule->get_camera_info@CameraModule.cpp
	- mModule->openLegacy-->mModule->open_legacy@CameraModule.cpp
	- mOpenLegacySupported[cameraIdStr] = true
	- mCameraDeviceNames.add			//保存设备名
	}
}@CameraProvider.cpp

//获取CameraDevice
getCameraDeviceInterface_V3_x(cameraDeviceName){
- matchDeviceName(cameraDeviceName, &deviceVersion, &cameraId) //检查名字,获取cameraid
- index = mCameraDeviceNames.indexOf(cameraDeviceName)
- CameraDevice deviceImpl = new CameraDevice(mModule, cameraId, mCameraDeviceNames)
}@CameraProvider.cpp

//获取CameraDevice name
getCameraIdList{
- 遍历mCameraDeviceNames,deviceNamePair
- deviceNameList.push_back(deviceNamePair.second
}@CameraProvider.cpp

/******
  module
  camera库接口。用于操作原来的接口
*/
CameraModule{
- getCameraInfo
- getDeviceVersion
- getNumberOfCameras
- open(const char* id, struct hw_device_t** device)
- setCallbacks(const camera_module_callbacks_t *callbacks)
}@CameraProvider.cpp

//hw_device_t
CameraModule::open(const char* id, struct hw_device_t** device) {
- mModule->common.methods->open(&mModule->common, id, device)
}@CameraModule.cpp



hardware/interfaces/camera/common/1.0/default/CameraModule.cpp
/**********************
 CameraDevice

 获取CameraDeviceSession
 操作camera的接口。open时才获取实际的camera的操作接口
*/
interface ICameraDevice {
- getResourceCost
- getCameraCharacteristics
- open(ICameraDeviceCallback callback) //返回ICameraDeviceSession
}@3.2::ICameraDevice.hal

//创建CameraDevice
getCameraDeviceInterface_V3_x-->new CameraDevice@CameraProvider.cpp-->
CameraDevice::CameraDevice(p<CameraModule> module, const std::string& cameraId,
    const SortedVector<std::pair<std::string, std::string>>& cameraDeviceNames){
- mModule(module)
- mCameraId(cameraId)
}@CameraDevice.cpp

//打开设备,获取hw_device_t，hal接口。返回ICameraDeviceSession
CameraDevice::open(const sp<ICameraDeviceCallback>& callback, open_cb _hidl_cb){
  //hw_device_t 库中实现的接口
- camera3_device_t *device
- mModule->open(mCameraIdInt,&device)
- mModule->getCameraInfo(mCameraIdInt, &info)
- sp<CameraDeviceSession> session = createSession(device, callback)-->new CameraDeviceSession
- mSession = session
}@CameraDevice.cpp

/**********************
 ICameraDeviceSession
 device接口 session
*/
interface ICameraDeviceSession{
- constructDefaultRequestSettings(RequestTemplate type)
- configureStreams(StreamConfiguration requestedConfiguration)
- processCaptureRequest(vec<CaptureRequest> requests,vec<BufferCache> cachesToRemove)
- getCaptureRequestMetadataQueue
- getCaptureResultMetadataQueue
}@3.3::ICameraDeviceSession.hal


ICameraDeviceSession extends @3.2::ICameraDeviceSession{
- configureStreams_3_3
}@3.3::ICameraDeviceSession.hal


ICameraDeviceCallback{
- processCaptureResult_3_3
}

//创建session
CameraDeviceSession(camera3_device_t* device,const camera_metadata_t* deviceInfo,
        const sp<V3_2::ICameraDeviceCallback>& callback){
- mDevice(device)
- mDeviceInfo = deviceInfo
- initialize-->mDevice->ops->initialize
}@CameraDeviceSession.cpp

//处理请求
processCaptureRequest(hidl_vec<CaptureRequest>& requests){
  //遍历requests
- processOneCaptureRequest(requests[i]){
	- 
	- mDevice->ops->process_capture_request(mDevice, &halRequest)
	}
- mResultBatcher.registerBatch(requests)
}@CameraDeviceSession.cpp


hardware/interfaces/camera/provider/2.4/default/service.cpp
hardware/interfaces/camera/provider/2.4/default/CameraProvider.cpp
hardware/interfaces/camera/device/3.3/default/CameraDevice.cpp
hardware/interfaces/camera/device/3.3/default/CameraDeviceSession.cpp
/**********************
 原来的hal接口

 当前也使用。本地库实现的接口。由hal服务调用
*/

typedef struct camera3_capture_result {
    uint32_t frame_number;
    const camera_metadata_t *result;
    uint32_t num_output_buffers;
    const camera3_stream_buffer_t *output_buffers;
    const camera3_stream_buffer_t *input_buffer;
    uint32_t partial_result;

} camera3_capture_result_t;


typedef struct camera3_callback_ops {
   
    void (*process_capture_result)(const struct camera3_callback_ops *,const camera3_capture_result_t *result);

    void (*notify)(const struct camera3_callback_ops *,const camera3_notify_msg_t *msg);

} camera3_callback_ops_t;



typedef struct camera3_device_ops {

    int (*initialize)(const struct camera3_device *,const camera3_callback_ops_t *callback_ops);

    int (*configure_streams)(const struct camera3_device *,camera3_stream_configuration_t *stream_list);

    int (*register_stream_buffers)(const struct camera3_device *, const camera3_stream_buffer_set_t *buffer_set);

    const camera_metadata_t* (*construct_default_request_settings)( const struct camera3_device *, int type);

    int (*process_capture_request)(const struct camera3_device *,camera3_capture_request_t *request);

    void (*get_metadata_vendor_tag_ops)(const struct camera3_device*,vendor_tag_query_ops_t* ops);

    void (*dump)(const struct camera3_device *, int fd);
 
    int (*flush)(const struct camera3_device *);
    void *reserved[8];
} camera3_device_ops_t;


//hal Service获取设备，包含设备操作函数
typedef struct camera3_device {
    hw_device_t common;
    camera3_device_ops_t *ops;
    void *priv;
} camera3_device_t;


hardware/libhardware/include/hardware/camera3.h
