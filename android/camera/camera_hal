/**********************
 HAL Service
*/
interface ICameraProvider {//provider接口
- setCallback(ICameraProviderCallback callback)
- getVendorTags()
- getCameraIdList()
- isSetTorchModeSupported() //闪光灯
- getCameraDeviceInterface_V1_x  //返回ICameraDevice
- getCameraDeviceInterface_V3_x
}

//camera hal service 名"legacy/0"
service vendor.camera-provider-2-4 /vendor/bin/hw/android.hardware.camera.provider@2.4-service_64
@android.hardware.camera.provider@2.4-service_64.rc-->main-->
defaultPassthroughServiceImplementati on<ICameraProvider>("legacy/0")@service.cpp


HIDL_FETCH_ICameraProvider-->CameraProvider-->initialize{
- hw_get_module(CAMERA_HARDWARE_MODULE_ID, &rawModule) //加载HAL库
- mModule = new CameraModule(rawModule) //将module封装
- mModule->init()-->CameraModule::init()-->mModule->init@CameraModule.cpp
- mModule->setCallbacks(this)
- mNumberOfLegacyCameras = mModule->getNumberOfCameras-->mModule->get_number_of_cameras@CameraModule.cpp//获取camera个数
- 遍历,mNumberOfLegacyCameras{
	- mModule->getCameraInfo(i)-->mModule->get_camera_info@CameraModule.cpp
	- mModule->openLegacy-->mModule->open_legacy@CameraModule.cpp
	- mOpenLegacySupported[cameraIdStr] = true
	- mCameraDeviceNames.add//保存设备名
	}
}@CameraProvider.cpp

//hal和camera接口
CameraModule{
- getCameraInfo
- getDeviceVersion
- getNumberOfCameras
- open(const char* id, struct hw_device_t** device)
- setCallbacks(const camera_module_callbacks_t *callbacks)
}@CameraProvider.cpp

//获取CameraDevice name
getCameraIdList{
- 遍历mCameraDeviceNames,deviceNamePair
- deviceNameList.push_back(deviceNamePair.second
}@CameraProvider.cpp
//获取CameraDevice interface
getCameraDeviceInterface_V3_x(cameraDeviceName){
- matchDeviceName(cameraDeviceName, &deviceVersion, &cameraId) //检查名字,获取cameraid
- index = mCameraDeviceNames.indexOf(cameraDeviceName)
- CameraDevice deviceImpl = new CameraDevice(mModule, cameraId, mCameraDeviceNames)
}@CameraProvider.cpp

/**********************
 ICameraDevice

*/
interface ICameraDevice {
- getResourceCost
- getCameraCharacteristics
- open(ICameraDeviceCallback callback) //返回ICameraDeviceSession
}@3.2::ICameraDevice.hal

//打开设备,返回session
CameraDevice::open(sp<ICameraDeviceCallback>& callback){
- camera3_device_t *device
- mModule->open(mCameraIdInt,&device)
- mModule->getCameraInfo(mCameraIdInt, &info)
- sp<CameraDeviceSession> session = createSession(device, callback)-->
	new CameraDeviceSession
- mSession = session
}@CameraDevice.cpp

/**********************
 ICameraDeviceSession
 device接口 session
*/
ICameraDeviceSession{
- constructDefaultRequestSettings
- configureStreams
- processCaptureRequest
- getCaptureRequestMetadataQueue
- getCaptureResultMetadataQueue
}@3.3::ICameraDeviceSession.hal


ICameraDeviceSession extends @3.2::ICameraDeviceSession{
- configureStreams_3_3
}@3.3::ICameraDeviceSession.hal


ICameraDeviceCallback{
- processCaptureResult_3_3
}

//创建session
CameraDeviceSession(camera3_device_t* device,const camera_metadata_t* deviceInfo,
        const sp<V3_2::ICameraDeviceCallback>& callback){
- mDevice(device)
- mDeviceInfo = deviceInfo
- initialize-->mDevice->ops->initialize
}@CameraDeviceSession.cpp

//处理请求
processCaptureRequest(hidl_vec<CaptureRequest>& requests){
- 遍历requests,processOneCaptureRequest(requests[i]){
	- 
	- mDevice->ops->process_capture_request(mDevice, &halRequest)
	}
- mResultBatcher.registerBatch(requests)
}@CameraDeviceSession.cpp

hardware/interfaces/camera/provider/2.4/default/service.cpp
hardware/interfaces/camera/provider/2.4/default/CameraProvider.cpp
hardware/interfaces/camera/device/3.3/default/CameraDevice.cpp
hardware/interfaces/camera/device/3.3/default/CameraDeviceSession.cpp
hardware/interfaces/camera/common/1.0/default/CameraModule.cpp
