/**********************
 CameraDeviceClient(响应java层的接口)  ---> Camera3Device

 ICameraDeviceUserWrapper封装ICameraDeviceUser
*/

{
    oneway void onDeviceError(int errorCode, in CaptureResultExtras resultExtras);
    oneway void onDeviceIdle();
    oneway void onCaptureStarted(in CaptureResultExtras resultExtras, long timestamp);
    oneway void onResultReceived(in CameraMetadataNative result, in CaptureResultExtras resultExtras);
    oneway void onPrepared(int streamId);
    oneway void onRepeatingRequestError(in long lastFrameNumber,in int repeatingRequestId);
    oneway void onRequestQueueEmpty();
}ICameraDeviceCallbacks.aidl

{
    SubmitInfo submitRequest(in CaptureRequest request, boolean streaming);
    SubmitInfo submitRequestList(in CaptureRequest[] requestList, boolean streaming);

    long cancelRequest(int requestId)
    void beginConfigure()
    void endConfigure(int operatingMode)
    void deleteStream(int streamId)
    int createStream(in OutputConfiguration outputConfiguration)
    int createInputStream(int width, int height, int format)
    Surface getInputSurface()

    CameraMetadataNative createDefaultRequest(int templateId)
    CameraMetadataNative getCameraInfo()
    void waitUntilIdle()
    long flush()
    void prepare(int streamId)
    void tearDown(int streamId)
    void prepare2(int maxCount, int streamId)
    void finalizeOutputConfigurations(int streamId, in OutputConfiguration outputConfiguration)
}@ICameraDeviceUser.aidl


//CameraDeviceClient接口
struct CameraDeviceClientBase : public CameraService::BasicClient, public hardware::camera2::BnCameraDeviceUser
CameraDeviceClient : Camera2ClientBase<CameraDeviceClientBase>
{//cameraDevice接口
- beginConfigure/endConfigure
- createDefaultRequest
- createStream/deleteStream
- submitRequest/cancelRequest
- disconnect
}CameraDeviceClient.cpp


//创建CameraDeviceClient  CameraDevice中调用CameraDeviceClient:Camera2ClientBase
makeClient-->new CameraDeviceClient@CameraService.cpp
-->Camera2ClientBase{
- TClientBase(cameraService, remoteCallback, clientPackageName,cameraId)
- mSharedCameraCallbacks(remoteCallback)
- mDeviceVersion(cameraService->getDeviceVersion(TClientBase::mCameraIdStr)
- mInitialClientPid = clientPid
- mDevice = new Camera3Device(cameraId)
}@Camera2ClientBase.cpp

//创建cameraDevice。初始化cameraDevice,并创建ICameraDeviceSession
connectHelper-->client->initialize(mCameraProviderManager)@CamersService.cpp-->initialize-->initializeImpl-->
Camera2ClientBase::initialize@CameraDeviceClient.cpp-->initialize-->initializeImpl
@Camera2ClientBase.cpp-->mDevice->initialize(providerPtr)@Camera3Device.cpp


//创建stream,返回StreamId  对应CameraCaptureSession
mRemoteDevice.createStream@CameraDeviceImpl.java-->
CameraDeviceClient::createStream(
        const hardware::camera2::params::OutputConfiguration){
  //bufferProducers
- std::vector<sp<IGraphicBufferProducer>>& bufferProducers = outputConfiguration.getGraphicBufferProducers()
- int surfaceType = outputConfiguration.getSurfaceType() //只支持surfaceView,texture
- for (auto& bufferProducer : bufferProducers){
	- sp<IBinder> binder = IInterface::asBinder(bufferProducer)
	- sp<Surface> surface
	- createSurfaceFromGbp(streamInfo, isStreamInfoValid, surface, bufferProducer) //初始化streamInfo
	- binders.push_back(IInterface::asBinder(bufferProducer))
	- surfaces.push_back(surface)
	}
  //创建stream,获取id
- mDevice->createStream(surfaces, deferredConsumer, streamInfo.format,&streamId)-->Camera3Device::createStream
- 遍历binders,mStreamMap.add(binder,streamId)
- mStreamInfoMap[streamId] = streamInfo
}@CameraDeviceClient.cpp

//配置stream
mRemoteDevice.endConfigure(operatingMode)@CameraDeviceImpl.java-->
CameraDeviceClient::endConfigure(int operatingMode) {
- mDevice->configureStreams(operatingMode)
}@CameraDeviceClient.cpp

//创建默认请求. 创建一个容器让上层填写图像数据的参数
createDefaultRequest(int templateId,/*out*/CameraMetadataNative* request){
- CameraMetadata metadata
- mDevice->createDefaultRequest(templateId, &metadata){
	- mInterface->constructDefaultRequestSettings
	}
- request->swap(metadata)
}@CameraDeviceClient.cpp

//请求数据
submitRequestList(vector<hardware::camera2::CaptureRequest>& requests,bool streaming/*repeat*/){
- CameraMetadata metadata(request.mMetadata)
- 遍历requests,for (auto&& request: requests){
		for (sp<Surface> surface : request.mSurfaceList){ //普通流程中request中没有surface
		- sp<IGraphicBufferProducer> gbp = surface->getIGraphicBufferProducer()
		- int idx = mStreamMap.indexOfKey(IInterface::asBinder(gbp))
		- StreamSurfaceId& streamSurfaceId = mStreamMap.valueAt(idx)
		- surfaceMap[streamSurfaceId.streamId()].push_back(streamSurfaceId.surfaceId())
		}	
	- metadata.update(ANDROID_REQUEST_OUTPUT_STREAMS)
	- metadataRequestList.push_back(metadata) 
	}
- if(streaming)mDevice->setStreamingRequestList-->
	submitRequestsHelper(requests, surfaceMaps, /*repeating*/true){
	- convertMetadataListToRequestListLocked(requests, surfaceMaps,repeating, /*out*/&requestList)
	- mRequestThread->setRepeatingRequests(requestList)
	}@Camera3Device.cpp
- else mDevice->captureList{}
}CameraDeviceClient.cpp


/*******************
 camera3Device ---> HalInterface

 camera3Device{
	- HalInterface mInterface //hal层接口,ICameraDeviceSession
	}
*/
Camera3Device(const String8 &id):
        mId(id),
        mOperatingMode(NO_MODE),
        mIsConstrainedHighSpeedConfiguration(false),
        mStatus(STATUS_UNINITIALIZED),

//初始化个
initialize(manager){
  //创建ICameraDeviceSession。通过hal层的CameraProvider
- sp<ICameraDeviceSession> session
- manager->openSession(mId.string(), /*out*/ &session){ //session
	- deviceInfo = findDeviceInfoLocked(id)-->从mProviders中device查找
	- deviceInfo3->mInterface->open(callback)-->ICameraDevice.open	//返回session
	}@CameraProviderManager.cpp
- manager->getCameraCharacteristics(mId.string(), &mDeviceInfo)		//info
- std::shared_ptr<RequestMetadataQueue> queue
- session->getCaptureRequestMetadataQueue
- session->getCaptureResultMetadataQueue
  //hal层接口
- HalInterface mInterface = new HalInterface(session, queue){
	- mHidlSession(session)
	}
- initializeCommonLocked{
	- mBufferManager = new Camera3BufferManager
	- mRequestThread = new RequestThread
	- mPreparerThread = new PreparerThread
	}
}@Camera3Device.cpp

//创建stream
createStream(sp<Surface>& consumers,uint32_t width, uint32_t height, int format,int streamSetId){
- format == HAL_PIXEL_FORMAT_BLOB{
	- ssize_t blobBufferSize = getJpegBufferSize(width, height)
	- newStream = new Camera3OutputStream
	}
- HAL_PIXEL_FORMAT_RAW_OPAQUE{
	- newStream = new Camera3OutputStream	
	}
- share{
	- newStream = new Camera3SharedOutputStream
	}
- newStream->setStatusTracker(mStatusTracker)
- newStream->setBufferManager(mBufferManager)
- mOutputStreams.add(mNextStreamId, newStream)
}Camera3Device.cpp

//配置stream
Camera3Device::configureStreams(int operatingMode)-->configureStreamsLocked(operatingMode)-->
Camera3Device::configureStreamsLocked(int operatingMode) {
- Vector<camera3_stream_t*> streams
  //inputStream
- camera3_stream_t *inputStream = mInputStream->startConfiguration()
- streams.add(inputStream)
  //outputSteam
- for (size_t i = 0; i < mOutputStreams.size(); i++) {
	- camera3_stream_t *outputStream = mOutputStreams.editValueAt(i)->startConfiguration()
	- streams.add(outputStream)
	}
  //配置stream
- config.streams = streams.editArray()
- mInterface->configureStreams(&config)
}


//创建默认配置
Camera3Device::createDefaultRequest(int templateId, CameraMetadata *request) {
- camera_metadata_t *rawRequest
- mInterface->constructDefaultRequestSettings((camera3_request_template_t) templateId, &rawRequest)
- set_camera_metadata_vendor_id(rawRequest, mVendorTagId)
- mRequestTemplateCache[templateId].acquire(rawRequest)
- *request = mRequestTemplateCache[templateId]
}

Camera3Device::initializeCommonLocked{
- mBufferManager = new Camera3BufferManager
- mRequestThread = new RequestThread
- mPreparerThread = new PreparerThread
}

Camera3Device::RequestThread::threadLoop() {
- waitForNextRequestBatch{
	- NextRequest nextRequest
	- nextRequest.captureRequest = waitForNextRequestLocked{
		- mRepeatingRequests填充到mRequestQueue
		- 从mRequestQueue中取出第一个请求
		}
	- nextRequest.halRequest = camera3_capture_request_t
	- mNextRequests.add(nextRequest) //保存
	}
- prepareHalRequests{
	- 遍历mNextRequests
	- auto& nextRequest = mNextRequests.editItemAt(i)
	}
  //发送请求到HAL
- sendRequestsBatch{}
- sendRequestsOneByOne{
	- 遍历mNextRequests,nextRequest
	- mInterface->processCaptureRequest(&nextRequest.halRequest)
	}
}

//发送处理请求
Camera3Device::HalInterface::processCaptureRequest(camera3_capture_request_t)-->
processBatchCaptureRequests(std::vector<camera3_capture_request_t*>& requests){
- hardware::hidl_vec<device::V3_2::CaptureRequest> captureRequests //hal使用的request
- wrapAsHidlRequest(requests[i], /*out*/&captureRequests[i])
- mHidlSession->processCaptureRequest(captureRequests
}

waitForNextRequestBatch-->waitForNextRequestLocked

isStreamPending
//提交请求
RequestThread::setRepeatingRequests(RequestList &requests){
- mRepeatingRequests.clear()
- mRepeatingRequests.insert(requests.begin(), requests.end())
}

/*******************
 HalInterface Camera3Device中hidl接口

 所有调用最终通过hidl接口，执行到hidl
*/
HalInterface(sp<ICameraDeviceSession> &session,std::shared_ptr<RequestMetadataQueue> queue) :
        mHidlSession(session),
        mRequestMetadataQueue(queue)

//config stream
Camera3Device::HalInterface::configureStreams(camera3_stream_configuration *config) {
- for (size_t i = 0; i < config->num_streams; i++) {
	- 
	}
  //配置stream
- sp<device::V3_3::ICameraDeviceSession> hidlSession_3_3
- auto castResult = device::V3_3::ICameraDeviceSession::castFrom(mHidlSession)
- hidlSession_3_3 = castResult
- if(hidlSession_3_3 != nullptr){
	- idlSession_3_3->configureStreams_3_3(requestedConfiguration...)
  }else{
	- mHidlSession->configureStreams(requestedConfiguration,...)
  }
  //
- for (size_t i = 0; i < config->num_streams; i++) {

	}
}@Camera3Device.cpp

//创建默认请求
Camera3Device::HalInterface::constructDefaultRequestSettings(camera3_request_template_t templateId,
        /*out*/ camera_metadata_t **requestTemplate) {
- mHidlSession->constructDefaultRequestSettings(id,...
}@Camera3Device.cpp

//提交请求
Camera3Device::HalInterface::processCaptureRequest(camera3_capture_request_t *request)-->
processBatchCaptureRequests(std::vector<camera3_capture_request_t*>& requests,/*out*/uint32_t* numRequestProcessed){
- 
- mHidlSession->processCaptureRequest(captureRequests, cachesToRemove,...)
}

frameworks/av/services/camera/libcameraservice/api2/CameraDeviceClient.cpp
frameworks/av/services/camera/libcameraservice/common/Camera2ClientBase.cpp
frameworks/av/services/camera/libcameraservice/device3/Camera3Device.cpp
frameworks/av/camera/aidl/android/hardware/camera2/ICameraDeviceUser.aidl
/*******************
 Camera 老接口


*/


//设置参数
CameraClient::setParameters(const String8& params) {
- CameraParameters p(params)
- mHardware->setParameters(p)
}@CameraClient.cpp


frameworks/av/services/camera/libcameraservice/api1/CameraClient.cpp


