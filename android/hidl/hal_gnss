//hardware


//=============hwservicemanager
start hwservicemanager@init.rc-->/system/bin/hwservicemanager@hwservicemanager.rc
-->main{
- new ServiceManager()
- new BnHwServiceManager(manager)
}@service.cpp

//加入服务
ServiceManager::add{
- service->interfaceChain //获取调用者的标识descripter
- ifaceMap = mServiceMap[fqName] //获取对应的服务map
- ifaceMap.insertService //加入到map
}


/*
 hal层封装成一个服务.
 默认服务和实现@hardware/interfaces/gnss/1.0/default/Android.mk
 LOCAL_MODULE := android.hardware.gnss@1.0-impl
 LOCAL_MODULE := android.hardware.gnss@1.0-service
*/
//=============hal servcice  android/hardware/gnss/1.0/IGnss.h//接口定义
service gnss_service /vendor/bin/hw/android.hardware.gnss@1.0-service//服务启动
-->main-->defaultPassthroughServiceImplementation<IGnss>@hardware/interfaces/gnss/1.0/default/service.cpp-->
defaultPassthroughServiceImplementation{
- registerPassthroughServiceImplementation{
	- Interface::getService("default")-->IGnss::getService("default",true){//获取stub，本地服务
		- sm->getTransport-->ServiceManager::getTransport-->vintf::Transport getTransport //获取服务类型hwbinder
		- 
		}@IGnss.h
	- service->registerAsService-->IGnss::registerAsService-->sm->add@IGnssAll.cpp
	}
- joinRpcThreadpool //开始服务binder线程
}@LegacySupport.h

//获取hal类型,当前是hwbinder
vintf::Transport getTransport{
- vintf::VintfObject::GetFrameworkHalManifest{//获取配置"/system/manifest.xml"
	- Get()
	}@VintfObject.cpp
- vintf::VintfObject::GetDeviceHalManifest{

	}
}@Vintf.cpp

//获取服务
IGnss::getService{//stub==true则是获取本地服务
- IServiceManager sm = defaultServiceManager()
- stub==false{//client端获取服务
	- 
	- sm->get(IGnss::descriptor, serviceName)
	}
- stub==true{//从当前进程的本地服务获取BsGnss,用于注册到serviceManager
	- baseInterface= getPassthroughServiceManager().get-->
	  IServiceManager.get("android.hardware.gnss@1.0::IGnss","default"){
		- prefix = "android.hardware.gnss@1.0" + "-impl" //前缀
		- 遍历paths = {"/system/lib64/hw/" "/vendor/lib64/hw/""/odm/lib64/hw/"}
		- search(path, prefix, ".so"){
			- 
			}
		- 遍历打开查找到的库,dlopen("android.hardware.gnss@1.0-impl.so") 
		- generator = dlsym(handle, "HIDL_FETCH_IGNSS")//查找符号HIDL_FETCH_IGNSS
		- interface = generator("default")-->HIDL_FETCH_IGnss{
			- hw_get_module(GPS_HARDWARE_MODULE_ID)//加载本地库
			- module->methods->open(module, GPS_HARDWARE_MODULE_ID,&device)
			- new Gnss(device)-->Gnss::Gnss(gnssDevice)-->gnssDevice->get_gps_interface(GPS库接口mGnssIface)@Gnss.cpp
			}@Gnss.cpp
		- registerReference{//加入到
			- defaultServiceManager().registerPassthroughClient
			}
		- 返回interface//实现的接口函数
		}@ServiceManagement.cpp
	- 返回new BsGnss(IGnss::castFrom(baseInterface))
	}
}@GnssAll.cpp


/*  最终调用的接口
 HAL lib(获取gps.default.so中接口)


*/
GpsCallbacks Gnss::sGnssCb = {
    .size = sizeof(GpsCallbacks),
    .location_cb = locationCb,
    .status_cb = statusCb,
    .sv_status_cb = gpsSvStatusCb,
    .nmea_cb = nmeaCb,
    .set_capabilities_cb = setCapabilitiesCb,
    .acquire_wakelock_cb = acquireWakelockCb,
    .release_wakelock_cb = releaseWakelockCb,
    .create_thread_cb = createThreadCb,
    .request_utc_time_cb = requestUtcTimeCb,
    .set_system_info_cb = setSystemInfoCb,
    .gnss_sv_status_cb = gnssSvStatusCb,
}

//关联到库。获取库中接口
HIDL_FETCH_IGnss{
- hw_get_module(GPS_HARDWARE_MODULE_ID, (hw_module_t const**)&module)
- hw_device_t* device
- module->methods->open(module, GPS_HARDWARE_MODULE_ID, &device)
- IGnss* iface = new Gnss(device)-->Gnss::Gnss(gnssDevice){
	- mGnssIface = gnssDevice->get_gps_interface(GPS库接口mGnssIface)-->gps_get_hardware_interface-->_GpsInterface@gps
	}	
- return iface
}@Gnss.cpp

//开始
Gnss::start()-->mGnssIface->start()@Gnss.cpp


//设置回调。初始化接口
Gnss::setCallback(const sp<IGnssCallback>& callback){
- sGnssCbIface = callback
- mGnssIface->init(&sGnssCb)
}@Gnss.cpp

//回调
location_cb@xxxgps.c-->
Gnss::sGnssCb.location_cb-->Gnss::locationCb-->sGnssCbIface->gnssLocationCb@Gnss.cpp
-->GnssCallback::gnssLocationCb@com_android_server_location_GnssLocationProvider.cpp

system/hwservicemanager/service.cpp
system/libhidl/transport/ServiceManager.cpp
system/hwservicemanager/Vintf.cpp
system/libhidl/transport/include/hidl/LegacySupport.h
system/hwservicemanager/Vintf.cpp
system/libvintf/VintfObject.cpp
system/libhidl/transport/ServiceManagement.cpp
hardware/interfaces/gnss/1.0/default/service.cpp
hardware/interfaces/gnss/1.0/default/Gnss.cpp
/etc/init/android.hardware.gnss@1.0-service.rc
//hidl生成@out/soong/.intermediates/hardware
interface/gnss/1.0/android.hardware.gnss@1.0_genc++/gen/android/hardware/gnss/1.0/IGnss.h
interface/gnss/1.0/android.hardware.gnss@1.0_genc++/gen/android/hardware/gnss/1.0/GnssAll.cpp

/*
 android层通过服务访问hal层

*/
//=============client 使用服务（android framework）
class_init_native@GnssLocationProvider.java-->
android_location_GnssLocationProvider_class_init_native{
- 初始化java层回调函数
- gnssHal = IGnss::getService()-->getService("default",false)@@IGnss.h
- gnssXtraIface = gnssHal->getExtensionXtra()
- agnssIface = gnssHal->getExtensionAGnss()
}@com_android_server_location_GnssLocationProvider.cpp

native_init@GnssLocationProvider.java-->android_location_GnssLocationProvider_init{
- gnssHal->setCallback(new GnssCallback())//设置回调
- gnssXtraIface->setCallback(gnssXtraCbIface)
- agnssIface->setCallback(aGnssCbIface)
}@com_android_server_location_GnssLocationProvider.cpp


android/hardware/gnss/1.0/IGnss.h//接口定义
frameworks/base/services/core/java/com/android/server/location/GnssLocationProvider.java
frameworks/base/services/core/jni/com_android_server_location_GnssLocationProvider.cpp


//卫星编号
GLONASS_SVID_OFFSET = 64
GLONASS_SVID_COUNT = 24
BEIDOU_SVID_OFFSET = 200
BEIDOU_SVID_COUNT = 35





