/************************

 adb
*/
//电脑端设置adb 连接
创建adb_usb.ini文件，写入android设备的VID( 12d1:1079)
echo 0x12d1 > ~/.android/adb_usb.ini

vim /etc/udev/rules.d/70-android.rules
service udev restart

//adbd启动：
adbd@init.rc-->main-->adb_main@adb.c-->fdevent_loop-->fdevent_process(将事件加入队列)--(取出fdevent)
fdevent_call_fdfunc-->fde->func@fdevent.c



main@adb.c-->usb_init-->adb_thread_create(&tid, usb_open_thread, h)-->usb_open_thread
(打开/dev/android_adb)@usb_linux_client.c-->register_usb_transport-->register_transport
@transport.c


system/core/adb/usb_linux_client.c
system/core/adb/transport.c
//注册事件：
fdevent_create-->fdevent_install(初始化fde，并将它注册)-->fdevent_register(设置fd_table[fde->fd]=fde)


create_local_socket@soket.c-->fdevent_install@fdevent.c

system/core/adb/adb.c

/************************
adb协议：
*/

消息头结构：
struct message {
    unsigned command;       /* command identifier constant      */
    unsigned arg0;          /* first argument                   */
    unsigned arg1;          /* second argument                  */
    unsigned data_length;   /* length of payload (0 is allowed) */
    unsigned data_crc32;    /* crc32 of data payload            */
    unsigned magic;         /* command ^ 0xffffffff             */
};
消息：
CONNECT  //host和client都发送该消息建立连接
AUTH     //验证连接，若验证通过则发送CONNECT。不通过则继续发送AUTH，发送完私有key后发送publick key 由用户验证
OPEN     //建立连接，若成功发送READY，失败发送CLOSE
READY    //准备好
WRITE    //发送数据。每次接收到READY后才发送消息
CLOSE    //连接断开
SYNC     //

//建立连接：
发送CONNECT(version, maxdata, "system-identity-string")

OPEN(local-id, 0, "destination") 告诉接收者local-id希望建立连接。（成功收到READY消息，否则CLOSE消息）
处理open消息时会建立socket，存放在local_socket_list中。

创建对应的服务线程shell，reboot...
transport_registration_func(监听注册相关函数)-->transport_socket_events@transport.c-->handle_packet(A_OPEN)@adb.c-->create_local_service_socket@socket.c==>create_local_socket==service_to_fd@services.c-->create_service_thread
(根据不同的fd创建处理线程，传入要调用函数。运行对应的服务root，reboot，remount..)
-->adb_thread_create-->pthread_create

连接后：
发送WRITE(0, remote-id, "data")
处理wirte消息。在handle_packet方法中将收到的A_WRTE包放入队列s->enqueue(s, p)，s是在open时建立

local_socket_enqueue(socket->enqueue)-->fdevent_add-->fdevent_set

service.c启动响应命令的服务


fdevent_set@fdevent.c

system/core/adb/fdevent.c



//adb root:
设置ro.debuggable=1后adb root可用

设置root时restart_root_service@service.c
system/core/adb/

//设备：
//添加设备
transport_registration_func-->transport_list.push_front(t)

//列出设备adb devices
handle_host_request("devices")-->list_transports(遍历transport_list中设备)-->append_transport(填充信息)

/********************
 adb弹框
*/

//android6 打开usb调试。"是否允许 USB 调试？"弹框：
setAdbEnabled-->UsbDebuggingHandler.handleMessage(MESSAGE_ADB_ENABLED)-->Thread.start
run-->listenToSocket-->(接收到publick key)mHandler.obtainMessage(MESSAGE_ADB_CONFIRM)-->
UsbDebuggingHandler.handleMessage(MESSAGE_ADB_CONFIRM)
showConfirmationDialog-->mContext.startActivity(dialogIntent)@UsbDebuggingManager.java

frameworks/base/services/java/com/android/server/usb/UsbDeviceManager.java
frameworks/base/packages/SystemUI/src/com/android/systemui/usb/UsbDebuggingActivity.java
frameworks/base/services/java/com/android/server/usb/UsbDebuggingManager.java

//android10
handlePreferenceTreeClick(Preference preference)--> showConfirmationDialog(preference)
@AbstractEnableAdbPreferenceController.java-->showConfirmationDialog--> EnableAdbWarningDialog.show(mFragment)
@AdbPreferenceController.java-->show(Fragment host) {
- final EnableAdbWarningDialog dialog = new EnableAdbWarningDialog()
- dialog.show(manager, TAG)
}@EnableAdbWarningDialog.java

frameworks/base/packages/SettingsLib/src/com/android/settingslib/development/AbstractEnableAdbPreferenceController.java
packages/apps/Settings/src/com/android/settings/development/AdbPreferenceController.java
packages/apps/Settings/src/com/android/settings/development/EnableAdbWarningDialog.java


//"允许 USB 调试吗？" 弹框 。确认
startConfirmation(String key, String fingerprints)@AdbDebuggingManager.java

//wifi
打开wifi调试:
persist.adb.tcp.port=5555
service.adb.tcp.port 


adb connect ip-addr

//拒绝连接
用adb tcpip模式重启adb
adb tcpip 5555
