/**********************
 应用并不知道绘制画面,更新画面的时间点.需要一个统一的刷新频率
 Choreographer:
	1 将要执行的任务加入到队列mCallbackQueues
	2 请求vsync事件
	3 接收vysnc事件(屏幕刷新间隔16.66ms),处理动画,输入,绘制

 WindowManagerService,ViewRootImpl,animator都使用Choreographer提供的脉冲

 事件获取和处理都在当前的线程中执行.出现处理不及时会是什么问题?
 
*/
//获取脉冲事件
{
- nativeInit 	//初始化
- nativeDispose //销毁释放
- onVsync 	//收到脉冲事件,处任务后调用scheduleVsync,请求下一次脉冲
- scheduleVsync //请求脉冲事件
}DisplayEventReceiver.java


//App thread，获取Choreographer
ThreadLocal<Choreographer> sThreadInstance = new ThreadLocal<Choreographer>() {
        protected Choreographer initialValue() {
	    Looper looper = Looper.myLooper()
            return new Choreographer(looper, VSYNC_SOURCE_APP);
        }
    }

ViewRootImpl@ViewRootImpl.java-->getInstance()-->sThreadInstance.get()@Choreographer.java
//WindowManager线程,获取Choreographer
ThreadLocal<Choreographer> sSfThreadInstance = new ThreadLocal<Choreographer>() {
                protected Choreographer initialValue() {
		    Looper looper = Looper.myLooper()
                    return new Choreographer(looper, VSYNC_SOURCE_SURFACE_FLINGER);
                }
            }
WindowAnimator@WindowAnimator.java-->getSfInstance()-->sSfThreadInstance.get()@Choreographer.java


Choreographer(Looper looper, int vsyncSource){
- mLooper = looper
- mHandler = new FrameHandler(looper)
  //同步事件接收
- mDisplayEventReceiver = new FrameDisplayEventReceiver(looper, vsyncSource)
	-->DisplayEventReceiver(Looper looper, int vsyncSource){
	- dispatchVsync-->onVsync 		//收到同步事件,底层回调
	}
- mCallbackQueues[i] = new CallbackQueue()	//4种回调
}@Choreographer.java

1/*
 请求Vsync

*/
//主线程上处理事件
FrameHandler.handleMessage(Message msg){
  //用于非VSYNC时,无脉冲事件直接执行
- MSG_DO_FRAME:doFrame(System.nanoTime())
  //非主线程发送MSG_DO_SCHEDULE_VSYNC，请求vsync事件
- MSG_DO_SCHEDULE_VSYNC:doScheduleVsync{
	- scheduleVsyncLocked
	}
- MSG_DO_SCHEDULE_CALLBACK:doScheduleCallback(msg.arg1){
	- scheduleFrameLocked
	}
}

//请求一个vsync
scheduleFrameLocked(long now){
- mFrameScheduled = true
- 使用屏幕刷新频率,USE_VSYNC{//请求一个脉冲事件
	- if(isRunningOnLooperThreadLocked){
		- scheduleVsyncLocked-->mDisplayEventReceiver.scheduleVsync()
	  }else{//非Choreographer线程,发送msg到对应线程
		- Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_VSYNC)
		- mHandler.sendMessageAtFrontOfQueue(msg)
		} 
	}
- 不使用,!USE_VSYNC{//直接调用doFrame
	- 计算时间,long nextFrameTime = Math.max
	- Message msg = mHandler.obtainMessage(MSG_DO_FRAME)
	- mHandler.sendMessageAtTime(msg, nextFrameTime)
	}
}

2/*
  将任务加入队列。请求vsync,收到vsync时处理
  CALLBACK_INPUT       //first
  CALLBACK_ANIMATION   //before traversals
  CALLBACK_TRAVERSAL   //layout and draw
  CALLBACK_COMMIT      //post-draw
*/

//将任务加入mCallbackQueues队列.并请求vsync,接收到vsync事件时执行任务
postCallbackDelayedInternal(int callbackType,Runnable action,long delayMillis){
- mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token){ //加入queue
	- CallbackRecord callback = obtainCallbackLocked(dueTime, action, token){
		- CallbackRecord callback = mCallbackPool
		- 为空则创建,callback = new CallbackRecord()
		}
	- CallbackRecord entry = mHead
	- callback.next = entry.next ,entry.next = callback找到正确时间位置插入
	}
- 马上执行,scheduleFrameLocked(long now) //请求一个脉冲事件
- 延迟执行{
	- Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action)
	- mHandler.sendMessageAtTime(msg, dueTime)
	}
}

//frame,CALLBACK_ANIMATION
postFrameCallback(FrameCallback callback)-->postFrameCallbackDelayed-->
postCallbackDelayedInternal(CALLBACK_ANIMATION,callback)-->



3/*
 Choreographer处理事件.收到vsync时,执行队列中任务

*/
FrameDisplayEventReceiver{
- onVsync(long timestampNanos, int builtInDisplayId, int frame/*递增的帧号*/){
  - mHavePendingVsync = true //有待处理同步事件
  - mTimestampNanos = timestampNanos //记录收到事件的时间
  - mFrame = frame
  - Message msg = Message.obtain(mHandler, this) //设置message.callback = this
  - msg.setAsynchronous
  - mHandler.sendMessageAtTime(msg)-->this.run-->doFrame
 }

-run-->doFrame(mTimestampNanos, mFrame)
}
//onVsync记录时间,发送消息执行doFrame
doFrame(long frameTimeNanos, int frame){
- !mFrameScheduled return//没有请求,不需要处理
- jitterNanos = System.nanoTime() - frameTimeNanos //请求时到现在处理时的间隔
- if (jitterNanos >= mFrameIntervalNanos){ //处理时间超出16.66ms
	- frameTimeNanos调整为最近帧的时间
	}
- mLastFrameTimeNanos = frameTimeNanos
 //处理
- doCallbacks(Choreographer.CALLBACK_INPUT, frameTimeNanos)
- doCallbacks(Choreographer.CALLBACK_ANIMATION, frameTimeNanos)
- doCallbacks(Choreographer.CALLBACK_TRAVERSAL, frameTimeNanos)
- doCallbacks(Choreographer.CALLBACK_COMMIT, frameTimeNanos)
}

doCallbacks(int callbackType, long frameTimeNanos)
- long now = System.nanoTime()
- CallbackRecord callbacks= mCallbackQueues[callbackType].extractDueCallbacksLocked(now) //获取当前时间callback
- for(CallbackRecord c = callbacks; c != null; c = c.next){
	- c.run(frameTimeNanos){
		- FRAME_CALLBACK_TOKEN,action.doFrame
		- else,action.run
		}
	}
- recycleCallbackLocked
}



frameworks/base/core/java/android/view/Choreographer.java
frameworks/base/core/java/android/view/DisplayEventReceiver.java
frameworks/base/core/jni/android_view_DisplayEventReceiver.cpp

/**********************
 AnimationHandler中 animator使用choreography。发起脉冲回调

*/
Choreographer.FrameCallback mFrameCallback = new Choreographer.FrameCallback() {
- doFrame{
	  //执行任务
	- doAnimationFrame
	  //回调不为空,获取下一次脉冲
	- mAnimationCallbacks.size() > 0,getProvider().postFrameCallback(this)
	}
}@AnimationHandler.java

//加入动画回调到mAnimationCallbacks..有callback时会一直获取脉冲
addAnimationFrameCallback(AnimationFrameCallback callback){
- getProvider().postFrameCallback(mFrameCallback)-->FrameCallback.doFrame--> //脉冲时执行CALLBACK_ANIMATION
	doAnimationFrame{
	 //遍历mAnimationCallbacks
	- AnimationFrameCallback callback = mAnimationCallbacks.get(i)
	- callback.doAnimationFrame(frameTime)
	- getProvider().postCommitCallback()-->postCallback(Choreographer.CALLBACK_COMMIT, runnable)//脉冲时执行CALLBACK_COMMIT
	- cleanUpList //清除要删除的回调
	}
- mAnimationCallbacks.add(callback)
}@AnimationHandler.java

//移除回调,停止获取脉冲
removeCallback(AnimationFrameCallback callback){
- mCommitCallbacks.remove(callback)
- mAnimationCallbacks.set(id, null) //将回调设置为null,执行动画后被移除
}@AnimationHandler.java

//提交
addOneShotCommitCallback

frameworks/base/core/java/android/animation/AnimationHandler.java
/**********************
 view中发起同步的绘制事件
 ViewRootImpl使用choreography。发起脉冲回调
 
*/
{
- mChoreographer = Choreographer.getInstance()
}@ViewRootImpl.java

{
- postOnAnimation-->mViewRootImpl.mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION)
- postOnAnimationDelayed
- postInvalidateOnAnimation-->attachInfo.mViewRootImpl.dispatchInvalidateOnAnimation
}@View.java


//输入事件.CALLBACK_INPUT
scheduleConsumeBatchedInput-->mChoreographer.postCallback(Choreographer.CALLBACK_INPUT,mConsumedBatchedInputRunnable)
-->ConsumeBatchedInputRunnable.run-->doConsumeBatchedInput@ViewRootImpl.java

//view处理.CALLBACK_ANIMATION
dispatchInvalidateOnAnimation/dispatchInvalidateRectOnAnimation-->
mInvalidateOnAnimationRunnable.addView(view){
- mViews.add(view)
- InvalidateOnAnimationRunnable.addView-->postIfNeededLocked-->
  mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION,this)-->InvalidateOnAnimationRunnable.run{
	- mTempViews = mViews.toArray //取出所有要处理的view
	- mTempViews[i].invalidate() //遍历
	- mTempViewRects = mViewRects.toArray		
	- info.target.invalidate
	}
}@ViewRootImpl.java

//布局.CALLBACK_TRAVERSAL
scheduleTraversals-->mChoreographer.postCallback(Choreographer.CALLBACK_TRAVERSAL,mTraversalRunnable)
-->TraversalRunnable.run-->doTraversal@ViewRootImpl.java

//CALLBACK_COMMIT
mChoreographer.postCallback(Choreographer.CALLBACK_COMMIT, runnable, null)@AnimationHandler.java

frameworks/base/core/java/android/animation/AnimationHandler.java
frameworks/base/core/java/com/android/internal/graphics/SfVsyncFrameCallbackProvider.java
