/*
 display信息
*/
mDisplayManagerService = mSystemServiceManager.startService(DisplayManagerService.class)@SystemServer.java-->s
DisplayManagerService{
- mHandler = new DisplayManagerHandler(DisplayThread.get().getLooper())
- mDisplayAdapterListener = new DisplayAdapterListener()
- mDefaultDisplayDefaultColorMode
- pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE)
}@DisplayManagerService.java

startService@SystemServer.java-->onStart(){
  //注册监听Display
- mHandler.sendEmptyMessage(MSG_REGISTER_DEFAULT_DISPLAY_ADAPTERS)
- publishBinderService(Context.DISPLAY_SERVICE, new BinderService())
- publishLocalService(DisplayManagerInternal.class, new LocalService())
}@DisplayManagerService.java

//消息处理
DisplayManagerHandler.handleMessage(Message msg){
- MSG_REGISTER_DEFAULT_DISPLAY_ADAPTERS:
	registerDefaultDisplayAdapters{
	- registerDisplayAdapterLocked(new LocalDisplayAdapter(mHandler, mDisplayAdapterListener))
	}
- MSG_REGISTER_ADDITIONAL_DISPLAY_ADAPTERS:
	registerAdditionalDisplayAdapters{
	- registerOverlayDisplayAdapterLocked
	- registerWifiDisplayAdapterLocked
	}
- MSG_DELIVER_DISPLAY_EVENT:
        deliverDisplayEvent(msg.arg1, msg.arg2)
}@DisplayManagerService.java

//display添加
mDisplayAdapterListener-->
DisplayAdapterListener.onDisplayDeviceEvent{
- DisplayAdapter.DISPLAY_DEVICE_EVENT_ADDED{
	- handleDisplayDeviceAdded(device)-->handleDisplayDeviceAddedLocked(DisplayDevice device){
		- DisplayDeviceInfo info = device.getDisplayDeviceInfoLocked()
		- LogicalDisplay display = addLogicalDisplayLocked(device)
		- Runnable work = updateDisplayStateLocked(device)
		}
	}
- DisplayAdapter.DISPLAY_DEVICE_EVENT_CHANGED{
	- handleDisplayDeviceChanged(device)
	}
}@DisplayManagerService.java

//display初始化
addLogicalDisplayLocked(DisplayDevice device){
- DisplayDeviceInfo deviceInfo = device.getDisplayDeviceInfoLocked()
- LogicalDisplay display = new LogicalDisplay(displayId, layerStack, device)
- configureColorModeLocked(display, device)
 //保存
- mLogicalDisplays.put(displayId, display)
}@DisplayManagerService.java

//设置LogicalDisplay的override信息
setDisplayInfoOverrideFromWindowManager-->setDisplayInfoOverrideFromWindowManagerInternal@DisplayManagerService.java
-->setDisplayInfoOverrideFromWindowManagerLocked@LogicalDisplay.java
/*
 DisplayManager接口

*/
mDisplayManager = (DisplayManager)context.getSystemService(Context.DISPLAY_SERVICE)@ContextImpl.java-->
new DisplayManager(ctx.getOuterContext())@SystemServiceRegistry.java-->
DisplayManager(Context context){
- mContext = context
- mGlobal = DisplayManagerGlobal.getInstance(){
	- IBinder b = ServiceManager.getService(Context.DISPLAY_SERVICE)
	- sInstance = new DisplayManagerGlobal(IDisplayManager.Stub.asInterface(b))
	}@DisplayManagerGlobal.java
}DisplayManager.java


getDisplay(int displayId)-->getOrCreateDisplayLocked(displayId, false /*assumeValid*/){
- Display display = mGlobal.getCompatibleDisplay(displayId, context.getResources()){
	- getDisplayInfo{
		- DisplayInfo info = mDm.getDisplayInfo(displayId)
		- registerCallbackIfNeededLocked
		}
	- new Display(this, displayId, displayInfo, daj)
	}
- mDisplays.put(displayId, display)
}@DisplayManager.java

/*
 设置输入事件窗口大小方位
 
*/
//android6.0
LocalService.performTraversal-->performTraversalInternal-->
performTraversalLocked{
- clearViewportsLocked //清除viewport
- 遍历mDisplayDevices{
	- device = mDisplayDevices.get(i)
	- configureDisplayLocked(device){
		- findLogicalDisplayForDeviceLocked(device).configureDisplayLocked
		- setViewportLocked-->//设置mDefaultViewport，mExternalTouchViewport，virtualViewport
		}
	- device.performTraversalLocked(t)
	}
- mHandler.sendEmptyMessage(MSG_UPDATE_VIEWPORT)-->mInputManagerInternal.setDisplayViewports //更显inputManager中viewport
}@DisplayManagerService.java


//android8.0
performTraversalInTransactionFromWindowManager-->performTraversalInTransactionFromWindowManagerInternal
-->performTraversalInTransactionLocked{
 //清除viewport
- clearViewportsLocked
 //遍历mDisplayDevices
- DisplayDevice device = mDisplayDevices.get(i)
- configureDisplayInTransactionLocked(device){
	- LogicalDisplay display = findLogicalDisplayForDeviceLocked(device)
	- setViewportLocked(mDefaultViewport, display, device)
	- setViewportLocked(mExternalTouchViewport, display, device)
	- setViewportLocked(viewport, display, device)
	}
- mHandler.sendEmptyMessage(MSG_UPDATE_VIEWPORT)
}@DisplayManagerService.java

//从DisplayDevice获取viewPort大小
setViewportLocked-->device.populateViewportLocked@DisplayManagerService.java-->
populateViewportLocked(viewport){
- viewport.orientation = mCurrentOrientation
- viewport.deviceWidth
- viewport.deviceHeight
}@DisplayDevice.java


//displayDevice
configureDisplayLocked(DisplayDevice){
- displayDeviceInfo = device.getDisplayDeviceInfoLocked()
- setProjectionLocked@DisplayDevice.java
}@LogicalDisplay.java


//获取display信息
getDisplayInfo(int displayId)-->getDisplayInfoInternal(int displayId, int callingUid){
- LogicalDisplay display = mLogicalDisplays.get(displayId)
- DisplayInfo info = display.getDisplayInfoLocked()
}


frameworks/base/services/core/java/com/android/server/display/DisplayManagerService.java
frameworks/base/services/core/java/com/android/server/display/DisplayDevice.java
frameworks/base/services/core/java/com/android/server/display/LogicalDisplay.java
frameworks/base/core/java/android/hardware/display/DisplayManager.java
frameworks/base/core/java/android/hardware/display/DisplayManagerGlobal.java
