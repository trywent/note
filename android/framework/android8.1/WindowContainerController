/*=========================
 ActivityManagerService----WindowManagerService
 ActvityManager中创建WindowContainerController用于管理WindowContainer

 WindowContainer对应的类:
	ActivityStack   ----  TaskStack
	TaskRecord      ----  Task
	ActivityRecord  ----  AppWindowToken

	W@viewRootImpl  ----  WindowState

 configuration:
	ConfigurationContainer管理Activity中configuration
	windowContainer管理window中configuration
*/
//activity
ActivityStackSupervisor{
- mActivityDisplays = ActivityDisplay{
  - mStacks = ActivityStack{   
	- mTaskHistory = TaskRecord {
		- mActivities  = ActivityRecords {
			- mWindowContainerController
			}
		- mWindowContainerController
		}
	- mWindowContainerController
	}
}
}

//ActivityManager中容器控制器
StackWindowController, TaskWindowContainerController, AppWindowContainerController extends WindowContainerController{
- mContainer 是一个WindowContainer
}

WindowContainerController{
  //设置容器
- void setContainer(E container)-->setController-->controller.setContainer(this)@WindowContainer.java-->mContainer = container
	@WindowContainerController.java
- removeContainer()
}@WindowContainerController.java


//activity对应窗口管理
 ActivityStack extends ConfigurationContaine{
	- mBounds
	- mWindowContainerController = StackWindowController extends WindowContainerController{
		  //提供接口获取栈大小，改变栈大小
		- resize
		- getBounds
		  //管理stack
		- mContainer = TaskStack
		}
	}

 TaskRecord extends ConfigurationContaine{
	- mBounds
	- mWindowContainerController = TaskWindowContainerController extends WindowContainerController{
		  //提供接口获取task大小，改变task大小
		- resize
		- getBounds
		  //管理task
		- mContainer= Task
		}
	}

 ActivityRecord extends ConfigurationContaine{
	- mBounds
	- mWindowContainerController = AppWindowContainerController extends WindowContainerController{
		  //管理AppWindowToken
		- mContainer = AppWindowToken
		}
	}

//configuration
ConfigurationContainer{
- Configuration mOverrideConfiguration 	//当前容器的override
- Configuration mFullConfiguration     	//当前容器的完整配置.父容器的mFullConfiguration合并当前mOverrideConfiguration
- Configuration mMergedOverrideConfiguration  //父容器的mMergedOverrideConfiguration,合并当前mOverrideConfiguration
- getConfiguration
- onConfigurationChanged{
	- mFullConfiguration.setTo(newParentConfig)
	- mFullConfiguration.updateFrom(mOverrideConfiguration)
 	- child.onConfigurationChanged
	}
- onOverrideConfigurationChanged{
	- mOverrideConfiguration.setTo(overrideConfiguration)
	- onConfigurationChanged
	- onMergedOverrideConfigurationChanged
	}
- onParentChanged{
	- 
	}
}@ConfigurationContainer.java

1/******************************
 ActivityDisplay 对应一个display
 
*/
setWindowManager(WindowManagerService wm){
- mDisplayManager =(DisplayManager)mService.mContext.getSystemService(Context.DISPLAY_SERVICE)
  //获取display,创建ActivityDisplay
- Display[] displays = mDisplayManager.getDisplays()
- for (int displayNdx = displays.length - 1; displayNdx >= 0; --displayNdx) {
	- final int displayId = displays[displayNdx].getDisplayId()
	- ActivityDisplay activityDisplay = new ActivityDisplay(displayId)
	}
}@ActivityStackSupervisor.java

new ActivityStack-->postAddToDisplay-->activityDisplay.attachStack(this, findStackInsertIndex(onTop))
@ActivityStack.java-->attachStack@ActivityStackSupervisor.java

//设置configuration
sendNewConfiguration@WindowManagerService.java-->
updateDisplayOverrideConfiguration-->updateDisplayOverrideConfigurationLocked-->
performDisplayOverrideConfigUpdate@ActivityManangerService.java-->setDisplayOverrideConfiguration-->
activityDisplay.onOverrideConfigurationChanged(overrideConfiguration)@ActivityStackSupervisor.java


2/******************************
 ActivityStack ---- TaskStack
 stack中包含窗口管理器 StackWindowController mWindowContainerController
*/
//创建Activitystack
getStack-->createStackOnDisplay-->createStack{
- PINNED_STACK_ID:new PinnedActivityStack-->super(){
		- createStackWindowController-->new PinnedStackWindowController
		}
- new ActivityStack{
	  //获取bounds大小
	- mWindowContainerController = createStackWindowController(mTop,mTmpRect2)-->
		new StackWindowController(mStackId, this, displayId, onTop, outBounds)
	  //加入到ActivityDisplay,更新configuration
	- postAddToDisplay(display, mTmpRect2.isEmpty() ? null : mTmpRect2, onTop){
		- mBounds = bounds != null ? new Rect(bounds) : null
		- onParentChanged()
		- activityDisplay.attachStack(this, findStackInsertIndex(onTop))
		- mStackSupervisor.resizeDockedStackLocked(mBounds)
		}
	}@ActivityStack.java
}@ActivityStackSupervisor.java

//StackWindowController
StackWindowController(int stackId, StackWindowListener listener, boolean onTop, Rect outBounds)-->
StackWindowController(int stackId, StackWindowListener listener, boolean onTop, Rect outBounds, WindowManagerService service){
- DisplayContent dc = mRoot.getDisplayContent(displayId) //mRoot为WindowManagerService
- TaskStack stack = dc.addStackToDisplay(stackId)
- stack.setController(this) //设置controler ,container
- getRawBounds(outBounds)//从mContainer 获取窗口大小 全屏为null
}@StackWindowController.java

positionChildAt(TaskRecord,index){
- TaskRecord.updateOverrideConfiguration-->updateOverrideConfiguration@TaskRecord.java
- insertTaskAtPosition(task, index)
}@ActivityStack.java




//改变大小
resize(Rect bounds)-->setBounds(bounds)


3/******************************
 TaskRecord   ---- Task
 包含窗口管理器TaskWindowContainerController mWindowContainerController

*/
//TaskRecord
setTaskToCurrentTopOrCreateNewTask--> mTargetStack.createTaskRecord@ActivityStarter.java
-->createTaskRecord{
- TaskRecord task = new TaskRecord(mService, taskId, info, intent, voiceSession,voiceInteractor, type)
- addTask{
	- mTaskHistory.add(position, task)
	- task.setStack(this)
	}
- task.createWindowContainer{
	- Rect bounds = updateOverrideConfigurationFromLaunchBounds(){
		  //先从stack中获取大小mBounds
		- Rect bounds = getLaunchBounds()
		  //更新配置中大小
		- updateOverrideConfiguration(bounds)
		}
	- controller = new TaskWindowContainerController(taskId, this, getStack().getWindowContainerController(),bounds)
	- setWindowContainerController(controller){
		- mWindowContainerController = controller
		}
	}@TaskRecord
}@ActivityStack.java

//TaskWindowContainerController
TaskWindowContainerController(int taskId, TaskWindowContainerListener listener,StackWindowController stackController,Rect bounds){
- TaskStack stack = stackController.mContainer
- Task task = createTask-->new Task(this,bounds)@Task.java
- stack.addTask(task)-->addChild
}@TaskWindowContainerController.java


//设置stack,更新configuration
setStack(ActivityStack stack){
- onParentChanged(){
	- super.onParentChanged()
	}
}@TaskRecord.java

//创建时调用
updateOverrideConfiguration(Rect bounds){
- Configuration newConfig = getOverrideConfiguration
- mFullscreen = bounds == null //是否设置全屏
- if(mFullscreen){
	- mLastNonFullscreenBounds = mBounds //当前是全屏,原来非全屏..记录原来值
	- mBounds = null
  }else{
	-
	- computeOverrideConfiguration(newConfig)//使用controller调整configuration
	}
  //更新configuration
- onOverrideConfigurationChanged(newConfig){
	- onConfigurationChanged(newParentConfig){
		- mFullConfiguration.setTo(newParentConfig)
		- child = getChildAt(i) //ActivityRecord
		- child.onConfigurationChanged-->onConfigurationChanged@ActivityRecord.java
		}
	- onMergedOverrideConfigurationChanged
	}@ConfigurationContainer.java
  //大小发生变化
- mService.mStackSupervisor.scheduleUpdateMultiWindowMode 
}@TaskRecord.java


//调整configuration
computeOverrideConfiguration(Configuration config, Rect bounds, Rect insetBounds){
- StackWindowController stackController = mStack.getWindowContainerController()
- stackController.adjustConfigurationForBounds(bounds)
}@TaskRecord.java

//改变大小
resize(Rect bounds, int resizeMode, boolean preserveWindow, boolean deferResume){
- updateOverrideConfiguration(bounds) //更新configuration中大小
 //更新当前task最上activity的配置
- ActivityRecord r = topRunningActivityLocked()
- kept = mService.mStackSupervisor.ensureActivitiesVisibleLocked(r
- kept,mService.mStackSupervisor.resumeFocusedStackTopActivityLocked
 //controler更新大小
- mWindowContainerController.resize(mBounds) 
}@TaskRecord.java


4/******************************
 ActivityRecord  ---- AppWindowToken

 ActivityManager端创建AppwindowToken加入到displayContent.mTokenMap中,会传入appToken@ActivityRocord.java
 应用进程ViewRootImpl中addWindow会传入同一个appToken@attr frome ActivityRocord.java 
 这样应用WindowState和AppWindowToken关联起来.可以由服务管理

 窗口管理器 AppWindowContainerController mWindowContainerController
*/
//创建ActivityRecord
startActivityLocked-->r.createWindowContainer@ActivityStack.java-->
createWindowContainer{
- TaskWindowContainerController taskController = task.getWindowContainerController()
- updateOverrideConfiguration
  //传入appToken
- mWindowContainerController = new AppWindowContainerController(taskController,appToken,.... getOverrideConfiguration(), mBounds)//关联window
}@ActivityRecord.java

//AppWindowContainerController
AppWindowContainerController(TaskWindowContainerController taskController,IApplicationToken token, 
	....AppWindowContainerListener listenerConfiguration overrideConfig, Rect bounds){
- mToken = token
- AppWindowToken atoken = createAppWindow(token,task.getDisplayContent())-->new AppWindowToken()
- task.addChild(atoken) //加入到task
}@AppWindowContainerController.java

//更新configuration。获取ActivityRecord的mBounds大小
ensureActivityConfigurationLocked{
- updateOverrideConfiguration
- Configuration newMergedOverrideConfig = getMergedOverrideConfiguration()
- setLastReportedConfiguration(newMergedOverrideConfig)
}@AcvitiyRecord.java

//mBounds。windowstate的窗口计算使用这里的计算值
updateOverrideConfiguration{
- computeBounds(mTmpBounds){
	- 
	}
- mBounds.set(mTmpBounds)
  //configuration
- task.computeOverrideConfiguration(mTmpConfig, mBounds)-->computeOverrideConfiguration@TaskRecord.java
- onOverrideConfigurationChanged(mTmpConfig)
}@ActivityRecord.java

//设置task,并更新配置
setTask(TaskRecord task, boolean reparenting){
- onParentChanged{
	- ConfigurationContainer parent = getParent()
	- onConfigurationChanged(parent.mFullConfiguration)
	- onMergedOverrideConfigurationChanged()
	}@ConfigurationContainer.java
}@ActivityRecord.java

//设置启动窗口(starting window)
addStartingWindow(String pkg, int theme, CompatibilityInfo compatInfo,
            CharSequence nonLocalizedLabel, int labelRes, int icon, int logo...){
- TaskSnapshot snapshot = mService.mTaskSnapshotController.getSnapshot
- int type = getStartingWindowType(newTask, taskSwitch, processRunning,...)
- if (type == STARTING_WINDOW_TYPE_SNAPSHOT) {
	- return createSnapshot(snapshot)
	}
  //应用窗口的主题是否允许有启动窗口
- if (theme != 0) {
	- boolean windowIsTranslucent = ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent)
	}
  //和上个应用复用启动窗口？
- if (mContainer.transferStartingWindow(transferFrom)) {
	- return true
	}
  //新建启动窗口
- mContainer.startingData = new SplashScreenStartingData
- scheduleAddStartingWindow-->mService.mAnimationHandler.postAtFrontOfQueue(mAddStartingWindow)-->
	mAddStartingWindow{
	- startingData = mContainer.startingData
	- container = mContainer
	- StartingSurface surface = startingData.createStartingSurface(container)
	}
}@AppWindowContainerController.java

//设置可见
setVisibility-->mWindowContainerController.setVisibility@ActivityRecord.java-->
setVisibility(boolean visible, boolean deferHidingClient){
- AppWindowToken wtoken = mContainer
  //
- if (wtoken.okToAnimate() && mService.mAppTransition.isTransitionSet()) {
	- if (visible) {
        	- mService.mOpeningApps.add(wtoken)
          } else {
                - mService.mClosingApps.add(wtoken)
          }
	}
- wtoken.setVisibility(null, visible, TRANSIT_UNSET, true, wtoken.mVoiceInteraction)
}@AppWindowContainerController.java

frameworks/base/services/core/java/com/android/server/am/ActivityStarter.java
frameworks/base/services/core/java/com/android/server/am/ActivityStack.java
frameworks/base/services/core/java/com/android/server/am/TaskRecord.java
frameworks/base/services/core/java/com/android/server/wm/AppWindowContainerController.java
frameworks/base/services/core/java/com/android/server/wm/AppWindowToken.java
frameworks/base/services/core/java/com/android/server/am/ConfigurationContainer.java
======================
/*******************************
 configuration

 ActivityDisplay,ActivityStack,TaskRecord,ActivityRecords extends ConfigurationContainer
*/

//设置parent时调用
onParentChanged{
- ConfigurationContainer parent = getParent()
- onConfigurationChanged(parent.mFullConfiguration)
- onMergedOverrideConfigurationChanged{
	- ConfigurationContainer parent = getParent()
	- mMergedOverrideConfiguration.setTo(parent.getMergedOverrideConfiguration()
	- mMergedOverrideConfiguration.updateFrom(mOverrideConfiguration)
	  //更新child
	- child.onMergedOverrideConfigurationChanged
	}
}@ConfigurationContainer.java

//更新configuration
mStackSupervisor.onConfigurationChanged@WindowManangerService.java-->
onConfigurationChanged{
- mFullConfiguration.setTo(newParentConfig)
- mFullConfiguration.updateFrom(mOverrideConfiguration)
  //更新child
- child.onConfigurationChanged(mFullConfiguration)
}@ConfigurationContainer.java


//overrideConfiguration
activityDisplay.onOverrideConfigurationChanged@ActivityStackSupervisor.java-->
onOverrideConfigurationChanged{

}@ConfigurationContainer.java


//merged
MergedConfiguration{
- Configuration mGlobalConfig
- Configuration mOverrideConfig
- Configuration mMergedConfig
}





 //用户操作更新
updateConfigurationLocked-->updateGlobalConfiguration 

 //windowmanager更新
updateDisplayOverrideConfigurationLocked-->performDisplayOverrideConfigUpdate-->
updateDisplayOverrideConfiguration@ActivityManagerService.java-->setDisplayOverrideConfiguration-->
activityDisplay.onOverrideConfigurationChanged@ActivityStackSupervisor.java//更新所有子容器

sendNewConfiguration-->mActivityManager.updateDisplayOverrideConfiguration@WindowManagerService.java-->
updateDisplayOverrideConfiguration{
- mWindowManager.computeNewConfiguration //计算配置
- updateDisplayOverrideConfigurationLocked{
	 //DEFAULT_DISPLAY
	- updateGlobalConfiguration{
		- mStackSupervisor.onConfigurationChanged //更新所有子容器
		- setDisplayOverrideConfiguration
		}
	 //!DEFAULT_DISPLAY
	- performDisplayOverrideConfigUpdate-->mStackSupervisor.setDisplayOverrideConfiguration
	}
}@ActivityManagerService.java


//windowManager配置



//应用配置变化
ensureActivityConfigurationLocked-->scheduleConfigurationChanged(newMergedOverrideConfig)@ActivityRecord.java-->
scheduleActivityConfigurationChanged(Configuration overrideConfig)-->

