/**********************
 systemui PIP
*/
start{
- mPipManager = com.android.systemui.pip.phone.PipManager.getInstance()
- mPipManager.initialize{
	- mActivityManager = ActivityManager.getService()
	- mWindowManager = WindowManagerGlobal.getWindowManagerService()
	- mWindowManager.registerPinnedStackListener(mPinnedStackListener) //监听栈状态
	- SystemServicesProxy.getInstance(mContext).registerTaskStackListener(mTaskStackListener){ //监听task
		- mTaskStackListeners.add(listener)
		- (IActivityManager)mIam.registerTaskStackListener(mTaskStackListener) //注册到ActivityManagerService
		}@SystemServicesProxy.java
	- mInputConsumerController = new InputConsumerController(mWindowManager)-->
		registerInputConsumer{//监听输入事件
		- inputChannel = new InputChannel()
		- mWindowManager.createInputConsumer(INPUT_CONSUMER_PIP)
		- new PipInputEventReceiver(inputChannel)
		}@InputConsumerController.java
	- mMediaController = new PipMediaController
	- mMenuController = new PipMenuActivityController //menuActivity
	- mTouchHandler = new PipTouchHandler(mInputConsumerController)
	- mNotificationController = new PipNotificationController
	- EventBus.getDefault().register(this)
	}@PipManager.java
- getComponent(CommandQueue.class).addCallbacks(this){
	- mCallbacks.add(callbacks)
	}@CommandQueue.java
}@PipUI.java

//PinedStack 注册到WidowManagerService
PinnedStackListener{
- onMinimizedStateChanged
//pinStack位置大小发生变化
- onMovementBoundsChanged(insetBounds,normalBounds)-->mTouchHandler.onMovementBoundsChanged
- onActionsChanged
}PinnedStackListener@PipManager.java


//TaskStack 注册到ActivityManagerService,监听栈
mTaskStackListener{
- onActivityPinned(String packageName, int userId, int taskId){
	- mTouchHandler.onActivityPinned
	- mMenuController.onActivityPinned
	- SystemServicesProxy.getInstance(mContext).setPipVisibility(true)
	}
- onActivityUnpinned{
	- mMenuController.onActivityUnpinned()
	- mTouchHandler.onActivityUnpinned(topActivity)
	}
- onPinnedActivityRestartAttempt{//activity重启,设置全屏
	- mTouchHandler.getMotionHelper().expandPip
	}
}TaskStackListener@PipManager.java


animateToUnexpandedState-->resizeAndAnimatePipUnchecked(normalBounds)@PipMotionHelper.java

showMenu-->startMenuActivity@PipMenuActivityController.java

_______________________
//PipMenuActivityController
showMenu-->startMenuActivity{//启动PipMenuActivity
- Intent intent = new Intent(mContext, PipMenuActivity.class)
- intent.putExtra(EXTRA_CONTROLLER_MESSENGER, mMessenger)
- ActivityOptions options = ActivityOptions.makeCustomAnimation
- options.setLaunchTaskId(pinnedStackInfo) //启动到pipStack
- setStartActivityRequested
}@PipMenuActivityController


//PipMenuActivity
onCreate{
- mTouchState = new PipTouchState()
- mMenuContainer = findViewById(R.id.menu_container)
- mMenuContainer.setOnTouchListener //设置触摸事件处理
- updateFromIntent{
	- mToControllerMessenger = intent.getParcelableExtra(EXTRA_CONTROLLER_MESSENGER)
	- notifyActivityCallback(mMessenger) //设置controller回调
	- showMenu //显示
	}
}@PipMenuActivity.java

//PipMenuActivity通知状态到PipMenuActivityController
dismissPip/showPipMenu-->sendMessage-->mToControllerMessenger.send@@PipMenuActivity.java
-->Handler.handleMessage{
- MESSAGE_MENU_STATE_CHANGED://menuActivity状态变化
	onMenuStateChanged{
	- mInputConsumerController.registerInputConsumer //MENU_STATE_NONE menuActivity消失
	- onPipMenuStateChanged
	}
- MESSAGE_EXPAND_PIP
- MESSAGE_DISMISS_PIP,mHandler.handleMessage-->mListeners.forEach(l -> l.onPipDismiss())
	PipMenuListener@PopTouchHandler.java-->mMotionHelper.dismissPip()
	- cancelAnimations
	- mMenuController.hideMenuWithoutResize
	- mHandler.post(mActivityManager.removeStack)
	}
}@PipMenuActivityController.java


frameworks/base/packages/SystemUI/src/com/android/systemui/pip/phone/PipMenuActivityController.java
frameworks/base/packages/SystemUI/src/com/android/systemui/pip/phone/PipMenuActivity.java
_______________________
//touchHandler
InputConsumerController(mWindowManager)-->registerInputConsumer{//监听输入事件
- inputChannel = new InputChannel()
- mWindowManager.createInputConsumer(INPUT_CONSUMER_PIP)
- new PipInputEventReceiver(inputChannel)
}@InputConsumerController.java


//touchHandler接收触摸事件执行操作
PipTouchHandler(menuController,mInputConsumerController)@PipManager.java-->
PipTouchHandler(PipMenuActivityController menuController,inputConsumerController){
- mMenuController = menuController
- mMenuController.addListener(mMenuListener) //设置监听menuActivity
- mGestures = new PipTouchGesture[] {//触摸事件处
                mDefaultMovementGesture
        }
- mMotionHelper = new PipMotionHelper//pip窗口移动操作
- inputConsumerController.setTouchListener(this::handleTouchEvent) //监听事件
}@PipTouchHandler.java


PipInputEventReceiver.onInputEvent-->mListener.onTouchEvent@@InputConsumerController.java-->
handleTouchEvent{
- MotionEvent.ACTION_DOWN-->gesture.onDown-->
	PipTouchGesture.onDown{
	- mMenuController.pokeMenu()
	- mDismissViewController.createDismissTarget() //若发生长按,弹出拖动移除提示
	- mHandler.postDelayed(mShowDismissAffordance
	}
- MotionEvent.ACTION_MOVE-->gesture.onMove-->
	PipTouchGesture.onMove{
	- 
	- mMotionHelper.movePip(Rect mTmpBounds){//移动更新窗口位置
		- resizePipUnchecked-->mActivityManager.resizePinnedStack(toBounds)
		- mBounds.set(toBounds)
		}@PipMotionHelper.java
	}
- MotionEvent.ACTION_UP{
	- updateMovementBounds //更新位置
	- gesture.onUp{
		- 拖曳,mMotionHelper.animateDismiss{ //消失
			- BoundsAnimator = createAnimationToBounds		
			- mBoundsAnimator.start()		
			}
		- 最小窗口
		- 其它{
			- mMenuController.hideMenu
			- mMotionHelper.expandPip{
				- mMenuController.hideMenuWithoutResize
				- mActivityManager.moveTasksToFullscreenStack(PINNED_STACK_ID)/mActivityManager.resizeStack(PINNED_STACK_ID)
				}
			}
		}
	}
}@PipTouchHandler.java

animateToExpandedState/animateToUnexpandedState/animateToIMEOffset-->resizeAndAnimatePipUnchecked

flingToMinimizedState/animateToClosestMinimizedState/flingToSnapTarget/animateToClosestSnapTarget/animateDismiss
-->createAnimationToBounds-->resizePipUnchecked

movePip-->resizePipUnchecked

//设置为最小窗口
setMinimizedStateInternal-->setMinimizedState@PipMotionHelper.java

//设置全屏
expandPip-->mActivityManager.resizeStack@PipMotionHelper.java

resizeAndAnimatePipUnchecked-->
handleMessage(MSG_RESIZE_ANIMATE)-->mActivityManager.resizeStack@PipMotionHelper.java

//移除pip
dismissPip-->mActivityManager.removeStack(PINNED_STACK_ID)


//ActivityManagerService通知Systemui更新窗口位置
onMovementBoundsChanged{
- 
- 
- updateMovementBounds(mMenuState){
	- mMovementBounds = isMenuExpanded
                ? mExpandedMovementBounds //
                : mNormalMovementBounds //
	- mPinnedStackController.setMinEdgeSize
	}
}@PipTouchHandler.java

frameworks/base/packages/SystemUI/src/com/android/systemui/pip/PipUI.java
frameworks/base/packages/SystemUI/src/com/android/systemui/pip/phone/PipManager.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
frameworks/base/packages/SystemUI/src/com/android/systemui/recents/misc/SystemServicesProxy.java
frameworks/base/packages/SystemUI/src/com/android/systemui/pip/phone/PipMotionHelper.java
frameworks/base/packages/SystemUI/src/com/android/systemui/pip/phone/PipMenuActivity.java
frameworks/base/packages/SystemUI/src/com/android/systemui/pip/phone/InputConsumerController.java
frameworks/base/packages/SystemUI/src/com/android/systemui/pip/phone/PipTouchHandler.java
frameworks/base/packages/SystemUI/src/com/android/systemui/recents/misc/SystemServicesProxy.java

/**********************

*/
postStartActivityProcessing-->mService.mTaskChangeNotificationController.notifyPinnedActivityRestartAttempt
@ActivityStarter.java-->notifyPinnedActivityRestartAttempt-->forAllRemoteListeners(mNotifyPinnedActivityRestartAttempt)-->
mNotifyPinnedActivityRestartAttempt-->l.onPinnedActivityRestartAttempt


frameworks/base/services/core/java/com/android/server/am/TaskChangeNotificationController.java

