/**********************
 动画效果
*/

//图像内容动画(animate bitmaps):图像内容变化.圆形按钮变成方形
{

}
//图像显示,隐藏,位移动画(animate ui visisbility and motion): 图像移位,显示,隐藏
{
- 
}
//图像布局变化(animate layout changes): activity中fragment切换
{
- Scene
- Transition
- TransitionManager.go()
}
//activity切换:应用切换
{
- ActivityOptions.makeSceneTransitionAnimation()
- startActivity()
}


1/* 
 属性动画:在一个时间段内,产生对应时间点的属性值.
 动画的步进方式也使用choregrapher(AnimationHandler封装)

 动画发生器ValueAnimator,ObjectAnimator,AnimatorSet
 估值器IntEvaluator,FloatEvaluator
 插值器AccelerateDecelerateInterpolator,AccelerateInterpolator //一直加速

 动画发生器android.animation
*/
Property Animation{
- Duration:动画操作的时长，默认是300ms
- Time interpolation:动画的时间计算方法(渐变，跳跃...)
- Repeat count and behavior:定义动画执行时间结束后重复符动画的次数。定义动画是否顺序执行完后倒序执行。
- Animator sets:能够定义一组动画效果，一起执行或在一个延迟后顺序执行
- Frame refresh delay: 能够定义动画的帧刷新频率。默认是没10ms刷新一次
}

//定义所有与动画有关的时间,时长,当前属性的值,目的属性值...
ValueAnimator{            
- int duration		   //时长	
- int startPropertyValue   //开始值
- int endPropertyValue 	   //结束值
- start()                    //调用后动画开始
- TimeInterpolator	   //插值器,属性值改变的方式(线性改变，加速改变，降速改变)
- TypeEvaluator              //估值器,包含方法，用来计算属性值
}

//开始
start(boolean playBackwards){
- addAnimationCallback-->getAnimationHandler().addAnimationFrameCallback(this)//加入脉冲回调
- startAnimation
}@ValueAnimator.java

//结束animator
endAnimation{
- removeAnimationCallback-->getAnimationHandler().removeCallback(this) //从脉冲回调中移除
- notifyStartListeners
}@ValueAnimator.java


frameworks/base/core/java/android/animation/ValueAnimator.java
frameworks/base/core/java/android/animation/AnimationHandler.java
3/*
  frame-by-frame animation:帧动画
*/




/*
  view.animation

  AlphaAnimation, AnimationSet, RotateAnimation, ScaleAnimation, TranslateAnimation

*/
Transformation{
- mAlpha   //透明值
- mMatrix  //位置,大小
}@Transformation.java

//获取当前时间点的变化
getTransformation(long currentTime, Transformation outTransformation){
- mStartTime = currentTime //记录开始时间
- startOffset = getStartOffset()
- duration = mDuration
- normalizedTime = ((float) (currentTime - (mStartTime + startOffset))) /(float) duration//当前动画执行的进程比例
  //当前插值器,计算当前的变化值
- float interpolatedTime = mInterpolator.getInterpolation(normalizedTime)
- applyTransformation(interpolatedTime, outTransformation){
	- 
	}
  //判断动画是否结束,或者重复
- fireAnimationEnd/fireAnimationRepeat 
- return mMore //是否还要执行
}@Animation.java



frameworks/base/core/java/android/view/animation/Animation.java
frameworks/base/graphics/java/android/graphics/drawable/AnimationDrawable.java

