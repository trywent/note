/******************************
 windowsState 位置 大小

 和应用进程中view交互：
 ISession mSession  Session
 IWindow mClient    ViewRootImpl中的Window

 窗口属性：
 mShownPosition 窗口位置。屏幕坐标
 mVisibleInsets 决定可见区域的inset。窗口坐标
 mContentInsets 被systmui,输入法遮蔽区域的inset位置。窗口坐标
 mOverscanInsets  显示屏overscan区域inset。窗口坐标
 mOutsets     surface之外的区域。应用还是可以绘制

*/
WindowState(WindowManagerService service, Session s, IWindow c, WindowToken token,
           WindowState parentWindow, int appOp, int seq, WindowManager.LayoutParams a){
- mService = service;
- mSession = s 	//ViewRootImpl中Isession
- mClient = c 	//ViewRootImpl中Window
- mToken = token
- mAppToken = mToken.asAppWindowToken()
- if(SUB_WINDOW){
	- mBaseLayer = mPolicy.getWindowLayerLw(parentWindow) * TYPE_LAYER_MULTIPLIER + TYPE_LAYER_OFFSET
	- mSubLayer = mPolicy.getSubWindowLayerFromTypeLw(a.type)
  }else{
	- mBaseLayer = mPolicy.getWindowLayerLw(this) * TYPE_LAYER_MULTIPLIER + TYPE_LAYER_OFFSET
  }
- mWinAnimator = new WindowStateAnimator(this) //窗口surface
- mInputWindowHandle = new InputWindowHandle
}

/*计算窗口大小  task  --- (performLayout)window --- (relayout布局)windowStateAnimator --- surfactControler

 view的大小
*/
computeFrameLw(Rect parentFrame, Rect displayFrame, Rect overscanFrame,
            Rect contentFrame, Rect visibleFrame, Rect decorFrame, Rect stableFrame,
            Rect outsetFrame){
- Task task = getTask()
- boolean inFullscreenContainer = inFullscreenContainer{
	- if(mAppToken == null)return true
	- return !isInMultiWindowMode-->task.isFullscreen
	}
- inFullscreenContainer{
	- mContainingFrame.set(parentFrame)
  }else{
	- getContainerBounds(mContainingFrame){
		- if(isInMultiWindowMode),getTask().getBounds(outBounds) //返回窗口所在task大小
		- else,mAppToken.getBounds(outBounds) 			 //否则返回窗口大小
		}
	- mDisplayFrame.set(mContainingFrame)
  }
- 
}@WindowState.java

//设置是否可见，并通知应用。应用中的可见状态比较超前，实际还有动画过程？
setVisibility@AppWindowContainerController.java-->setVisibility@AppWindowToken.java-->
sendAppVisibilityToClients@WindowToken.java-->
sendAppVisibilityToClients{
- super.sendAppVisibilityToClients()
- boolean clientHidden = mAppToken.isClientHidden()
- mClient.dispatchAppVisibility(!clientHidden)-->dispatchAppVisibility@ViewRootImpl.java
}@WindowState.java


onAppVisibilityChanged

//窗口发生变化,加入mResizingWindows
mApplySurfaceChangesTransaction@DisplayContent.java-->
updateResizingWindowIfNeeded{
  //判断last和当前值是否变化
- setReportResizeHints{
	- mOverscanInsetsChanged
	- mContentInsetsChanged
	}
- boolean configChanged = isConfigChanged()
- boolean dragResizingChanged = isDragResizeChanged()
  //inset,大小发生变化
- if(mContentInsetsChanged|| winAnimator.mSurfaceResized||mFrameSizeChanged){
	  //保存当前值last
	- updateLastInsetValues{
		- mLastContentInsets.set(mContentInsets)
		- mLastVisibleInsets.set(mVisibleInsets)
		}
	- mService.mResizingWindows.add(this) //加入resizing中
	}
}@WindowState.java

//通知应用窗口发生变化
handleResizingWindows-->win.reportResized()@RootWindowContainer.java-->
reportResized-->dispatchResized-->mClient.resized(frame)@WindowState.java

//销毁
destroySurface(boolean cleanupOnResume, boolean appStopped){
- 
}
