/*
多窗口模式下activity的生命周期:
只有当前操作的activity时RESUMED状态,其它可见的activity是STARTED状态


使能应用支持多窗口:
android:resizeableActivity=["true" | "false"]
android:supportsPictureInPicture=["true" | "false"]

*/


/******************************
 split-screen

*/
public void resizeStack(int stackId, Rect destBounds)
public void resizeDockedStack(Rect dockedBounds)
public void resizePinnedStack(Rect pinnedBounds)


/******************************
 PIP(picture in picture)
 PINNED_STACK_ID

 sys.lsec.force_pip
 (64.0,116.0) 520.0 x 320.0

setprop sys.lsec.pip_rect "80 120 580 420"

*/
PinnedStackController-->
reloadResources{
- mCurrentMinSize = mDefaultMinSize = 108
- mDefaultAspectRatio = 1.777778
- screenEdgeInsetsDp = {16,16}
}

PipSnapAlgorithm{
- mMinimizedVisibleSize = 48
- mDefaultSizePercent = 0.23 //占屏幕的比例,不会少于mDefaultMinSize
- mMaxAspectRatioForMinSize = 1.777778
}
//应用
ActivityOptions.setLaunchBounds() //设置应用启动窗口范围

getOverrideBounds-->TaskRecord.validateBounds(options.getLaunchBounds())@ActivityStarter.java
-->

R.attr.supportsPictureInPicture = true


Activity{
- isInMultiWindowMode()
- isInPictureInPictureMode
- enterPictureInPictureMode
- onMultiWindowModeChanged()
- onPictureInPictureModeChanged
}
//
enterPictureInPictureMode-->enterPictureInPictureMode(new PictureInPictureParams.Builder().build()
-->enterPictureInPictureMode{
- deviceSupportsPictureInPictureMode--> //检查是否支持pip模式
	getPackageManager().hasSystemFeature(PackageManager.FEATURE_PICTURE_IN_PICTURE)
- ActivityManagerNative.getDefault().enterPictureInPictureMode(mToken, params)
}@Activity.java

enterPictureInPictureMode(IBinder token,final PictureInPictureParams params){
- ActivityRecord r = ensureValidPictureInPictureActivityParamsLocked{ //检查是否支持pip
	- ActivityRecord r = ActivityRecord.forTokenLocked(token)
	- mSupportsPictureInPicture //系统是否支持
	- r.supportsPictureInPicture() //activity是否支持
	- params.truncateActions
	}
- isInPictureInPictureMode(r) //是否已经在pip模式
- enterPipRunnable{ //进入pip
	- float aspectRatio = r.pictureInPictureArgs.getAspectRatio()
	- Rect sourceBounds = new Rect(getSourceRectHint) //计算大小
	- mStackSupervisor.moveActivityToPinnedStackLocked(r, sourceBounds)//移动activity到PINNED_STACK
	- PinnedActivityStack stack = mStackSupervisor.getStack(PINNED_STACK_ID) //pinned stack
	- stack.setPictureInPictureAspectRatio(aspectRatio)
	- stack.setPictureInPictureActions(actions)
	}
- enterPipRunnable.run()
}@ActivityManagerService.java

//移动到pinnedStack
moveActivityToPinnedStackLocked(ActivityRecord r, Rect sourceHintBounds, float aspectRatio){
- PinnedActivityStack stack = getStack(PINNED_STACK_ID)
- TaskRecord task = r.getTask() //activity所在task
- resizeStackLocked(PINNED_STACK_ID, task.mBounds){ //先将stack设置为应用当前task大小...
	- stack = getStack(PINNED_STACK_ID)
	- stack.resize(bounds)
	}
- task.mActivities.size() == 1{//task中只有一个activity,直接移动到pinStack
	- task.reparent(PINNED_STACK_ID)
	}
- task.mActivities.size() != 1{//不止一个activity,创建新task再移动
	- TaskRecord newTask = task.getStack().createTaskRecord)
	- newTask.reparent(PINNED_STACK_ID)
	}
- Rect destBounds = stack.getDefaultPictureInPictureBounds(aspectRatio)//获取默认位置
- stack.animateResizePinnedStack(sourceHintBounds, destBounds) //开始缩变动画
- ensureActivitiesVisibleLocked
- resumeFocusedStackTopActivityLocked
}@ActivityStackSupervisor.java


//获取窗口位置大小
getDefaultPictureInPictureBounds@PinnedActivityStack.java-->getWindowContainerController().getPictureInPictureBounds
-->getPictureInPictureBounds(float aspectRatio, Rect stackBounds){
- displayContent = mContainer.getDisplayContent
- pinnedStackController = displayContent.getPinnedStackController()
- Rect stackBounds = pinnedStackController.getDefaultBounds() //stackBounds为空,获取默认大小
	-->getDefaultBounds{
	- getInsetBounds(insetBounds){//根据insetBounds计算默认值
		- mService.mPolicy.getStableInsetsLw(mTmpInsets) //获取去掉systemui的inset
		}
	- Size size = mSnapAlgorithm.getSizeForAspectRatio(aspectRatio,minEdgeSize){
		
		}
	- Gravity.apply(defaultBounds)
	}@PinnedStackController.java
- pinnedStackController.transformBoundsToAspectRatio
- return stackBounds
}@PinnedStackWindowController.java



setPictureInPictureAspectRatio-->getWindowContainerController().setPictureInPictureAspectRatio@ActivityManagerService.java
-->setPictureInPictureAspectRatio{

}@PinnedStackWindowController.java

setPictureInPictureActions-->getWindowContainerController().setPictureInPictureActions@ActivityManagerService.java
-->setPictureInPictureActions{

}@PinnedStackWindowController.java

//窗口变化
notifyMovementBoundsChanged

//更新状态
scheduleUpdatePictureInPictureModeIfNeeded@ActivityStackSupervisor.java-->
updatePictureInPictureMode-->schedulePictureInPictureModeChanged@ActivityRecord.java-->
schedulePictureInPictureModeChanged-->handlePictureInPictureModeChanged@ActivityThread.java
-->dispatchPictureInPictureModeChanged-->onPictureInPictureModeChanged@Activity.java

//systemui退出pip



frameworks/base/core/java/android/app/Activity.java
frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java
frameworks/base/services/core/java/com/android/server/am/ActivityStarter.java
frameworks/base/core/java/android/app/PictureInPictureParams.java
frameworks/base/services/core/java/com/android/server/am/PinnedActivityStack.java
frameworks/base/services/core/java/com/android/server/wm/PinnedStackWindowController.java
frameworks/base/services/core/java/com/android/server/wm/PinnedStackController.java

frameworks/base/packages/SystemUI/src/com/android/systemui/pip/phone/PipTouchHandler.java
frameworks/base/packages/SystemUI/src/com/android/systemui/pip/phone/PipMenuActivityController.java
frameworks/base/packages/SystemUI/src/com/android/systemui/pip/phone/PipMenuActivity.java
/******************************
窗口大小由task决定...其它stack中由stack决定
 FREEFORM_WORKSPACE_STACK_ID

*/

