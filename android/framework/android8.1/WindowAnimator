/**********************
 WindowAnimator
*/

WindowManagerService-->WindowAnimator mAnimator = new WindowAnimator(this)-->
WindowAnimator(WindowManagerService service){
- mService = service
  //新建线程ServiceThread,执行run(阻塞等待直到返回).设置mChoreographer
- AnimationThread.getHandler().runWithScissors(() -> mChoreographer = Choreographer.getSfInstance())
- mAnimationFrameCallback = frameTimeNs -> {
            animate(frameTimeNs);
        }
}@WindowAnimator.java

//
ScreenRotationAnimation getScreenRotationAnimationLocked-->
getDisplayContentsAnimatorLocked(int displayId){
- DisplayContentsAnimator displayAnimator = mDisplayContentsAnimators.get(displayId)
- displayAnimator == null{
	- displayAnimator = new DisplayContentsAnimator()
	- mDisplayContentsAnimators.put(displayId, displayAnimator)
	}
}@WindowAnimator.java

setScreenRotationAnimationLocked(ScreenRotationAnimation animation){
- DisplayContentsAnimator animator = getDisplayContentsAnimatorLocked(displayId)
- animator.mScreenRotationAnimation = animation
}

//执行动画
scheduleAnimationLocked@WindowManagerService.java-->
scheduleAnimation-->mChoreographer.postFrameCallback(mAnimationFrameCallback)-->
animate(frameTimeNs){
- 
- mService.openSurfaceTransaction()
//遍历所有dispaly
- dc.stepAppWindowsAnimation(mCurrentTime){//所有WindowContainer执行
	- stepAppWindowsAnimation 
	}
  //旋转动画
- ScreenRotationAnimation screenRotationAnimation = displayAnimator.mScreenRotationAnimation
- screenRotationAnimation.stepAnimationLocked
  //遍历所有窗口执行动画
- dc.updateWindowsForAnimator-->forAllWindows(mUpdateWindowsForAnimator)-->
	mUpdateWindowsForAnimator(WindowState w){//遍历所有窗口
	- WindowStateAnimator winAnimator = w.mWinAnimator
	- winAnimator.stepAnimationLocked //动画步进
	- w.performShowLocked() //窗口显示
	}@DisplayContent.java
- dc.updateWallpaperForAnimator
- dc.prepareWindowSurfaces-->forAllWindows(mPrepareWindowSurfaces, false)-->
	w -> w.mWinAnimator.prepareSurfaceLocked(true)@DisplayContents.java-->
	prepareSurfaceLocked@WindowStateAnimator.java
//遍历所有dispaly
- mService.closeSurfaceTransaction()

}@WindowAnimator.java



frameworks/base/services/core/java/com/android/server/wm/WindowAnimator.java
frameworks/base/services/core/java/com/android/server/AnimationThread.java
frameworks/base/services/core/java/com/android/server/wm/ScreenRotationAnimation.java
frameworks/base/services/core/java/com/android/server/wm/DisplayContent.java
frameworks/base/services/core/java/com/android/server/wm/WindowStateAnimator.java
/**********************
 stack animation
*/
BoundsAnimator.onAnimationEnd@BoundsAnimationController.java-->
onAnimationEnd-->mService.mActivityManager.moveTasksToFullscreenStack@TaskStack.java
-->moveTasksToFullscreenStack@ActivityManagerService.java

animateResizePinnedStack-->getWindowContainerController().animateResizePinnedStack@PinnedActivityStack.java
animateResizePinnedStack-->mService.mBoundsAnimationController.getHandler().post-->
mService.mBoundsAnimationController.animateBounds@PinnedStackWindowController.java




animateBounds-->animateBoundsImpl{
- BoundsAnimator animator = new BoundsAnimator(target, from, to)
- mRunningAnimations.put(target, animator)
 //设置并开始
- animator.setFloatValues(
- animator.setDuration
- animator.setInterpolator(mFastOutSlowInInterpolator)
- animator.start()
}@BoundsAnimationController.java


animateBoundsImpl-->BoundsAnimator.onAnimationStart@BoundsAnimationController.java
-->setPinnedStackSize@TaskStack.java


frameworks/base/services/core/java/com/android/server/am/PinnedActivityStack.java
frameworks/base/services/core/java/com/android/server/wm/PinnedStackWindowController.java
frameworks/base/services/core/java/com/android/server/wm/BoundsAnimationController.java
frameworks/base/services/core/java/com/android/server/wm/TaskStack.java


updateDrawnWindowStates@AppWindowToken.java



frameworks/base/services/core/java/com/android/server/wm/AppWindowToken.java
