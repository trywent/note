/******************************
 WindowStateAnimator
  
   
*/
WindowState-->WindowStateAnimator(WindowState win){//windowState中创建
- WindowManagerService mService = win.mService
- mWin = win
}@WindowStateAnimator.java


//创建 WindowSurfaceController surfaceControl
relayoutWindow-->
createSurfaceControl(Surface outSurface, int result, WindowState win,WindowStateAnimator winAnimator)@WindowManagerService.java-->
createSurfaceLocked(windowType){
  //WindowSurfaceController surfacecontroller
- mSurfaceController = new WindowSurfaceController(mSession.mSurfaceSession,width, height){
	- mSurfaceW = w
	- mSurfaceH = h
	- mSurfaceControl = new SurfaceControlWithBackground{
		- super-->new SurfaceControl
		- mBackgroundControl = new SurfaceControl(s, "Background for")
		}
	}
- w.setHasSurface(true)
 //surface位置
- mService.openSurfaceTransaction()
- mSurfaceController.setPositionInTransaction
- mSurfaceController.setLayerStackInTransaction
- mSurfaceController.setLayer(mAnimLayer)
- mService.closeSurfaceTransaction()
}@WindowStateAnimator.java



/*
 surfaceInsets 会影响实际窗口大小
*/

setSurfaceBoundariesLocked{
 //设置mTmpSize原点,再设置大小
- mTmpSize.set(w.mShownPosition.x, w.mShownPosition.y, 0, 0)
- calculateSurfaceBounds(attr){
	- mTmpSize.right,mTmpSize.bottom
	- 根据surfaceInsets调整mTmpSize
	}
- mSurfaceController.setSizeInTransaction //设置大小
  //是否裁剪
- calculateCrop(mTmpClipRect){
	- w.inPinnedWorkspace(),pinstack中返回
	  //根据surfaceinset调整大小
	- adjustCropToStackBounds{
		- Rect surfaceInsets = w.getAttrs().surfaceInsets
		}
	}
- calculateFinalCrop(mTmpFinalClipRect){
	- 
	}
- isForceScaled(){
	- mSurfaceController.setPositionInTransaction //设置位置
	}
}@WindowStateAnimator.java

calculateSurfaceBounds
//销毁
destroySurfaces-->win.destroySurface@AppWindowToken.java-->destroySurface@WindowState.java-->
destroyPreservedSurfaceLocked-->destroyDeferredSurfaceLocked

destroySurfaceLocked{
- if(mSurfaceDestroyDeferred){
	- mPendingDestroySurface.destroyInTransaction
  }else{
	- destroySurface-->mSurfaceController.destroyInTransaction()
	}
- mWin.setHasSurface(false)
}@WindowStateAnimator.java

 

/*
  窗口动画：显示，隐藏

  AppWindowAnimator应用切换的效果也是在这里获取，并作用到窗口上
*/
//窗口的状态类型
TRANSIT_ENTER = 1
TRANSIT_EXIT = 2
TRANSIT_SHOW = 3
TRANSIT_HIDE = 4
TRANSIT_PREVIEW_DONE = 5
@WindowManagerPolicy.java
//statusbar,navibar,dockdivider，starting 系统窗口动画
R.anim.dock_top_exit
R.anim.dock_top_enter
R.anim.dock_bottom_exit_keyguard
R.anim.dock_bottom_exit
R.anim.dock_bottom_enter
R.anim.dock_right_exit
R.anim.dock_right_enter
R.anim.dock_left_exit
R.anim.dock_left_enter
com.android.internal.R.anim.app_starting_exit

//普通窗口动画
com.android.internal.R.styleable.WindowAnimation_windowEnterAnimation
com.android.internal.R.styleable.WindowAnimation_windowExitAnimation
com.android.internal.R.styleable.WindowAnimation_windowShowAnimation
com.android.internal.R.styleable.WindowAnimation_windowHideAnimation

//设置动画
setAnimation(Animation anim, long startTime, int stackClip){
- mAnimation = anim
- mAnimation.restrictDuration(WindowManagerService.MAX_ANIMATION_DURATION)
- mAnimation.scaleCurrentDuration(mService.getWindowAnimationScaleLocked())
  //
- mTransformation.clear()
- mTransformation.setAlpha(mLastHidden ? 0 : 1)
}@WindowStateAnimator.java

//设置窗口动画
showLw/hideLw-->mWinAnimator.applyAnimationLocked@WindowState.java-->
applyAnimationLocked(int transit, boolean isEntrance) {
  //系统窗口的动画，statusbar,navibar,dockdivider
- int anim = mPolicy.selectAnimationLw(mWin, transit)
  //普通窗口的动画
- if (anim != 0) {
	- Animation a = anim != -1 ? AnimationUtils.loadAnimation(mContext, anim) : null
  }else{
	- int attr = com.android.internal.R.styleable.WindowAnimation_windowEnterAnimation	//加载对应的动画
	- Animation a = mService.mAppTransition.loadAnimationAttr(mWin.mAttrs, attr)
  }
- setAnimation(a)
- 
}@WindowStateAnimator.java

//动画执行,获取mTransformation
animate-->dc.updateWindowsForAnimator@WindowAnimator.java-->updateWindowsForAnimator(WindowAnimator animator)
-->forAllWindows(mUpdateWindowsForAnimator, true)-->winAnimator.stepAnimationLocked@DisplayContent.java-->
stepAnimationLocked(long currentTime){
- if (!mLocalAnimating) {				//第一次初始化animation
	- mAnimation.initialize
	- mAnimation.setStartTime
	- mLocalAnimating = true
	- mAnimating = true
	}
- stepAnimation(currentTime){
	- currentTime = getAnimationFrameTime(mAnimation, currentTime)
	- mTransformation.clear()
	- boolean more = mAnimation.getTransformation(currentTime, mTransformation)
	}
- if(stepAnimation)return true 				//动画没有执行完成
 //动画执行完成
- mAnimating = false
- mAnimation = null
- mTransformation.clear()
- mWin.onExitAnimationDone()
- mAnimator.setPendingLayoutChanges
- mWin.mAppToken.updateReportedVisibilityLocked()	//通知appToken-->ActivityRecord
}@WindowStateAnimator.java


//将动画结果WindowStateAnimator.mTransformation 和AppWindoWAnimator.transformation作用到窗口
animate-->dc.prepareWindowSurfaces-->forAllWindows(mPrepareWindowSurfaces, false)@WindowAnimator.java-->
prepareSurfaceLocked(final boolean recoveringMemory){
- 
- computeShownFrameLocked
- setSurfaceBoundariesLocked(recoveringMemory)
  //
- if (mIsWallpaper && !mWin.mWallpaperVisible) {
	- hide("prepareSurfaceLocked")		//是壁纸且不可见
  }else if(w.isParentWindowHidden() || !w.isOnScreen()){
	- hide("prepareSurfaceLocked")
  }else if(mLastLayer != mAnimLayer||mLastAlpha != mShownAlpha|| mLastDtDy != mDtDy
                || w.mLastHScale != w.mHScale){	//可见状态，层次，大小，位置发生变化
	- boolean prepared = mSurfaceController.prepareToShowInTransaction(mShownAlpha...)
	- mSurfaceController.setLayer(mAnimLayer)
	- if(showSurfaceRobustlyLocked()){	//显示窗口
		- 
		}
  }
}@WindowStateAnimator.java

computeShownFrameLocked() {
- Transformation attachedTransformation = mParentWinAnimator.mTransformation
- Transformation appTransformation = mAppAnimator.transformation	//AppWindoWAnimator的动画结果
- mShownAlpha *= mTransformation.getAlpha()				//当前窗口动画结果
}@WindowStateAnimator.java


/* WindowSurfaceController控制surface
   设置窗口可见状态，位置，大小，层次
*/

showSurfaceRobustlyLocked-->mSurfaceController.showRobustlyInTransaction@WindowStateAnimator.java-->
showRobustlyInTransaction{
- mHiddenForOtherReasons = false
- updateVisibility(){
	- if (mHiddenForCrop || mHiddenForOtherReasons) {
		- hideSurface
	  }else{
		- showSurface()	
	  }
	}
}@WindowSurfaceController.java

frameworks/base/services/core/java/com/android/server/wm/WindowStateAnimator.java
frameworks/base/services/core/java/com/android/server/wm/WindowSurfaceController.java
