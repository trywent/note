/*=========================
 ActivityManagerService----WindowManagerService

 ActvityManager提供设置栈大小接口

 Activity中Activitystack,taskRecord,ActivityRecord{
    WindowContainerController{//stack,task,app
       WindowContainer
	}
   }

 ConfigurationContainer管理Activity中configuration
 windowContainer管理window中configuration
*/

//activity对应窗口管理
 ActivityStack{
	- StackWindowController{
		- TaskStack
		}
	}

 TaskRecord{
	- TaskWindowContainerController{
		- Task
		}
	}

 ActivityRecord{
	- AppWindowContainerController{
		- AppWindowToken
		}
	}

//configuration
ActivityDisplay,ActivityStack,TaskRecord,ActivityRecords extends ConfigurationContainer{}
ActivityStackSupervisor{//结构
  //SparseArray<ActivityDisplay> mActivityDisplays
- ActivityDisplay{        
  //ArrayList<ActivityStack> mStacks
  - ActivityStack{  
	//ArrayList<TaskRecord> mTaskHistory        
	- TaskRecord {  
		//ArrayList<ActivityRecord> mActivities  
		- ActivityRecords {
			- mWindowContainerController
			}
		- mWindowContainerController
		}
	- mWindowContainerController
	}
}
}

ConfigurationContainer{
- Configuration mOverrideConfiguration 	//当前容器的override
- Configuration mFullConfiguration     	//当前容器的完整配置.父容器的mFullConfiguration合并当前mOverrideConfiguration
- Configuration mMergedOverrideConfiguration  //父容器的mMergedOverrideConfiguration,合并当前mOverrideConfiguration
- getConfiguration
- onConfigurationChanged{
	- mFullConfiguration.setTo(newParentConfig)
	- mFullConfiguration.updateFrom(mOverrideConfiguration)
 	- child.onConfigurationChanged
	}
- onOverrideConfigurationChanged{
	- mOverrideConfiguration.setTo(overrideConfiguration)
	- onConfigurationChanged
	- onMergedOverrideConfigurationChanged
	}
- onParentChanged{
	- 
	}
}@ConfigurationContainer.java

----------- 1
/******************************
 ActivityDisplay
*/

----------- 2
/******************************
 ActivityStack ---- TaskStack
 stack中包含窗口管理器 StackWindowController mWindowContainerController
*/
getStack-->createStackOnDisplay-->createStack{//创建Activitystack
- PINNED_STACK_ID:new PinnedActivityStack-->super(){
		- createStackWindowController-->new PinnedStackWindowController
		}
- new ActivityStack{
	- mWindowContainerController = createStackWindowController-->new StackWindowController
	}@ActivityStack.java
}@ActivityStackSupervisor.java

positionChildAt(TaskRecord,index){
- TaskRecord.updateOverrideConfiguration-->updateOverrideConfiguration@TaskRecord.java
- insertTaskAtPosition(task, index)
}@ActivityStack.java

//改变大小
resize(Rect bounds)-->setBounds(bounds)


----------- 3
/******************************
 TaskRecord   ---- Task
 包含窗口管理器TaskWindowContainerController mWindowContainerController
*/
setTaskToCurrentTopOrCreateNewTask--> mTargetStack.createTaskRecord@ActivityStarter.java
-->createTaskRecord{
- TaskRecord task = new TaskRecord
- addTask{
	- mTaskHistory.add(position, task)
	- task.setStack(this)
	}
- task.createWindowContainer{
	- Rect bounds = updateOverrideConfigurationFromLaunchBounds()	//获取大小getLaunchBounds-->mStack.mBounds 
	- controller = TaskWindowContainerController(taskId, this, getStack().getWindowContainerController())
	- setWindowContainerController(controller){
		- mWindowContainerController = controller
		}
	}@TaskRecord
}@ActivityStack.java


resize(Rect bounds, int resizeMode, boolean preserveWindow, boolean deferResume){
- updateOverrideConfiguration(bounds) //更新configuration中大小
 //更新当前task最上activity的配置
- ActivityRecord r = topRunningActivityLocked()
- kept = mService.mStackSupervisor.ensureActivitiesVisibleLocked(r
- kept,mService.mStackSupervisor.resumeFocusedStackTopActivityLocked
 //controler更新大小
- mWindowContainerController.resize(mBounds) 
}@TaskRecord.java

updateOverrideConfiguration(Rect bounds){
- Configuration newConfig = getOverrideConfiguration
- mFullscreen = bounds == null //是否设置全屏
- if(mFullscreen){
	- mLastNonFullscreenBounds = mBounds //当前是全屏,原来非全屏..记录原来值
	- mBounds = null
  }else{
	-
	- computeOverrideConfiguration(newConfig){//使用controller调整configuration
		- StackWindowController stackController = mStack.getWindowContainerController()
		- stackController.adjustConfigurationForBounds(bounds)
		}
	}
  //更新configuration
- onOverrideConfigurationChanged(newConfig){
	- onConfigurationChanged(newParentConfig){
		- mFullConfiguration.setTo(newParentConfig)
		- child = getChildAt(i) //ActivityRecord
		- child.onConfigurationChanged-->onConfigurationChanged@ActivityRecord.java
		}
	- onMergedOverrideConfigurationChanged
	}@ConfigurationContainer.java
  //大小发生变化
- mService.mStackSupervisor.scheduleUpdateMultiWindowMode 
}@TaskRecord.java


----------- 4
/******************************
 ActivityRecord  ---- AppWindowToken

 窗口管理器 AppWindowContainerController mWindowContainerController
*/
ActivityRecord{
- MergedConfiguration mLastReportedConfiguration
}

startActivityLocked-->r.createWindowContainer@ActivityStack.java-->
createWindowContainer{
- TaskWindowContainerController taskController = task.getWindowContainerController()
- updateOverrideConfiguration
- mWindowContainerController = new AppWindowContainerController(taskController,appToken)//关联window
}@ActivityRecord.java


ensureActivityConfigurationLocked-->
updateOverrideConfiguration{
- computeBounds(mTmpBounds)
- onOverrideConfigurationChanged(mTmpBounds){
	- task.computeOverrideConfiguration
	- onOverrideConfigurationChanged-->mWindowContainerController.onOverrideConfigurationChanged //设置Windows端
	}
- Configuration newMergedOverrideConfig = getMergedOverrideConfiguration()
- setLastReportedConfiguration(newMergedOverrideConfig)
}@AcvitiyRecord.java


//显示隐藏窗口
setVisibility



frameworks/base/services/core/java/com/android/server/am/ActivityStarter.java
frameworks/base/services/core/java/com/android/server/am/ActivityStack.java
frameworks/base/services/core/java/com/android/server/am/TaskRecord.java
frameworks/base/services/core/java/com/android/server/wm/AppWindowContainerController.java
frameworks/base/services/core/java/com/android/server/wm/AppWindowToken.java
frameworks/base/services/core/java/com/android/server/am/ConfigurationContainer.java
====== 1
/*=========================
 windowManager

TaskStack extends WindowContainer{
- Task extends WindowContainer{
  - AppWindowToken extends WindoToken extends WindowContainer{
	- windowState
	}
  }
}

 窗口宽高比默认改为0.DEFAULT_PRE_O_MAX_ASPECT_RATIO=1.86@PackageParser.java
*/
 
WindowContainerController{//控制器
- void setContainer(E container)
- removeContainer()
}@WindowContainerController.java

StackWindowController, TaskWindowContainerController, AppWindowContainerController extends WindowContainerController{
- mContainer 是一个WindowContainer
}

/*
 容器.可以更新所有子节点的configuration,bounds

*/
WindowContainer{
- WindowList<E> mChildren = new WindowList<E>() //child
- mOverrideConfiguration          //当前容器的配置,每个容器的大小可能不一样
- mFullConfiguration
- mMergedOverrideConfiguration
- addChild(child){
	- mChildren.add
	- child.setParent-->onParentSet
	}
- onConfigurationChanged{
	- mFullConfiguration.setTo
	- 遍历child,更新child.onConfigurationChanged
	}
- onOverrideConfigurationChanged {//更新配置,包括所有child都会更新
	- onConfigurationChanged
	- onMergedOverrideConfigurationChanged	
	}
- onMergedOverrideConfigurationChanged{
	- mMergedOverrideConfiguration
	- 遍历child,更新child.mMergedOverrideConfiguration
	}
}@WindowContainer.java

DisplayContent,TaskStack,Task,AppWindowToken extends WindowContainer{}
DisplayContent {//容器结构
- TaskStack{
	- Task{
		-AppWindowToken{
		}
	}
}
}

setController-->controller.setContainer(this)@WindowContainer.java-->mContainer = container
@WindowContainerController.java

----------- 1
/******************************
 displaycontent
*/

//更新配置
performDisplayOverrideConfigUpdate@ActivityManagerService.java-->setNewDisplayOverrideConfiguration@WindowManagerService.java
-->setDisplayOverrideConfigurationIfNeeded@RootWindowContainer.java-->displayContent.onOverrideConfigurationChanged

----------- 2
/******************************
 StackWindowController -- TaskStack
*/
StackWindowController(stackId){
- DisplayContent dc = mRoot.getDisplayContent(displayId) //mRoot为WindowManagerService
- TaskStack stack = dc.addStackToDisplay(stackId){
	- TaskStack stack = getStackById(stackId)
	- stack = new TaskStack(mService, stackId)
	- mTaskStackContainers.addStackToDisplay(stack){//加入到TaskStackContainers(所有应用窗口的归宿)
		- addChild(stack)
		- stack.onDisplayChanged(DisplayContent.this) //通知displayContent变化...通知到所有child
		}
	}@DisplayContent.java
- stack.setController(this) //设置controler ,container
}@StackWindowController.java

//调整窗口大小,
resize(Rect bounds, SparseArray<Configuration> configs)-->mContainer.setBounds@StackWindowController.java-->
setBounds(Rect stackBounds, SparseArray<Configuration> configs){
- setBounds(stackBounds)
  //遍历task设置大小
- task.resizeLocked
}@TaskStack.java

//ActivityManager中TaskRecord,更新configuration
computeOverrideConfiguration@TaskRecord.java-->
adjustConfigurationForBounds(Rect bounds,Configuration config){
- 
- config.screenWidthDp = width
- config.screenHeightDp = height
- config.smallestScreenWidthDp = getSmallestWidthForTaskBounds()
}@StackWindowController.java



----------- 3
/******************************
 TaskWindowContainerController --Task
*/
TaskWindowContainerController{
- TaskStack stack = stackController.mContainer
- Task task = createTask-->new Task(this,bounds){
	- setController(controller)//设置controler ,container
	- setBounds
	}
- stack.addTask(task)-->addChild
}@TaskWindowContainerController.java

//管理栈大小,栈动画
TaskStack extends WindowContainer<Task> implements DimLayer.DimLayerUser,
        BoundsAnimationTarget{
  //栈大小变化动画
- onAnimationStart
- onAnimationEnd
- setPinnedStackSize
}

//当加入到Stack时被调用,默认大小
onParentSet{
- updateDisplayInfo(getDisplayContent()){
	- setBounds //若屏幕旋转后需要更新大小
	}
- forceWindowsScaleable
}@Task.java

//大小
resize-->mContainer.resizeLocked@TaskWindowContainerController.java-->
resizeLocked(Rect bounds, Configuration overrideConfig){
- int boundsChanged = setBounds(Rect bounds, Configuration overrideConfig){
	- boundsChange//位置大小是否发生变化
	- mBounds.set(bounds)
	- onOverrideConfigurationChanged(overrideConfig) //WindowContainer更新配置
	}
  //遍历更新child,
- boundsChanged发生变化,onResize-->wc.onResize()
}@Task.java

getBounds{
- if(useCurrentBounds()){//当条件满足:不能调整task大小的栈(能被docked调整task的为home,fullscreen)/Dodked栈存在
	- mBounds
	}
- mStack.getDisplayContent().getLogicalDisplayRect(out)
}@Task.java


----------- 4 
/******************************
 AppWindowContainerController -- AppWindowToken
 WindowManager在displayContent中mTokenMap直接管理窗口
 
*/
AppWindowToken

AppWindowContainerController(token/*ActivityRecord.appToken*/){
- IApplicationToken mToken = token
- AppWindowToken atoken = createAppWindow(token,task.getDisplayContent())-->new AppWindowToken{
	- super()-->WindowToken(WindowManagerService service, IBinder _token){
		- token = _token
		- onDisplayChanged(dc)-->dc.reParentWindowToken(this) //加入到DisplayContent
		}@WindowToken.java
	- setController(controller)//设置controler ,container
	}@AppWindowToken.java
- task.addChild(atoken,index) //加入到task
}@AppWindowContainerController.java

onOverrideConfigurationChanged@ActivityReocrd.java-->onOverrideConfigurationChanged@WindowContainer.java

setBounds-->updateAdjustedBounds
onOverrideConfigurationChanged-->onConfigurationChanged@WindowContainer.java


frameworks/base/services/core/java/com/android/server/wm/RootWindowContainer.java
frameworks/base/services/core/java/com/android/server/wm/StackWindowController.java
frameworks/base/services/core/java/com/android/server/wm/TaskWindowContainerController.java
frameworks/base/services/core/java/com/android/server/wm/DisplayContent.java
frameworks/base/services/core/java/com/android/server/wm/WindowContainer.java
frameworks/base/services/core/java/com/android/server/wm/WindowContainerController.java
frameworks/base/services/core/java/com/android/server/wm/Task.java
frameworks/base/services/core/java/com/android/server/am/ConfigurationContainer.java

====== 2
/*======================
 configuration

 ActivityDisplay,ActivityStack,TaskRecord,ActivityRecords extends ConfigurationContainer
*/
MergedConfiguration{
- Configuration mGlobalConfig
- Configuration mOverrideConfig
- Configuration mMergedConfig
}

 //activityManager中配置


 //用户操作更新
updateConfigurationLocked-->updateGlobalConfiguration 

 //windowmanager更新
updateDisplayOverrideConfigurationLocked-->performDisplayOverrideConfigUpdate-->
updateDisplayOverrideConfiguration@ActivityManagerService.java-->setDisplayOverrideConfiguration-->
activityDisplay.onOverrideConfigurationChanged@ActivityStackSupervisor.java//更新所有子容器

sendNewConfiguration-->mActivityManager.updateDisplayOverrideConfiguration@WindowManagerService.java-->
updateDisplayOverrideConfiguration{
- mWindowManager.computeNewConfiguration //计算配置
- updateDisplayOverrideConfigurationLocked{
	 //DEFAULT_DISPLAY
	- updateGlobalConfiguration{
		- mStackSupervisor.onConfigurationChanged //更新所有子容器
		- setDisplayOverrideConfiguration
		}
	 //!DEFAULT_DISPLAY
	- performDisplayOverrideConfigUpdate-->mStackSupervisor.setDisplayOverrideConfiguration
	}
}@ActivityManagerService.java


//windowManager配置



//应用配置变化
ensureActivityConfigurationLocked-->scheduleConfigurationChanged(newMergedOverrideConfig)@ActivityRecord.java-->
scheduleActivityConfigurationChanged(Configuration overrideConfig)-->

