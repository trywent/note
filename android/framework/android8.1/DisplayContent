/**********************
 RootWindowContainer
 

*/
RootWindowContainer(WindowManagerService service) {
- mService = service;
- mLayersController = new WindowLayersController(mService);
- mWallpaperController = new WallpaperController(mService);
}

getDisplayContentOrCreate-->
createDisplayContent{
- DisplayContent dc = new DisplayContent(display, mService, mLayersController,mWallpaperController)
  //设置displayInfo
- DisplayInfo displayInfo = dc.getDisplayInfo()
}

/**********************
  displayContent初始化.加入到root中
  displayContent包含4种Container
	mAboveAppWindowsContainers
	mTaskStackContainers //所有应用窗口容器
	mBelowAppWindowsContainers
	mImeWindowsContainers
*/

DisplayContent(WindowManagerService service){
- mLayersController = layersController //窗口layer设置
- mDividerControllerLocked = new DockedStackDividerController
- mPinnedStackControllerLocked = new PinnedStackController
- mDimLayerController = new DimLayerController
- super.addChild(mAboveAppWindowsContainers)
- super.addChild(mTaskStackContainers) //应用窗口
- super.addChild(mBelowAppWindowsContainers)
- super.addChild(mImeWindowsContainers)
- mService.mRoot.addChild(this, null) //加入到mRoot
}@DisplayContent.java

//保存windowToken(对应ActivityRecord)
onDisplayChanged(dc)-->dc.reParentWindowToken@WindowToken.java-->reParentWindowToken-->
addWindowToken(IBinder binder, WindowToken token)-->mTokenMap.put(binder, token)@DisplayContent.java

/*更新displayInfo*/
updateDisplayInfo@DisplayContent.java-->updateDisplayInfo(bounds){
- mChildren.get(taskNdx).updateDisplayInfo{

	}@Task.java
- setBounds
}@TaskStack.java

/* layout设置窗口大小  */
performLayout(boolean initial, boolean updateInputWindows){
- mService.mPolicy.beginLayoutLw(isDefaultDisplay, dw, dh, mRotation)
- mService.mPolicy.getContentRectLw(mContentRect)
- forAllWindows(mPerformLayout, true)-->forAllWindows(callback){
	- ForAllWindowsConsumerWrapper wrapper = obtainConsumerWrapper(callback)
	- forAllWindows(wrapper){
		- mPerformLayout(windowState w){
			- w.prelayout()
			- mService.mPolicy.layoutWindowLw-->win.computeFrameLw@PhoneWindowManager.java// 计算窗口大小
		}
	}@WindowContainer.java
- forAllWindows(mPerformLayoutAttached, true ) //layout关联窗口
//更新input
- mService.mInputMonitor.layoutInputConsumers(dw, dh)
- mService.mInputMonitor.updateInputWindowsLw
- mService.mPolicy.finishLayoutLw
}

//遍历执行回调callback
forAllWindows(callback,traverseTopToBottom){
- applyInOrderWithImeWindows(callback)-->callback.apply(this)//没有子窗口
//有子窗口,
- forAllWindowTopToBottom(callback)-->callback.apply//从上至下
- forAllWindowBottomToTop //从下至上
}@WindowState.java

@DisplayContent.java


//设置窗口layer
assignWindowLayers-->mLayersController.assignWindowLayers(this)@DisplayContent.java-->
assignWindowLayers{
- dc.forAllWindows(mAssignWindowLayersConsumer)-->mAssignWindowLayersConsumer{ //设置所有窗口layer
	- mCurBaseLayer = mCurLayer = w.mBaseLayer //mBaseLayer=policy.getWindowLayerLw
	- assignAnimLayer(WindowState w, int layer){
		- w.mLayer = layer	
		- w.mWinAnimator.mAnimLayer = w.getAnimLayerAdjustment()
                	+ w.getSpecialWindowAnimLayerAdjustment //mLayer + specialAdjustment
		}
	- 
	}
- adjustSpecialWindows
}@WindowLayaersController.java




/*windowState*/
computeFrameLw{
- Task task = getTask()
- inFullscreenContainer = inFullscreenContainer()
- 设置mInsetFrame 
- if(inFullscreenContainer){
 	- mContainingFrame.set(parentFrame)
  }else{
	- getContainerBounds(mContainingFrame){
		- getTask().getBounds(outBounds) //多窗口模式isInMultiWindowMode
		- mAppToken.getBounds(outBounds) //其它
		}
	- mDisplayFrame.set(mContainingFrame)
	}
- mFrame
}



frameworks/base/services/core/java/com/android/server/wm/DisplayContent.java
frameworks/base/services/core/java/com/android/server/wm/WindowState.java
