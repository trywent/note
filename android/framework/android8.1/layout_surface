/**********************
 布局,surface管理

*/
WindowSurfacePlacer(WindowManagerService service) {
- mService = service
- mWallpaperControllerLocked = mService.mRoot.mWallpaperController
- mPerformSurfacePlacement = () -> {
         - performSurfacePlacement();
        }
}@WindowSurfacePlacer.java

requestTraversal-->mService.mAnimationHandler.post(mPerformSurfacePlacement)@WindowSurfacePlacer.java



performSurfacePlacement-->performSurfacePlacement(boolean force)-->
performSurfacePlacementLoop{
- if (!mService.mForceRemoves.isEmpty()){//移除窗口
	- boolean recoveringMemory = true
	- WindowState ws = mService.mForceRemoves.remove(0)
	- ws.removeImmediately()	
	}
  //执行surfacePlacement
- mService.mRoot.performSurfacePlacement(recoveringMemory)
  //需要布局,加入到WindowAnimator,脉冲时执行
- if (mService.mRoot.isLayoutNeeded()) {
	- requestTraversal-->mService.mAnimationHandler.post(mPerformSurfacePlacement)-->performSurfacePlacement
	- mService.mH.sendEmptyMessage(REPORT_WINDOWS_CHANGE)
	}
}@WindowSurfacePlacer.java


performSurfacePlacement(boolean recoveringMemory){
  1.//焦点窗口
- updateInputWindowsNeeded = mService.updateFocusedWindowLocked
  2.//布局
- mService.openSurfaceTransaction()
- applySurfaceChangesTransaction{
	- mService.mWatermark.positionSurface//设置水印,安全模式...显示位置
	- 遍历DisplayContent,dc.applySurfaceChangesTransaction
	- mService.mDisplayManagerInternal.performTraversalInTransactionFromWindowManager
	}
- mService.closeSurfaceTransaction
  //应用切换
- WindowSurfacePlacer surfacePlacer = mService.mWindowPlacerLocked
- surfacePlacer.handleAppTransitionReadyLocked
  //
- handleResizingWindows()
 //销毁不可见窗口
- 遍历,mService.mDestroySurface
- WindowState win = mService.mDestroySurface.get(i)
- win.destroyOrSaveSurfaceUnchecked
}@RootWindowContainer.java


1./*
 焦点窗口
*/
updateFocusedWindowLocked{
- WindowState newFocus = mRoot.computeFocusedWindow()-->
	mFindFocusedWindow(WindowState w){ //遍历windowContainer
	- AppWindowToken focusedApp = mService.mFocusedApp
	- AppWindowToken wtoken = w.mAppToken
	}@DisplayContent.java
 //窗口改变
- mCurrentFocus = newFocus
}@WindowManagerService.java

2./*
 布局

*/
applySurfaceChangesTransaction(boolean recoveringMemory){
- WindowSurfacePlacer surfacePlacer = mService.mWindowPlacerLocked
- mWallpaperController.adjustWallpaperWindows
- setLayoutNeeded //设置需要布局
- performLayout{
	- 
	}
- forAllWindows(mApplyPostLayoutPolicy)
 //布局完成
- forAllWindows(mApplySurfaceChangesTransaction)
}@DisplayContent.java

4./*
 应用切换
*/
handleAppTransitionReadyLocked{
- int appsCount = mService.mOpeningApps.size()
- int transit = mService.mAppTransition.getAppTransition()
}@WindowSurfacePlacer.java

frameworks/base/services/core/java/com/android/server/wm/WindowSurfacePlacer.java
