/*服务启动

FIRST_STATIC_STACK_ID = 0
HOME_STACK_ID = FIRST_STATIC_STACK_ID                                    0:home luancher
FULLSCREEN_WORKSPACE_STACK_ID = 1                                        1:全屏应用位置
FREEFORM_WORKSPACE_STACK_ID = FULLSCREEN_WORKSPACE_STACK_ID + 1          2:free
DOCKED_STACK_ID = FREEFORM_WORKSPACE_STACK_ID + 1                        3:分屏应用
PINNED_STACK_ID = DOCKED_STACK_ID + 1                                    4:PIP  非focusable,不能设置为焦点栈
RECENTS_STACK_ID = PINNED_STACK_ID + 1                                   5:systemui中RecentsActivity
ASSISTANT_STACK_ID = RECENTS_STACK_ID + 1

//动态栈 从7开始
FIRST_DYNAMIC_STACK_ID = LAST_STATIC_STACK_ID + 1

*/
startBootstrapServices{
- mActivityManagerService = mSystemServiceManager.startService(ActivityManagerService.Lifecycle.class).getService()
- mActivityManagerService.setSystemServiceManager(mSystemServiceManager)
- mActivityManagerService.setInstaller(installer)
}@SystemServer.java

new Lifecycle-->mService = 
new ActivityManagerService(context){
- mHandlerThread = new ServiceThread(TAG)
- mFgBroadcastQueue = new BroadcastQueue
- mBgBroadcastQueue = new BroadcastQueue
- mBatteryStatsService = new BatteryStatsService
  //usercontrol
- mUserController = new UserController(this)
  //activity
- mStackSupervisor = createStackSupervisor()
- mActivityStarter = new ActivityStarter(this, mStackSupervisor)
- mRecentTasks = new RecentTasks
}

startOtherServices-->mActivityManagerService.systemReady{
 //启动常驻应用
- startPersistentApps

}

/***********************
 设置WindowManager
 创建ActivityDisplay
 创建HOMEStack
*/
mActivityManagerService.setWindowManager(wm)@SystemServer.java-->setWindowManager{
- mWindowManager = wm
- mStackSupervisor.setWindowManager(wm){
	- mWindowManager = wm
	- mDisplayManager =(DisplayManager)getSystemService(Context.DISPLAY_SERVICE)
	- Display[] displays = mDisplayManager.getDisplays()				//获取display个数
	- 遍历displays{
		- ActivityDisplay activityDisplay = new ActivityDisplay(displayId) 	//创建
		- mActivityDisplays.put(displayId, activityDisplay) 
		}	
	- mHomeStack = mFocusedStack = mLastFocusedStack =getStack(HOME_STACK_ID)	//创建第一个stack
	}@ActivityStackSupervisor.java
- mActivityStarter.setWindowManager(wm){
	
	}
}@ActivityManagerService.java


//启动应用进程
resumeTopActivityInnerLocked@ActivityStack.java-->startSpecificActivityLocked@ActivityStackSupervisor.java-->
mService.startProcessLocked(r.processName, r.info.applicationInfo)@ActivityManangerService.java-->
startProcessLocked(processName,ApplicationInfo){					//传入进程名,应用信息
- ProcessRecord app
- !isolated{										//非独立进程
	- app = getProcessRecordLocked(processName)
	}
- app==null,app = newProcessRecordLocked(info, processName){				//创建ProcessRecord保存
	- ProcessRecord r = new ProcessRecord(stats, info)
	- addProcessNameLocked(r) 
	}
- startProcessLocked(app)-->
  startProcessLocked(ProcessRecord app){
	- app.gids = gids
	- entryPoint = "android.app.ActivityThread" 					//进程入口
	- ComponentName cn = new ComponentName(app.info.packageName)
	- ProcessStartResult startResult = Process.start(entryPoint, app.processName, uid, uid, gids)
	- app.setPid(startResult.pid)
	- this.mPidsSelfLocked.put(startResult.pid, app) 				//保存,用于和应用进程关联
	}
}@ActivityManangerService.java

//关联进程
attachApplication(IApplicationThread thread)-->
attachApplicationLocked(IApplicationThread thread,int pid){
- ProcessRecord app = mPidsSelfLocked.get(pid) 						//根据pid 获取ProcessRecord
 //监听进程是否挂了
- AppDeathRecipient adr = new AppDeathRecipient(app)
- thread.asBinder().linkToDeath(adr
- app.deathRecipient = adr

- thread.bindApplication(processName
}@ActivityManangerService.java

//binder监听到应用进程挂
AppDeathRecipient.binderDied-->appDiedLocked-->appDiedLocked-->
handleAppDiedLocked{
- mStackSupervisor.handleAppDiedLocked(app)
- mStackSupervisor.resumeFocusedStackTopActivityLocked()
}@ActivityManangerService.java


 //应用进程native crash
startObservingNativeCrashes@SystemServier.java-->NativeCrashListener.run@ActivityManangerService.java
NativeCrashListener.run{
 //监听crash信息
- FileDescriptor serverFd = Os.socket(AF_UNIX, SOCK_STREAM)
- nixSocketAddress sockAddr = UnixSocketAddress.createFileSystem(DEBUGGERD_SOCKET_PATH)
- Os.bind(serverFd, sockAddr)
- Os.listen(serverFd)
 //应用崩溃
- consumeNativeCrashData-->NativeCrashReporter.start-->NativeCrashReporter.run-->mAm.handleApplicationCrashInner
	-->handleApplicationCrashInner
}@NativeCrashListener.java




frameworks/base/services/core/java/com/android/server/am/TaskChangeNotificationController.java

====== 1
/***********************
  StackSuperVisor
*/
//创建默认Display中stack
getStack(stackId){
- 若是DOCKED_STACK_ID,则需创建getStack(RECENTS_STACK_ID)
- createStackOnDisplay(stackId,DEFAULT_DISPLAY)-->createStack{
	- new PinnedActivityStack		//PINNED_STACK_ID
	- new ActivityStack{
		- mHandler = new ActivityStackHandler
		- postAddToDisplay(display 	//加入到display
		}
	}
}@ActivityStackSupervisor.java


//主页
resumeHomeStackTask{
- mHomeStack.moveHomeStackTaskToTop()
- ActivityRecord r = getHomeActivity()
- moveFocusableActivityStackToFrontLocked(r)	//设置焦点
- resumeFocusedStackTopActivityLocked(mHomeStack)
}


findActivityLocked(mIntent, mStartActivity.info){
- 遍历mActivityDisplays{
	- ArrayList<ActivityStack> stacks = mActivityDisplays.valueAt(displayNdx).mStacks
	-遍历 stacks{
	- ActivityRecord ar = stacks.get(stackNdx).findActivityLocked-->
		findActivityLocked{//从栈中查找
		- 
		}@ActivityStack.java
	}
}@ActivityStackSuperVisor.java

==================
//设置栈大小。从activity容器到窗口容器
void resizeStackLocked(int stackId, Rect bounds){
- ActivityStack stack = getStack(stackId)
- stack.resize(bounds)
- stack.ensureVisibleActivitiesConfigurationLocked
}@ActivityStackSupervisor.java

//设置dock栈
void resizeDockedStackLocked(Rect dockedBounds)

//设置pin栈
void resizePinnedStackLocked(Rect pinnedBounds, Rect tempPinnedTaskBounds){
- PinnedActivityStack stack = getStack(PINNED_STACK_ID)
- PinnedStackWindowController stackController = stack.getWindowContainerController
- stack.resize(pinnedBounds)
- stack.ensureVisibleActivitiesConfigurationLocked
}@ActivityStackSupervisor.java

====== 2
/***********************
  Activitystack
*/

//resume
resumeFocusedStackTopActivityLocked(ActivityStack targetStack, ActivityRecord target, ActivityOptions targetOptions){
- targetStack.resumeTopActivityUncheckedLocked //target不为空,且focusable(非pinstack)
- mFocusedStack.resumeTopActivityUncheckedLocked
}@ActivityStackSupervisor.java-->
resumeTopActivityUncheckedLocked-->resumeTopActivityInnerLocked{
- ActivityRecord next = topRunningActivityLocked
- mResumedActivity == next,executeAppTransition//已经为resumed状态
- mStackSupervisor.allPausedActivitiesComplete()//是否正在暂停
- mResumedActivity != null,startPausingLocked//需要暂停前一个ResumedActivity
 //隐藏前一个应用窗口
- prev != null{
	- activity.finishing,mWindowManager.prepareAppTransition(TRANSIT_ACTIVITY_CLOSE/TRANSIT_TASK_CLOSE) //设置动画
	- !activity.finishing,mWindowManager.prepareAppTransition(TRANSIT_ACTIVITY_OPEN/TRANSIT_TASK_OPEN_BEHIND/TRANSIT_TASK_OPEN)
  }else{
  	- mWindowManager.prepareAppTransition(TRANSIT_NONE/TRANSIT_ACTIVITY_OPEN)//设置动画
  }
 //进程启动.显示,设置状态当前resumedAcivity
- next.setVisibility(true)
- next.completeResumeLocked()
 //进程没有启动
- mStackSupervisor.startSpecificActivityLocked
}@ActivityStack.java



//显示
ensureActivitiesVisibleLocked{
 //遍历display
- int displayNdx = mActivityDisplays.size()
 //遍历stack
- stacks = mActivityDisplays.valueAt(displayNdx).mStacks
- ActivityStack stack = stacks.get(stackNdx)
- stack.ensureActivitiesVisibleLocked
}@ActivityStackSupervisor.java-->
ensureActivitiesVisibleLocked(ActivityRecord starting,int configChanges,boolean preserveWindows){
- 遍历task,TaskRecord task = tmpTaskHistory.get(taskNdx)
 //遍历ActivityRecord,
- ArrayList<ActivityRecord> activities = task.mActivities
- ActivityRecord r = activities.get(activityNdx)
- 显示reallyVisible,{
	- r.ensureActivityConfigurationLocked
	- r.makeVisibleIfNeeded
	}
- 隐藏!reallyVisible{
	- makeInvisible
	}
}@ActivityStack.java

//移动
setTargetStackAndMoveToFrontIfNeeded(reusedActivity){
- ActivityStack launchStack = getLaunchStack(),获取启动栈
- (launchStack == mTargetStack),mTargetStack.moveTaskToFrontLocked //启动栈和目标栈一致,移动task
- 
}

//设置大小
resize(Rect bounds, Rect tempTaskBounds, Rect tempTaskInsetBounds){
- Rect taskBounds = tempTaskBounds != null ? tempTaskBounds : bounds
- Rect insetBounds = tempTaskInsetBounds != null ? tempTaskInsetBounds : taskBounds
  //遍历设置task
- for(int i = mTaskHistory.size() - 1){
	- TaskRecord task = mTaskHistory.get(i)
	  //freeform栈,不限制task大小.只限制在当前栈内
	- FREEFORM_WORKSPACE_STACK_ID{
		- fitWithinBounds
		}
	- task.updateOverrideConfiguration
	}
- mFullscreen = mWindowContainerController.resize(bounds) //设置窗口端
- setBounds(bounds)-->mBounds
}@ActivityStack.java

====== 3
/***********************
  TaskRecord
*/

//activityRecord
ensureActivityConfigurationLocked{
- updateOverrideConfiguration //获取最新配置
 //判断mLastReportedConfiguration和当前configuration是否一致
- mTmpConfig.setTo(mLastReportedConfiguration.getMergedConfiguration())
- getConfiguration().equals(mTmpConfig)
- setLastReportedConfiguration //发生变化,设置lastReport
- relaunchActivityLocked //relaunching non-resumed
}


/***********************
 焦点栈
*/
mHomeStack = mFocusedStack = mLastFocusedStack = getStack(HOME_STACK_ID) //初始为homeStack

moveToFront{
- mStacks.remove(this)
- mStacks.add(findStackInsertIndex(ON_TOP))//设置mStacks位置
- setFocusStackUnchecked-->设置mFocusedStack@ActivityStackSupervisor.java//设置焦点
}@ActivityStack.java


//force hide
pinnedStack.mForceHidden = true





frameworks/base/core/java/android/app/Activity.java
frameworks/base/core/java/android/app/Instrumentation.java
frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java
frameworks/base/services/core/java/com/android/server/am/ActivityStarter.java
frameworks/base/services/core/java/com/android/server/am/ActivityStackSupervisor.java
