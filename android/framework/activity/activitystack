/**************************
 configuration
 每个ActivityStack拥有一个mOverrideConfig,分屏时每个stack中的窗口都不一样
 将stack中的mOverrideConfig应用到栈中的每个应用


 am stack resize id  35 80 500 393
*/
resizeStackLocked{
- overrideConfig = mWindowManager.resizeStack(stackId, bounds) //获取新配置
- updateOverrideConfiguration(overrideConfig)-->mOverrideConfig= overrideConfig@ActivityStack.java//更新配置
}ActivityStackSupervisor.java

//更新配置
ensureActivityConfigurationLocked-->scheduleActivityConfigurationChanged(mOverrideConfig)
@ActivityStack.java

//更新配置
relaunchActivityLocked-->scheduleRelaunchActivity(mConfiguration,mOverrideConfig)@ActivityStack.java

/*
 resumeTop
 
*/

resumeTopActivityLocked{
- 获取栈顶的ActivityRecord，topRunningActivityLocked
- 若栈顶为空则启动launcher，mStackSupervisor.resumeHomeActivity
- 若需resume的activity已经在栈顶{
	- 执行窗口切换，mWindowManager.executeAppTransition
	- mNoAnimActivities.clear
	}
- 前一个resumed activity不为空{
	- 
	}
- 休眠状态，{
	- 执行完要执行的动画，mWindowManager.executeAppTransition
	- mNoAnimActivities.clear
	}
- 清除mStackSupervisor中activity的不对状态，mStoppingActivities,mGoingToSleepActivities
- 要暂停的activity是否完成，mStackSupervisor.allPausedActivitiesComplete
- 暂停当前已经resumed activity，startPausingLocked
- 由于睡眠设置了NO_HISTORY的activity没有结束，结束它requestFinishActivityLocked
- 上个activity不为空，且还是显示{
	- 
	- 当前activity已经显示，立即隐藏上个activity,mService.mWindowManager.setAppVisibility
	}
- 清除应用停止状态，AppGlobals.getPackageManager().setPackageStoppedState
- windowManger准备动画，prev不为空{
	- 状态为prev.finishing,设置动画mService.mWindowManager.prepareAppTransition(NONE/CLOSE)
	- 不为finishing,设置动画mService.mWindowManager.prepareAppTransition(NONE/OPEN)
	}else，栈不为空{
	- 设置动画mService.mWindowManager.prepareAppTransition(NONE/OPEN)
	}

- next的app和进程已经存在，{
	- 设置可见， mService.mWindowManager.setAppVisibility
	- 启动计时，startLaunchTickingLocked
	- 
	- 若是mMainStack更新配置，mService.mWindowManager.updateOrientationFromAppTokens
	}
- next没有被启动过,startSpecificActivityLocked
}@ActivityStack.java

