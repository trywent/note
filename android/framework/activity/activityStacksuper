//

mStacks   //non-launcher
mHomeStack //包含launcher的stack
mFocusedStack //非homeStack,当前启动activity和接收输入的栈

//启动launcher
启动栈顶activity：
systemReady@ActivityManagerService.java-->
resumeTopActivitiesLocked(ActivityStack, ActivityRecord ,Bundle){
- 目标栈targetStack为空，获取目标栈。getFocusedStack
- 查找mStacks中所有栈，获取isFrontStack{
	- 若stack==targetStack, stack.resumeTopActivityLocked(ActivityRecord,Bundle)
	- 否则，stack.resumeTopActivityLocked
	}
}@ActivityStackSupervisor.java

resumeTopActivityLocked@ActivityStack.java-->resumeHomeActivity{
- 移动launcher到顶部，moveHomeToTop{
	- 移动homeStack到前端，moveHomeStack
	- 移动homeTask到栈顶，moveHomeTaskToTop{
		- 移动到mTaskHistory栈顶
		- 移动到窗口栈顶，mWindowManager.moveTaskToTop
		}
	}
- 若mHomeStack中activityRecord是launcher，则恢复launcher，resumeTopActivitiesLocked
- 若没有则启动launcher，mService.startHomeActivityLocked@ActivityManagerService.java
	-->startHomeActivity-->startActivityLocked
}

frameworks/base/services/java/com/android/server/am/ActivityStackSupervisor.java
_____________________
找到焦点栈：
resumeTopActivitiesLocked{
- 目标栈targetStack为空，获取目标栈。getFocusedStack
- 查找mStacks中所有栈，获取isFrontStack{
	- 若stack==targetStack, stack.resumeTopActivityLocked(ActivityRecord,Bundle)
	- 否则，stack.resumeTopActivityLocked
	}
}@ActivityStackSupervisor.java


显示栈顶的activity：
resumeTopActivityLocked{
- 获取栈顶的ActivityRecord，topRunningActivityLocked
- 若栈顶为空则启动launcher，mStackSupervisor.resumeHomeActivity
- 若需resume的activity已经在栈顶{
	- 执行窗口切换，mWindowManager.executeAppTransition
	- mNoAnimActivities.clear
	}
- 前一个resumed activity不为空{
	- 
	}
- 休眠状态，{
	- 执行完要执行的动画，mWindowManager.executeAppTransition
	- mNoAnimActivities.clear
	}
- 清除mStackSupervisor中activity的不对状态，mStoppingActivities,mGoingToSleepActivities
- 要暂停的activity是否完成，mStackSupervisor.allPausedActivitiesComplete
- 暂停当前已经resumed activity，startPausingLocked
- 由于睡眠设置了NO_HISTORY的activity没有结束，结束它requestFinishActivityLocked
- 上个activity不为空，且还是显示{
	- 
	- 当前activity已经显示，立即隐藏上个activity,mService.mWindowManager.setAppVisibility
	}
- 清除应用停止状态，AppGlobals.getPackageManager().setPackageStoppedState
- windowManger准备动画，prev不为空{
	- 状态为prev.finishing,设置动画mService.mWindowManager.prepareAppTransition(NONE/CLOSE)
	- 不为finishing,设置动画mService.mWindowManager.prepareAppTransition(NONE/OPEN)
	}else，栈不为空{
	- 设置动画mService.mWindowManager.prepareAppTransition(NONE/OPEN)
	}

- next的app和进程已经存在，{
	- 设置可见， mService.mWindowManager.setAppVisibility
	- 启动计时，startLaunchTickingLocked
	- 
	- 若是mMainStack更新配置，mService.mWindowManager.updateOrientationFromAppTokens
	}
- next没有被启动过,startSpecificActivityLocked
}@ActivityStack.java




frameworks/base/services/java/com/android/server/am/ActivityStack.java

========================

/************
 activity启动流程：
*/
1 startActivityMayWait{
- 解析，resolveActivity
- 启动，startActivityLocked
- 设置启动结果
}@ActivityStackSupervisor.java

/************
* 获取调用者
* 过滤权限

 
*/
2 startActivityLocked{
- 调用者信息，callerApp
- 结果发送到何处信息，resultRecord
- 若设置FLAG_ACTIVITY_FORWARD_RESULT,则启动结果传送的caller的reusltTo(调用者的结果接收者)
- 检查权限是否允许，checkPermission，checkComponentPermission
- 过滤一些intent，mService.mIntentFirewall.checkStartActivity
- 创建ActivityRecord，new ActivityRecord
- 若不是焦点栈中应用发起的startAcvitiy，getFocusedStack{
	- 若不允许调用者进行应用切换，则返回
	}
- 启动正等待启动的activity，doPendingActivityLaunchesLocked
- 启动这次要启动的activity，并reusme，startActivityUncheckedLocked(,doresuem(true),)
}@ActivityStackSupervisor.java

/************
主要是找到对应task，处理task(移除activity，移动task)

boolean addingToTask //启动新activity加入到task中，(task中没有找到要启动的activity)

启动需要的信息：
* 启动模式{
	- FLAG_ACTIVITY_NEW_TASK
	}
* 启动者的ActivityRecord，启动者所在的task，所在的stack
* 启动结果的返回ActivityRecord.resultTo
* 被启动者将要在的任务TaskRecord reuseTask，将要在的栈ActivityStack targetStack
* 若要启动到新task{
	- 获得目标task中的栈顶activity，ActivityRecord intentActivity
	- 获取目标栈targetStack，并移动到前台
	- 当前task不是目标task，启动者task在前台。则移动目标task到前台
	}
* 是否要创建activity,加入task中。addingToTask //activity可能不存在
*/

3 startActivityUncheckedLocked{
- 判断是否清除标记START_FLAG_ONLY_IF_NEEDED，//若启动者和被启动者不是同一个activity则清除
- 判断是否开启新task，FLAG_ACTIVITY_NEW_TASK
- 调用者sourceRecord不为空，则保存task信息，newTaskInfo
- 若启动到新task中，则不返回启动结果。设置r.resultTo = null
- 启动activity到新task中,{ //设置task，移动，清除...
	- 找到对应task中的最顶部ActivityRecord intentActivity，
		findTaskLocked //找到对应activity所在栈的栈顶activity
		findActivityLocked //找到对应的activity
	- 若找到则继续
	- 设置目标栈，targetStack = intentActivity.task.stack
	- 移动homeStack，若要启动的activity在homestack则移到前面。否则移到后面
	- targetStack不在当前显示的task,则移动到前台targetStack.moveTaskToFrontLocked
	- 若task的intent为空，则设置为当前的启动intent
	- activity所在栈不在最前面{
		- 启动者是在前端？？，立即移动activity到最前端targetStack.moveTaskToFrontLocked
		}
	- IF_NEEDED不执行启动，则恢复最上的activity，resumeTopActivitiesLocked
	- FLAG_ACTIVITY_NEW_TASK|FLAG_ACTIVITY_CLEAR_TASK。使用独立并清空的reuseTask
	- FLAG_ACTIVITY_CLEAR_TOP,LAUNCH_SINGLE_TASK,LAUNCH_SINGLE_INSTANCE
	   清除要启动activity之上的其它activity，设置当前task的intent
	- 启动的activity和目标task中的启动activity一致，并且和task中最上的activity一致
		，则更新最上activity的intent。
	- 正常流程，开始新task。//FLAG_ACTIVITY_RESET_TASK_IF_NEEDED==0
	- 不执行启动，targetStack.resumeTopActivityLocked
	}
- 要启动的activity已经在，当前栈，当前task的栈顶。则resumeTopActivitiesLocked
- activity已经存在(!addingToTask)，移动到另一task中{
	-获取activity对应的stack(若没有则创建)，adjustStackFocus
	- 调整home栈和当前栈，moveHomeStack
	- 创建新task，createTaskRecord
	- 设置到目的task，setTask
	}
- 启动者不为空(启动到启动者task){
	- activity已经存在，清除其它activity{
		- performClearTaskLocked
		- resumeTopActivityLocked
		}
	- activity已经存在，移动到前面{
		- task.moveActivityToFrontLocked(			
		}
	- 保存task，r.setTask
	}
- 没有启动者，也没有task。//创建新的
- 启动activity，targetStack.startActivityLocked
- 设置焦点，mService.setFocusedActivityLocked
}@ActivityStackSupervisor.java

/************
 mWindowManager.addAppToken 将ActivityRecord 加入到WindowManager
 
*/
4 startActivityLocked{
- 加入新task，insertTaskAtTop
- 移动窗口管理器中的task,mWindowManager.moveTaskToTop
- 若activity不是启动新task，{
	- 遍历所有task,查找activity对应的task
	- 不启动activity，{
		- 移动到栈顶，task.addActivityToTop
		- 加入到窗口管理器，mWindowManager.addAppToken
		}
	- 若其他task中有遮挡屏幕的activity，则启动activity。
	}
- 加入到task，task.addActivityToTop(r)
- 
- 若是第一个activity，则不执行动画。mWindowManager.addAppToken
- doresume，mStackSupervisor.resumeTopActivitiesLocked
}@ActivityStack.java
/************
*/
5 resumeTopActivitiesLocked-->ActivityStack.resumeTopActivityLocked-->
startSpecificActivityLocked{
- 获取进程，mService.getProcessRecordLocked
- 若进程不为空，realStartActivityLocked
- 进程没有运行，运行mService.startProcessLocked-->Process.start("android.app.ActivityThread")
	-->attach@ActivityThread.java-->attachApplication-->attachApplicationLocked{
	- mStackSupervisor.attachApplicationLocked{
		- 获取等待启动的activity，topRunningActivityLocked
		- 启动realStartActivityLocked
		}
	- 将服务关联到进程，mServices.attachApplicationLocked
	}
}@ActivityStack.java

realStartActivityLocked{
- 设置为可见，mWindowManager.setAppVisibility
- 是否更新配置，updateOrientationFromAppTokens
- 
- 启动activity，app.thread.scheduleLaunchActivity@ActivityThread.java
- 已经执行过resuem，所以minimalResumeActivityLocked
}@ActivityStackSupervisor.java


//应用线程执行完消息队列后
activityIdleInternalLocked{
- 判断launcher所在栈是否在最前，isFrontStack(mHomeStack){
	- 获取服务中的启动状态，mService.mBooting。并设置启动状态结束
	}
- 若还是启动状态booting，结束启动finishBooting@ActivityManagerService.java
}

=====================
配置改变：
ensureActivityConfigurationLocked

setPackageScreenCompatModeLocked@CompatModePackages.java
restartPackage@ActivityStack.java
=====================
显示：
ensureActivitiesVisibleLocked@ActivityStackSupervisor.java-->stack.ensureActivitiesVisibleLocked
-->isActivityOverHome@ActivityStack.java

=====================
task:
startActivityUncheckedLocked{
- 创建新task，r.setTask(targetStack.createTaskRecord)
}

移除task：
destroyActivityLocked-->removeActivityFromHistoryLocked@ActivityStack.java-->
removeTask@ActivitySupervisor.java

mTaskHistory

=====================
stack:

//创建
createStack{
- 创建栈，mStackSupervisor.createStack-->new ActivityStack@ActivityStackSupervisor.java
- 创建栈窗口区域，mWindowManager.createStack
}@ActivityManagerService.java

//移除
removeTask-->mStacks.remove

//调整
startActivityUncheckedLocked-->adjustStackFocus(ActivityRecord){
- 若是应用activity{
	- 若ActivityRecord.task不为空则返回task.stack。并设置mFocusedStack
	- ActivityRecord.task为空，但mFocusedStack不为空，则返回mFocusedStack
	- mFocusedStack为空则遍历mStacks，并返回
	- 创建新stack，mService.createStack{
		- 创建stackid，mStackSupervisor.createStack
		- 创建窗口服务端stack，createStack
		}
	}
- 返回homestack
}


//设置非前端栈中，所有activity状态为暂停
pauseBackStacks

//显示top
resumeTopActivitiesLocked-->(暂停)pauseBackStacks



findTaskToMoveToFrontLocked-->moveTaskToFrontLocked

=====================
调整焦点栈：
removeTask

//查找activity对应的栈
startActivityUncheckedLocked-->adjustStackFocus{
- 查找并设置，mFocusedStack
}


设置状态：
//触摸设置焦点栈：
displayContent.mTapDetector(TAP_OUTSIDE_STACK)@StackTapPointerEventListener.java
-->setFocusedStack@WindowManagerService.java-->setFocusedStack-->setFocusedActivityLocked
@WindowManagerService.java-->setFocusedStack{
- 若不是应用栈，mStackState(若home栈不为in_front,则设为to_front)
- 若是应用栈，设置mFocusedStack，mStackState(若home栈不为in_back,则设为to_back)
}@ActivityStackSupervisor.java

//acvitiy启动完成
allResumedActivitiesComplete{
- mStackState（若是to_back,则设置in_back）
- mStackState（若是to_front,则设置in_front）
}

//移动homestack
startActivityUncheckedLocked(启动应用时设置)-->moveHomeStack{
- 设置mStackState
}@ActivityStackSupervisor.java
====================
//焦点应用
startActivityUncheckedLocked-->setFocusedActivityLocked@ActivityStackSupervisor.java

adjustFocusedActivityLocked-->setFocusedActivityLocked@ActivityStack.java


frameworks/base/services/java/com/android/server/am/ActivityStackSupervisor.java
frameworks/base/services/java/com/android/server/am/ActivityStack.java
=====================
总结：
启动流程：(解析启动的activity信息)startActivityLocked-->(将activity加入到栈中)
startActivityUncheckedLocked-->(显示栈顶的activity)resumeTopActivitiesLocked
-->resumeTopActivityLocked




#####################
执行空闲时的操作：
ActivityStackSupervisorHandler.handleMessage(IDLE_TIMEOUT_MSG/IDLE_NOW_MSG)-->activityIdleInternal-->activityIdleInternalLocked








//==================
createStackOnDisplay-->
ActivityContainer-->createStack-->new ActivityStack@ActivityStackSupervisor.java
