/***********************
 stackSupervisor,管理stack

*/







/*******
 idle

 当启动应用时，需要等待启动应用显示才能隐藏上一个应用。也就是等待idle时处理mStoppingActivities,mFinishingActivities.
*/


//从应用端回调执行IDLE
activityIdle(IBinder token, Configuration config, boolean stopProfiling)-->
mStackSupervisor.activityIdleInternalLocked(false,false, config)@ActivityManagerService.java
//ActivityService调用pause后,进入idle超时
ActivityStackSupervisorHandler.handleMessage(IDLE_TIMEOUT_MSG/IDLE_NOW_MSG)-->activityIdleInternal-->
activityIdleInternalLocked@ActivityStackSupervisor.java

activityIdleInternalLocked(IBinder token,boolean fromTimeout,boolean processPausingActivities, Configuration config){
- ActivityRecord r = ActivityRecord.forTokenLocked(token)
- if (r != null) {
	- r.finishLaunchTickingLocked()
	- r.idle = true //actvityRecord idle状态
	}
- if(allResumedActivitiesIdle){
	- ensureActivitiesVisibleLocked(null)
	}
- ArrayList<ActivityRecord> stops = processStoppingActivitiesLocked(r)
- ArrayList<ActivityRecord> finishes = new ArrayList<>(mFinishingActivities)
  //遍历stop,执行finish或者stop
- 若是finish,stack.finishCurrentActivityLocked(r)
  else stopActivityLocked@ActivityStack.java
  //遍历finish,执行destroy
- stack.destroyActivityLocked(r)
- resumeFocusedStackTopActivityLocked
}ActivityStackSupervisor.java

//获取正在stop的Activity
processStoppingActivitiesLocked(ActivityRecord idleActivity){
- allResumedActivitiesVisible
  //遍历mStoppingActivities
- ActivityRecord s = mStoppingActivities.get
- removeTimeoutsForActivityLocked(idleActivity)
- scheduleIdleTimeoutLocked(idleActivity)
}@ActivityStackSupervisor.java

/*******
 stack管理

*/

//创建
createStack{
- 创建栈，mStackSupervisor.createStack-->new ActivityStack@ActivityStackSupervisor.java
- 创建栈窗口区域，mWindowManager.createStack
}@ActivityManagerService.java

//移除
removeTask-->mStacks.remove

//调整
startActivityUncheckedLocked-->adjustStackFocus(ActivityRecord){
- 若是应用activity{
	- 若ActivityRecord.task不为空则返回task.stack。并设置mFocusedStack
	- ActivityRecord.task为空，但mFocusedStack不为空，则返回mFocusedStack
	- mFocusedStack为空则遍历mStacks，并返回
	- 创建新stack，mService.createStack{
		- 创建stackid，mStackSupervisor.createStack
		- 创建窗口服务端stack，createStack
		}
	}
- 返回homestack
}




/*******
 设置焦点栈

*/
moveToFront(String reason, TaskRecord task) {
  //移动到数组前列
- mStacks.remove(this)
- mStacks.add(findStackInsertIndex(ON_TOP), this)
  //设置焦点栈
- mStackSupervisor.setFocusStackUnchecked(reason, this){
	- mFocusedStack = focusCandidate
	}
  //将WindowContainerController中task移动到前列
}@ActivityStack.java

//启动时设置焦点栈
startActivityUnchecked-->mTargetStack.moveToFront


//触摸设置焦点栈：android6.0
displayContent.mTapDetector(TAP_OUTSIDE_STACK)@StackTapPointerEventListener.java
-->setFocusedStack@WindowManagerService.java-->setFocusedStack-->setFocusedActivityLocked
@WindowManagerService.java-->setFocusedStack{
- 若不是应用栈，mStackState(若home栈不为in_front,则设为to_front)
- 若是应用栈，设置mFocusedStack，mStackState(若home栈不为in_back,则设为to_back)
}@ActivityStackSupervisor.java

//android8.0
handleTapOutsideTask-->mActivityManager.setFocusedTask(taskId)@WindowManangerService.java-->
setFocusedTask(int taskId){
- TaskRecord task = mStackSupervisor.anyTaskForIdLocked(taskId)
- ActivityRecord r = task.topRunningActivityLocked()
  //设置activity所在栈为焦点栈
- mStackSupervisor.moveFocusableActivityStackToFrontLocked(r, "setFocusedTask")
  //焦点栈执行resume。设置resumedActivity
- mStackSupervisor.resumeFocusedStackTopActivityLocked()
}@ActivityManagerService.java





/*******
 task管理

*/
task:
startActivityUncheckedLocked{
- 创建新task，r.setTask(targetStack.createTaskRecord)
}

移除task：
destroyActivityLocked-->removeActivityFromHistoryLocked@ActivityStack.java-->
removeTask@ActivitySupervisor.java

mTaskHistory

====================
//焦点应用
startActivityUncheckedLocked-->setFocusedActivityLocked@ActivityStackSupervisor.java

adjustFocusedActivityLocked-->setFocusedActivityLocked@ActivityStack.java

=====================
配置改变：
ensureActivityConfigurationLocked

setPackageScreenCompatModeLocked@CompatModePackages.java
restartPackage@ActivityStack.java

frameworks/base/services/java/com/android/server/am/ActivityStackSupervisor.java
frameworks/base/services/java/com/android/server/am/ActivityStack.java


