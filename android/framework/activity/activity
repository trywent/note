/***********************
 activity:生命周期 Created-----started(可见)-----Resumed-----Paused-----sopted-----destoryed
 
 Activity{//窗口
  ActivityThread --- IApplicationThread --- ActivityManagerService
  mToken  --- ActivitRecord.apptoken
  PhoneWindow --- decorView---ViewRootImpl --- ISession --- WindowManagerService 
 }

 ActivityRecord{//ActivityManagerService管理生命周期
	apptoken ---addApptoken--- WindowManagerService
	}

 ViewRootImpl{ //view布局,窗口变化
	session
	IWindow --- WindowManagerService
	}
 
*/
//关联到窗口
activity.attach(appContext, this, getInstrumentation(), r.token....)@ActivityThread.java-->
attach(Context context, ActivityThread aThread,){
- mWindow = new PhoneWindow(this, window, activityConfigCallback){ //创建窗口
	-	
	}
  //设置按键事件处理回调函数
- mWindow.setCallback(this)
- mWindow.setWindowManager(ontext.getSystemService(Context.WINDOW_SERVICE),mToken,appName)//创建当前窗口的windowManagerImpl.....
	-->setWindowManager{
	- mAppToken = appToken //设置token,,,源头ActivtyManager中activityRecord
	- mAppName = appName
	- wm.createLocalWindowManager(this/*parentWindow*/)-->new WindowManagerImpl(mContext, parentWindow)
	}@Window.java 
- mWindowManager = mWindow.getWindowManager()
}@Activity.java

//start


//finish
finishActivity@Activity.java-->finishActivity@ActivityManagerNative.java-->
finishActivity@ActivityManagerService.java-->requestFinishActivityLocked-->
finishActivityLocked{
- 设置activity为finishing，r.makeFinishing
- 当前应用是resumed需先暂停，startPausingLocked-->(应用端执行onPause后)activityPaused-->
	activityPausedLocked-->	completePauseLocked{
		- finishCurrentActivityLocked
		- mStackSupervisor.resumeTopActivitiesLocked
		}

- finishCurrentActivityLocked{
	- 设置r.state= FINISHING
	}
}@ActivityStack.java

/********
 config,分屏状态变化
*/
//config
onConfigurationChanged(@NonNull Configuration newConfig) {}

//分屏状态.
scheduleMultiWindowModeChanged-->handleMultiWindowModeChanged@ActivityThread.java-->
dispatchMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig){
- mFragments.dispatchMultiWindowModeChanged(isInMultiWindowMode, newConfig)
- mWindow.onMultiWindowModeChanged()
- onMultiWindowModeChanged(isInMultiWindowMode, newConfig){	//应用一般实现这个方法
	- 
	}
}@Activity.java

//分屏状态变化
schedulePictureInPictureModeChanged-->handlePictureInPictureModeChanged@ActivityThread.java-->
dispatchPictureInPictureModeChanged(boolean isInPictureInPictureMode,Configuration newConfig)

/********
 事件
 处理后退按键
*/

dispatchKeyEvent-->cb.dispatchKeyEvent(event)@DecorView.java-->dispatchKeyEvent-->
onBackPressed-->finish-->(没有父activity)ActivityManagerNative.getDefault().finishActivity
@Activity.java


frameworks/base/core/java/android/app/Activity.java

