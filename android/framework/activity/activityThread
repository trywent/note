//应用程序提供的接口
ApplicationThread extends IApplicationThread.Stub{
- schedulePauseActivity
- scheduleStopActivity
- scheduleWindowVisibility
- scheduleLaunchActivity
}@ActivityThread.java

//开始应用进程
startProcessLocked@ActivityManagerService.java-->Process.start("android.app.ActivityThread")-->
main{
- 设置looper，Looper.prepareMainLooper()
- attach(system){
	- !system{
		- ViewRootImpl.addFirstDrawHandler
		- ActivityManagerNative.getDefault().attachApplication(mAppThread)//关联到ActivityManagerService
		}
	- system{
		- mInstrumentation = new Instrumentation()
		- getSystemContext()-->ContextImpl.createSystemContext(this)
		- ContextImpl.createAppContext(getSystemContext().mPackageInfo)		
		- mInitialApplication = context.mPackageInfo.makeApplication
		}
	- ViewRootImpl.addConfigCallback
	}@ActivityThread.java
- 设置sMainThreadHandler
- Looper.loop
}@ActivityThread.java

//将thread关联到ProcessRecord(activityManagerService管理)
attachApplication(IApplicationThread)-->attachApplicationLocked(IApplicationThread,pid){
- 查找对应pid的ProcessRecord app，关联thread。app.makeActive(thread, mProcessStats)
- mStackSupervisor.attachApplicationLocked//是否有activity等待运行
	-->realStartActivityLocked{
	- app.thread.performLaunchActivity-->handleMessage(LAUNCH_ACTIVITY){
		- getPackageInfoNoCheck-->getPackageInfo{ //创建LoadedApk
			-new LoadedApk(this, aInfo)
			}
		- handleLaunchActivity//启动
		}
	- minimalResumeActivityLocked
	}@ActivityStackSupervisor.java
- mServices.attachApplicationLocked{//是否有服务等待运行
	- 
	}
}@ActivityManagerService.java


//加载并创建类，执行
performLaunchActivity{
- createBaseContextForActivity-->ContextImpl.createActivityContext--> //创建上下文
	-->ContextImpl{
		- mPackageInfo //LoadedApk
		- mClassLoader //ClassLoader
		}
- appContext.getClassLoader-->mPackageInfo.getClassLoader@ContextImpl.java-->//loader
	-->getClassLoader-->createOrUpdateClassLoaderLocked@LoadedApk.java
- mInstrumentation.newActivity-->cl.loadClass(className).newInstance //加载activity
}@ActivityThread.java


//将activityThread进程信息关联到ActivityManagerServices
attach-->mgr.attachApplication(mAppThread)@ActivityThread.java-->attachApplication-->
attachApplicationLocked-->thread.bindApplication@ActivityManagerService.java-->
bindApplication-->handleMessage(BIND_APPLICATION)-->handleBindApplication{
- 创建LoadedApk,getPackageInfoNoCheck-->getPackageInfo(includeCode){
	- packageInfo = new LoadedApk //创建
	- includeCode包含代码，保存到mPackages.put
	}
- makeApplication-->getClassLoader-->createOrUpdateClassLoaderLocked(null)@LoadedApk.java
}@ActivityThread.java



///接口调用================
app.thread.scheduleLaunchActivity(new Intent(r.intent), r.appToken)@ActivityStackSupervisor.java-->
ApplicationThread.scheduleLaunchActivity@ActivityThread.java

scheduleLaunchActivity(Intent intent, IBinder token,ActivityInfo info, Configuration curConfig, int procState){
- updateProcessState(procState)
- ActivityClientRecord r = new ActivityClientRecord()
- r.token = token //设置ActivityRecord中 IApplicationToken.Stub appToken
- sendMessage(H.LAUNCH_ACTIVITY, r)-->handleLaunchActivity{
	- performLaunchActivity
	}
}@ActivityThread.java

performLaunchActivity(ActivityClientRecord){
- getPackageInfo
- 设置component，setComponent
- 若是alias，创建真正component，new ComponentName
- r.activity = activity，mInstrumentation.newActivity-->newActivity{ //加载apk中代码，创建activity
	- cl.loadClass(className).newInstance
	}
- 创建application，makeApplication
- 关联activity{
	- 上下文context,createBaseContextForActivity
	- 配置configuration,new Configuration
	- 关联activity.attach(appcontext,r.token)
	- 设置主题，activity.setTheme
	}
}@ActivityThread.java


//加入view到窗口
handleResumeActivity{
- performResumeActivity-->r.activity.performResume@Activity.java
- 获取窗口，getWindow
- 获取窗口管理器，加入窗口，
	wm.addView//activity加入窗口,mParentWindow为Phonewindow的父类Window
	addView(View view)-->mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow)@WindowManagerImpl
	-->addView(View view,mContext.getDisplay(),mParentWindow){
	- parentWindow.adjustLayoutParamsForSubWindow(wparams){//设置参数
		- wp.token = mAppToken
		- wp.setTitle(mAppName)
		}@Window.java
	- ViewRootImpl root = new ViewRootImpl(view.getContext(), display)
	- mViews.add(view),mRoots.add(root)
	- root.setView(view)-->setView@ViewRootImpl.java
	}@WindowManagerGlobal.java
- 通知服务端更新状态，ActivityManagerNative.getDefault().activityResumed
}


//暂停pause
schedulePauseActivity-->handlePauseActivity{
- 执行暂停，performPauseActivity
- 回调服务端，ActivityManagerNative.getDefault().activityPaused
}


/创建服务
handleCreateService{
- packageInfo.getClassLoader()-->getClassLoader@LoadedApk.java
- cl.loadClass(data.info.name).newInstance()
}



//idle状态
activityIdleInternal-->activityIdleInternalLocked


//更新configuration.资源配置
scheduleActivityConfigurationChanged(overrideConfig)-->sendMessage(H.ACTIVITY_CONFIGURATION_CHANGED)
-->handleActivityConfigurationChanged-->performConfigurationChanged(activity,configuration){
- activity.onConfigurationChanged(config){
	- mWindow.onConfigurationChanged
	- mActionBar.onConfigurationChanged
	}@Activity.java
- activity.mCurrentConfig = new Configuration(config)
}@ActivityThread.java

updateConfigurationLocked-->app.thread.scheduleConfigurationChanged(configuration)@ActivityManagerService.java-->
scheduleConfigurationChanged-->sendMessage(H.CONFIGURATION_CHANGED-->handleConfigurationChanged
-->applyConfigurationToResourcesLocked(更新mResConfiguration)@ActivityThread.java
updateConfiguration-->updateConfiguration@Resources.java


frameworks/base/core/java/android/app/ActivityThread.java
frameworks/base/core/java/android/app/ContextImpl.java
frameworks/base/core/java/android/app/Instrumentation.java
frameworks/base/core/java/android/app/LoadedApk.java
