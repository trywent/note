/***********************
 app进程启动,Activity关联到进程
 
*/

//应用程序提供的接口
ApplicationThread extends IApplicationThread.Stub{
- scheduleLaunchActivity
- scheduleResumeActivity
- schedulePauseActivity
- scheduleStopActivity
- scheduleDestroyActivity
- scheduleWindowVisibility
}@ActivityThread.java


//system进程入口
systemMain()

/*
 start
 ActivityManagerNative.getDefault().attachApplication
*/

startProcessLocked@ActivityManagerService.java-->Process.start("android.app.ActivityThread")-->
main{
- Looper.prepareMainLooper()
- ActivityThread thread = new ActivityThread()
- thread.attach(system/*false*/){
	- !system{
		- ViewRootImpl.addFirstDrawHandler
		- ActivityManagerNative.getDefault().attachApplication(mAppThread)//关联到ActivityManagerService
		- BinderInternal.addGcWatcher
		}
	- system{
		- mInstrumentation = new Instrumentation()
		- ContextImpl context = ContextImpl.createAppContext(getSystemContext().mPackageInfo){//context
			- getSystemContext()-->ContextImpl.createSystemContext(this)
			}	
		- mInitialApplication = context.mPackageInfo.makeApplication
		}
	- ViewRootImpl.addConfigCallback //view通知资源变化等....
	}@ActivityThread.java
- sMainThreadHandler = thread.getHandler()
- Looper.loop
}@ActivityThread.java


/*
 launch
 app.thread.scheduleLaunchActivity--> handleLaunchActivity
*/
startSpecificActivityLocked-->realStartActivityLocked-->
app.thread.scheduleLaunchActivity(new Intent(r.intent), r.appToken)@ActivityStackSupervisor.java-->
ApplicationThread.scheduleLaunchActivity@ActivityThread.java-->
scheduleLaunchActivity(Intent intent, IBinder token,ActivityInfo info, Configuration curConfig, int procState){
- updateProcessState(procState)
- ActivityClientRecord r = new ActivityClientRecord()
- r.token = token //设置ActivityRecord中 IApplicationToken.Stub appToken
- sendMessage(H.LAUNCH_ACTIVITY, r)-->handleLaunchActivity
}@ActivityThread.java

//加载并创建类，执行
handleLaunchActivity(ActivityClientRecord r, Intent customIntent, String reason){
- handleConfigurationChanged
- WindowManagerGlobal.initialize()
- Activity a =performLaunchActivity(r){
	- ContextImpl appContext = createBaseContextForActivity-->ContextImpl.createActivityContext--> //创建上下文
		-->ContextImpl{
			- mPackageInfo //LoadedApk
			- mClassLoader //ClassLoader
			}
	- java.lang.ClassLoader cl = appContext.getClassLoader-->mPackageInfo.getClassLoader@ContextImpl.java-->//loader
	 -->getClassLoader-->createOrUpdateClassLoaderLocked@LoadedApk.java
	- Activity activity = mInstrumentation.newActivity-->cl.loadClass(className).newInstance //加载activity
	- Application app = r.packageInfo.makeApplication
	- activity.attach(appContext,r.token)
	- activity.setTheme(theme) //theme
	- mInstrumentation.callActivityOnCreate(activity)
	- return activity
	}
  //activity启动成功
- handleResumeActivity(r.token)
- 启动不resume,performPauseActivityIfNeeded
}@ActivityThread.java



/*
 resume
 app.thread.scheduleResumeActivity--> handleResumeActivity--> ActivityManagerNative.getDefault().activityResumed
*/
resumeTopActivityInnerLocked-->next.app.thread.scheduleResumeActivity(next.appToken)@ActivityStack.java-->
scheduleResumeActivity-->handleResumeActivity-->
handleResumeActivity{
- performResumeActivity(IBinder token){
	- ActivityClientRecord r = mActivities.get(token)
	- r.activity.performResume@Activity.java
	- r.paused = false,r.stoped = false
	}
 //加入window,view
- r.window = r.activity.getWindow()
- View decor = r.window.getDecorView()
- ViewManager wm = a.getWindowManager()
- WindowManager.LayoutParams l = r.window.getAttributes()
- wm.addView(decor, l)-->//activity窗口加入WindowManager
	addView(View view)-->mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow)@WindowManagerImpl
	-->addView(View view,mContext.getDisplay(),mParentWindow){
	- parentWindow.adjustLayoutParamsForSubWindow(wparams){//设置参数
		- wp.token = mAppToken
		- wp.setTitle(mAppName)
		}@Window.java
	- ViewRootImpl root = new ViewRootImpl(view.getContext(), display)
	- mViews.add(view),mRoots.add(root)
	- root.setView(view)-->setView@ViewRootImpl.java
	}@WindowManagerGlobal.java
- Looper.myQueue().addIdleHandler(new Idler()) //idler
- ActivityManagerNative.getDefault().activityResumed
}

/*
 pause
 app.thread.schedulePauseActivity-->handlePauseActivity-->ActivityManagerNative.getDefault().activityPaused
*/
startPausingLocked-->prev.app.thread.schedulePauseActivity(r.appToken)@ActivityStack.java-->
schedulePauseActivity-->handlePauseActivity{
- performPauseActivity{
	- 
	}
- ActivityManagerNative.getDefault().activityPaused
}

/*
 stop
 app.thread.scheduleStopActivity-->handleStopActivity-->ActivityManager.getService().activityStopped
*/

stopActivityLocked-->app.thread.scheduleStopActivity(r.appToken)@ActivityStack.java-->
handleStopActivity(IBinder token, boolean show){
- StopInfo info = new StopInfo()
- performStopActivityInner(r, info, show){
	- performPauseActivityIfNeeded
	- r.activity.performStop
	- r.stopped = true
	}
- updateVisibility(r, show){
	- View v = r.activity.mDecor
	- show,r.activity.makeVisible
	- !show,v.setVisibility(View.INVISIBLE)
	}
- mH.post(info)-->ActivityManager.getService().activityStopped
}@ActivityThread.java



/*
 destory
 destroyActivityLocked-->app.thread.scheduleDestroyActivity-->ActivityManager.getService().activityDestroyed
*/
destroyActivityLocked-->r.app.thread.scheduleDestroyActivity(r.appToken@ActivityStack.java-->
handleDestroyActivity(IBinder token, boolean finishing){
- ActivityClientRecord r = performDestroyActivity(token, finishing){
	- ActivityClientRecord r = mActivities.get(token)
	- performPauseActivityIfNeeded(r)
	- mInstrumentation.callActivityOnDestroy(r.activity)
	- mActivities.remove(token)
	}
  //清除窗口
- WindowManagerGlobal.getInstance().closeAll(token)
- ActivityManager.getService().activityDestroyed(token)
}@ActivityThread.java


/*
 idle
 looper循环中加入idler.空闲时通知ActivityMananger
*/
handleResumeActivity-->Looper.myQueue().addIdleHandler(new Idler())
-->queueIdle{
- IActivityManager am = ActivityManager.getService()
- am.activityIdle(a.token)
}@Ilder@@ActivityThread.java

/*
 configuration
*/
scheduleActivityConfigurationChanged(overrideConfig)-->sendMessage(H.ACTIVITY_CONFIGURATION_CHANGED)
-->handleActivityConfigurationChanged-->performConfigurationChanged(activity,configuration){
- activity.onConfigurationChanged(config){
	- mWindow.onConfigurationChanged
	- mActionBar.onConfigurationChanged
	}@Activity.java
- activity.mCurrentConfig = new Configuration(config)
}@ActivityThread.java

updateConfigurationLocked-->app.thread.scheduleConfigurationChanged(configuration)@ActivityManagerService.java-->
scheduleConfigurationChanged-->sendMessage(H.CONFIGURATION_CHANGED-->handleConfigurationChanged
-->applyConfigurationToResourcesLocked(更新mResConfiguration)@ActivityThread.java
updateConfiguration-->updateConfiguration@Resources.java

/*
 service
*/
/创建服务
handleCreateService{
- packageInfo.getClassLoader()-->getClassLoader@LoadedApk.java
- cl.loadClass(data.info.name).newInstance()
}


frameworks/base/core/java/android/app/ActivityThread.java
frameworks/base/core/java/android/app/ContextImpl.java
frameworks/base/core/java/android/app/Instrumentation.java
frameworks/base/core/java/android/app/LoadedApk.java
