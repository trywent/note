//activity窗口的建立：
//创建的窗口用来保存应用窗口的布局信息
performLaunchActivity(初始化activity，并启动)-->activity.attach@ActivityThread.java-->
attach(设置activity相关信息，context,app,title){
- 创建窗口并初始化，PolicyManager.makeNewWindow-->makeNewWindow-->sPolicy.makeNewWindow@PolicyManager.java
	-->makeNewWindow-->new PhoneWindow{
			- mLayoutInflater = LayoutInflater //用于解析应用layout.xml
			}@Policy.java
- 初始化activity变量
- 设置窗口管理器，mWindow.setWindowManager-->setWindowManager-->setWindowManager-->
		WindowManagerImpl.getDefault()--new LocalWindowManager@Window.java
}@Activity.java



mDecor = generateDecor()-->new DecorView@PhoneWindow.java
//activity设置View,这个View被加入到窗口中
onCreate@Activity-->setContentView{
- view容器为空mContentParent，installDecor{
		- 创建mDecor，generateDecor	
		- 创建容器mContentParent = generateLayout(mDecor){
			- 
			- 从mDecor中查找mContentParent(是mDecor本身或子类)，
				contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT)
			- 
		}
		- decorContentParent = mDecor.findViewById(R.id.decor_content_parent)//ActionBarOverlayLayout.java
		- mDecorContentParent = decorContentParent
	}
- 根据view的资源id装入View，mLayoutInflater.inflate(layoutResID, mContentParent)
}@PhoneWindow.java

setLogo(id)-->mDecorContentParent.setLogo@PhoneWindow.java-->setLogo(id)-->mDecorToolbar.setLogo
@ActionBarOverlayLayout.java-->setLogo-->setLogo(getContext().getDrawable(resId))-->
setLogo(Drawable)@Toolbar.java

frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindow.java
frameworks/base/core/java/com/android/internal/widget/ActionBarOverlayLayout.java
frameworks/base/core/java/android/widget/Toolbar.java
_______________________
//获取contentInset，侧边：
setView-->sWindowSession.add(..mAttachInfo.mContentInsets..)@ViewRootImpl.java
add-->mService.addWindow@Session.java-->addWindow-->mPolicy.getContentInsetHintLw
@WindowManagerService.java-->getContentInsetHintLw@PhoneWindowManager.java

应用contentInset：
performTraversals{
- 设置值，mFitSystemWindowsInsets.set(mAttachInfo.mContentInsets)
- 设置到各个View中，host.fitSystemWindows(mFitSystemWindowsInsets)
}
=======================
//从layout.xml解析view
from(){
- LayoutInflater =(LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)
		-->new PhoneLayoutInflater
- return LayoutInflater
}@LayoutInflater.java


setContentView(R.layout.id)@Activity.java-->setContentView-->mLayoutInflater.inflate(id,mContentParent)
@PhoneWindow.java-->inflate-->inflate{
- res.getLayout(resource)-->getLayout-->loadXmlResourceParser(id, "layout")-->
	impl.loadXmlResourceParser@Resource.java-->loadXmlResourceParser@ResourceImpl.java
- inflate(XmlPullParser parser){
	- attrs = Xml.asAttributeSet(parser) //创建AttributeSet
	- createViewFromTag(new,attributeSet attrs)-->createView
	}
}@LayoutInflater.java

createView(name, attrs){
- constructor = sConstructorMap.get(name)
- consturctor==null{
	- mContext.getClassLoader().loadClass(name)//加载类
	- constructor = clazz.getConstructor(mConstructorSignature)
	}
- args[1] = attrs
- View view = constructor.newInstance(args)
}@LayoutInflater.java


frameworks/base/core/java/android/view/LayoutInflater.java
frameworks/base/core/java/com/android/internal/policy/PhoneLayoutInflater.java
frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
frameworks/base/services/java/com/android/server/wm/WindowManagerService.java
frameworks/base/core/java/android/util/Xml.java
frameworks/base/core/java/android/util/XmlPullAttributes.java
frameworks/base/core/java/android/util/AttributeSet.java
