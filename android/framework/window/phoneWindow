/*******************
 activity.attach创建窗口
 activity{ 
  phoneWindow--decorView //加入到ViewRootImpl
 }
 
 包含布局参数
*/
Window{
- WindowManager.LayoutParams mWindowAttributes
}@Window.java

PhoneWindow(this)@Activity.java-->PhoneWindow extends Window{
- mLayoutInflater = LayoutInflater //用于解析应用layout.xml
}@Policy.java


//设置name,和appToken
setWindowManager(WindowManager wm, IBinder appToken, String appName){
- mAppToken = appToken
- mAppName = appName
- mWindowManager = ((WindowManagerImpl)wm).createLocalWindowManager(this)
}@Window.java

//设置contentView,LayoutParams
onCreate-->getWindow().setContentView(layoutResID)@Activity-->setContentView{
- ViewGroup mContentParent==null
	installDecor{
		- DecorView mDecor= generateDecor-->new DecorView //包含content	
		- mContentParent = generateLayout(mDecor){
			- TypedArray a = getWindowStyle() //获取style
			- requestFeature //根据style,请求feature
			- WindowManager.LayoutParams params = getAttributes() //获取布局参数,并设置
			- View in = mLayoutInflater.inflate(layoutResource) //获取窗口资源layoutResource,创建窗口
			- decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT)) //加入到decor
			- 返回contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT)//com.android.internal.R.id.content 
		}
		- decorContentParent = mDecor.findViewById(R.id.decor_content_parent)//ActionBarOverlayLayout.java
		- mDecorContentParent = decorContentParent
	}
- 根据view的资源id装入View，mLayoutInflater.inflate(layoutResID, mContentParent)
}@PhoneWindow.java

//logo
setLogo(id)-->mDecorContentParent.setLogo@PhoneWindow.java-->setLogo(id)-->mDecorToolbar.setLogo
@ActionBarOverlayLayout.java-->setLogo-->setLogo(getContext().getDrawable(resId))-->
setLogo(Drawable)@Toolbar.java

//立体显示效果?
setElevation

frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindow.java
frameworks/base/core/java/com/android/internal/widget/ActionBarOverlayLayout.java
frameworks/base/core/java/android/widget/Toolbar.java
_______________________
//获取contentInset，侧边：
setView-->sWindowSession.add(..mAttachInfo.mContentInsets..)@ViewRootImpl.java
add-->mService.addWindow@Session.java-->addWindow-->mPolicy.getContentInsetHintLw
@WindowManagerService.java-->getContentInsetHintLw@PhoneWindowManager.java

应用contentInset：
performTraversals{
- 设置值，mFitSystemWindowsInsets.set(mAttachInfo.mContentInsets)
- 设置到各个View中，host.fitSystemWindows(mFitSystemWindowsInsets)
}
=======================
/*******************
 从layout.xml解析view

 
*/
from(){
- LayoutInflater =(LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)
		-->new PhoneLayoutInflater
- return LayoutInflater
}@LayoutInflater.java


setContentView(R.layout.id)@Activity.java-->setContentView-->mLayoutInflater.inflate(id,ViewGroup mContentParent)
@PhoneWindow.java-->inflate-->inflate{
- res.getLayout(resource)-->getLayout-->loadXmlResourceParser(id, "layout")-->
	impl.loadXmlResourceParser@Resource.java-->loadXmlResourceParser@ResourceImpl.java
- inflate(XmlPullParser parser){
	- AttributeSet attrs = Xml.asAttributeSet(parser) //创建AttributeSet
	- createViewFromTag(new,attributeSet attrs)-->createView(new,attributeSet attrs)
	}
}@LayoutInflater.java

createView(name, attrs){
- constructor = sConstructorMap.get(name)
- consturctor==null{
	- mContext.getClassLoader().loadClass(name)//加载类
	- constructor = clazz.getConstructor(mConstructorSignature)
	}
- args[1] = attrs
- View view = constructor.newInstance(args)
}@LayoutInflater.java


frameworks/base/core/java/com/android/internal/policy/PhoneWindow.java
frameworks/base/core/java/android/view/Window.java
frameworks/base/core/java/android/view/LayoutInflater.java
frameworks/base/core/java/com/android/internal/policy/PhoneLayoutInflater.java
frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
frameworks/base/services/java/com/android/server/wm/WindowManagerService.java
frameworks/base/core/java/android/util/Xml.java
frameworks/base/core/java/android/util/XmlPullAttributes.java
frameworks/base/core/java/android/util/AttributeSet.java
