/****************
 应用端：
*/

View.SYSTEM_UI_FLAG_FULLSCREEN 0x00000004//隐藏StatusBar
View.SYSTEM_UI_FLAG_HIDE_NAVIGATION 0x00000002//隐藏NaviBar
WindowManager.LayoutParams.FLAG_FULLSCREEN 0x00000400//隐藏StatusBar


//通过View设置systemui状态
setSystemUiVisibility(int visibility){
- mSystemUiVisibility = visibility
- mParent.recomputeViewAttributes(this)-->scheduleTraversals@ViewRootImpl.java
}@View.java

scheduleTraversals-->performTraversals/setView-->collectViewAttributes{
- dispatchCollectViewAttributes-->performCollectViewAttributes(AttachInfo attachInfo, int visibility){
	- attachInfo.mSystemUiVisibility |= mSystemUiVisibility
	}@View.java
  //将View的systemui信息设置到WindowManager.LayoutParams
- WindowManager.LayoutParams params = mWindowAttributes
- params.subtreeSystemUiVisibility = mAttachInfo.mSystemUiVisibility
}@ViewRootImpl.java-->


//kuwo
WindowManager.LayoutParams.flag=#1830118
mSystemUiVisibility=0x0


//amap
WindowManager.LayoutParams.flag=#1810580
mSystemUiVisibility=0x0



/****************
 服务端：
*/
View.STATUS_BAR_TRANSIENT		    //切换
View.STATUS_BAR_UNHIDE                      //隐藏标识
View.STATUS_BAR_TRANSLUCENT                 //半透明标识
View.STATUS_BAR_TRANSPARENT		    //透明标识
StatusBarManager.WINDOW_STATUS_BAR          //窗口标识
WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS //透明标识


//手机窗口信息
relayoutWindow(Session session, IWindow client,WindowManager.LayoutParams attrs){
- if (attrs != null) {
	- int systemUiVisibility = attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility
	- win.mSystemUiVisibility = systemUiVisibility
	}
}@WidnowManagerService.java

//设置状态
beginLayoutLw-->
updateSystemUiVisibilityLw{
- 若是锁屏窗口且即将隐藏则不操作
- 获取窗口的标识位，getSystemUiVisibility
-updateSystemBarsLw{//设置systemui窗口
	- 获取是否透明状态条和导航条的标记，applyTranslucentFlagLw
	- 计算状态条是否需要透明{
		- fullscreenDrawsStatusBarBackground&&dockedDrawsStatusBarBackground//两窗口为空时系统设置为透明
		}
	- 防止状态条窗口清除其它窗口的标记，statusBarHasFocus
	- 是否允许透明，areTranslucentBarsAllowed
	- 更新状态条mStatusBarController.updateVisibilityLw
	- 更新导航条mNavigationBarController.updateVisibilityLw
	}	
- 设置systemui，mHandler.post-->statusbar.setSystemUiVisibility 
	//设置到bar后，再回掉系统接口adjustSystemUiVisibilityLw
}@PhoneWindowManager.java


//设置可见/隐藏
finishPostLayoutPolicyLw-->mStatusBarController.setBarShowingLw


//policy中设置状态条，导航条设置隐藏/可见
mClearHideNavigationFlag/HideNavInputEventReceiver@PhoneWindowManager.java
reevaluateStatusBarVisibility@WindowManagerService.java-->adjustSystemUiVisibilityLw
@PhoneWindowManager.java-->mStatusBarController.adjustSystemUiVisibilityLw@BarController.java


//布局完成设置窗口
finishPostLayoutPolicyLw-->setBarShowingLw

//
adjustSystemUiVisibilityLw{
- mStatusBarController.adjustSystemUiVisibilityLw
- mNavigationBarController.adjustSystemUiVisibilityLw
}

___________________
//手势可见
SystemGesturesPointerEventListener.onSwipeFromTop-->requestTransientBars{
- mStatusBarController.showTransient-->设置状态TRANSIENT_BAR_SHOW_REQUESTED
- updateSystemUiVisibilityLw
}






/****************
 StatusBar服务（连接到systemui，systemui注册到当期服务mBarService.registerStatusBar(mCommandQueue)）

*/

//设置可见/隐藏
updateSystemUiVisibilityLw-->statusbar.setSystemUiVisibility@PhoneWindowManager.java-->
setSystemUiVisibility-->mBar.setSystemUiVisibility@StatusBarManagerService.java-->
setSystemUiVisibility-->notifyUiVisibilityChanged@PhoneStatusBar.java-->
statusBarVisibilityChanged-->adjustSystemUiVisibilityLw@WindowManagerService.java-->
adjustSystemUiVisibilityLw@PhoneWindowManager.java-->adjustSystemUiVisibilityLw{
- mStatusBarController.adjustSystemUiVisibilityLw -->setBarShowingLw-->mWin.showLw@BarController.java
- mNavigationBarController.adjustSystemUiVisibilityLw
}@BarController.java

frameworks/base/services/core/java/com/android/server/statusbar/StatusBarManagerInternal.java
frameworks/base/services/core/java/com/android/server/statusbar/StatusBarManagerService.java
____________________________
//Barcotorler: phonewindowmanager直接控制systemui的显示，隐藏
mStatusBarController.setWindow(mStatusBar)
mNavigationBarController.setWindow(mNavigationBar)


//更新状态值，并返回计算脏后的值
updateVisibilityLw{
- isTransientShowing
- isTransientShowRequested
- 设置状态setTransientBarState
- 赋值vis
}

//BarController设置窗口Visible，windowState
mNavigationBarController.setBarShowingLw-->mWin.showLw
mStatusBarController.setBarShowingLw-->mWin.showLw

frameworks/base/services/java/com/android/server/wm/WindowManagerService.java
frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
frameworks/base/policy/src/com/android/internal/policy/impl/BarController.java
frameworks/base/services/core/java/com/android/server/policy/StatusBarController.java


/****************
  systemUI:
*/

start{
- 获取服务，mBarService
- 创建mCommandQueue
- 注册到服务mBarService.registerStatusBar(mCommandQueue)
}

//setSystemUiVisibility
setSystemUiVisibility-->H.handleMesssage(MSG_SET_SYSTEMUI_VISIBILITY/MSG_SHOW_RECENT_APPS)-->mCallbacks.get(i)
@CommandQueue.java-->setSystemUiVisibility{
- computeStatusBarMode
- notifyUiVisibilityChanged-->statusBarVisibilityChanged-->adjustSystemUiVisibilityLw@WindowManagerService.java-->
	adjustSystemUiVisibilityLw@PhoneWindowManager.java-->adjustSystemUiVisibilityLw-->
	setBarShowingLw-->mWin.showLw@BarController.ja
}@StatusBar.java

setSystemUiVisibility{
- 若是切换状态，设置显示并设置延时自动隐藏
- notifyUiVisibilityChanged
}@PhoneStatusBar.java

//显示应用图标
PhoneStatusBarPolicy(初始化图标)@PhoneStatusBarPolicy.java
(更新图标)SyncHandler.handleMessage-->sendSyncStateIntent@SyncManager.java-->mIntentReceiver.onReceive
(ACTION_SYNC_STATE_CHANGED)-->updateSyncState@


frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
frameworks/base/services/java/com/android/server/StatusBarManagerService.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java
frameworks/base/services/java/com/android/server/content/SyncManager.java




