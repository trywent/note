/***************************
 choreographer:
*/

mCallbackQueues //回调队列数组，三种类型CALLBACK_INPUT，CALLBACK_ANIMATION，CALLBACK_TRAVERSAL

//可见性，动画，焦点变化都会重画
performTraversals/draw/invalidateChildInParent/handleAppVisibility-->scheduleTraversals-->
mChoreographer.postCallback(Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null)-->
mTraversalRunnable.run-->doTraversal-->performTraversals@ViewRootImpl.java

加入回调：
postCallback-->postCallbackDelayed-->postCallbackDelayedInternal{
- 加入回调容器中，mCallbackQueues[callbackType].addCallbackLocked
- 发送同步信号{
	- 立即发送，scheduleFrameLocked{
		- 主线程，scheduleVsyncLocked-->scheduleVsyncLocked-->
			mDisplayEventReceiver.scheduleVsync
		- 其他线程，sendMessageAtFrontOfQueue(MSG_DO_SCHEDULE_VSYNC)-->
			FrameHandler.handleMessage-->doScheduleVsync
		}
	- 特定时间发送，sendMessageAtTime(MSG_DO_SCHEDULE_CALLBACK)-->FrameHandler.handleMessage
		-->doScheduleCallback-->scheduleFrameLocked
	}
}


更新帧：
FrameDisplayEventReceiver.onVsync-->mHandler.sendMessageAtTime(发送中有回调)-->
FrameDisplayEventReceiver.run-->doFrame{
- !mFrameScheduled,没有帧处理返回
- 计算帧同步时间，到现在处理经过的时间。有遗漏帧(jitterNanos >= mFrameIntervalNanos){
	- 则将帧同步时间修改为，frameTimeNanos = startNanos - lastFrameOffset
	}
- 若修改后时间小于最后一次时间，则处理下一次同步信号，scheduleVsyncLocked
- 更新mLastFrameTimeNanos
- doCallbacks(Choreographer.CALLBACK_INPUT, frameTimeNanos);
- doCallbacks(Choreographer.CALLBACK_ANIMATION, frameTimeNanos);
- doCallbacks(Choreographer.CALLBACK_TRAVERSAL, frameTimeNanos);
}

doCallbacks(int callbackType, long frameTimeNanos){
- 获取当前时间，需要处理的该类型回调。mCallbackQueues[callbackType].extractDueCallbacksLocked(now)
- 遍历容器中回调并执行，c.run(frameTimeNanos)
- 回收所有回调，recycleCallbackLocked(callbacks)
}


doScheduleVsync-->scheduleVsyncLocked@Choreographer.java


postFrameCallbackDelayed(下一帧要执行的回调)-->postCallbackDelayedInternal(CALLBACK_ANIMATION)-->
scheduleFrameLocked-->scheduleVsyncLocked-->mDisplayEventReceiver.scheduleVsync

frameworks/base/core/java/android/view/Choreographer.java
===============================================


_______________________________________________
处理frame：
scrollTo-->postInvalidateOnAnimation(下一个动画帧，调用invaliad)-->attachInfo.mViewRootImpl.
(将要实现动画的View传入ViewRootImpl)dispatchInvalidateOnAnimation(view)@View.java-->
mInvalidateOnAnimationRunnable.addView-->
InvalidateOnAnimationRunnable{addView-->mViews.add(加入到mView)--postIfNeededLocked-->
mChoreographer.postCallback}@ViewRootImpl.java-->postCallback-->postCallbackDelayed-->
postCallbackDelayedInternal-->mHandler.sendMessageAtTime-->FrameHandler{handleMessage-->
doScheduleCallback}-->scheduleFrameLocked-->(监听Vsycn)scheduleVsyncLocked-->
mDisplayEventReceiver.scheduleVsync@Choreographer.java-->scheduleVsync-->nativeScheduleVsync(mReceiverPtr)@DisplayEventReceiver.java-->nativeScheduleVsync-->receiver->scheduleVsync-->
NativeDisplayEventReceiver::scheduleVsync-->mReceiver.requestNextVsync@android_view_DisplayEventReceiver.cpp
-->requestNextVsync-->mEventConnection->requestNextVsync@DisplayEventReceiver.cpp

(添加回调)InvalidateOnAnimationRunnable.addView-->postIfNeededLocked-->
mChoreographer.postCallback(CALLBACK_ANIMATION)@ViewRootImpl.java

将回调加入队列：
postCallback-->postCallbackDelayed-->postCallbackDelayedInternal-->mCallbackQueues[callbackType].
addCallbackLocked-->(创建callback并加入队列)obtainCallbackLocked@Choreographer.java

接收到Vsync，处理frame：
NativeDisplayEventReceiver::handleEvent-->env->CallVoidMethod(dispatchVsync)@
android_view_DisplayEventReceiver.cpp-->dispatchVsync-->onVsync@DisplayEventReceiver.java
-->FrameDisplayEventReceiver.onVsync-->mHandler.sendMessageAtTime(按当前时间顺序，加入到消息队列)-->
FrameDisplayEventReceiver.run-->doFrame-->doCallbacks(输出花费时间)-->c.run@Choreographer.java
-->InvalidateOnAnimationRunnable.run-->(遍历所有的View)invalidate@ViewRootImpl.java


getEvents-->getEvents-->BitTube::recvObjects@DisplayEventReceiver.cpp
________________________________
事件：
(添加回调)scheduleTraversals-->scheduleConsumeBatchedInput-->mChoreographer.postCallback(CALLBACK_INPUT)@ViewRootImpl.java

(处理pending event，添加回调)WindowInputEventReceiver{(当有未处理事件时)onBatchedInputEventPending-->
scheduleConsumeBatchedInput}-->mChoreographer.postCallback(CALLBACK_INPUT)@ViewRootImpl.java

NativeInputEventReceiver::handleEvent-->


dispatchBatchedInputEventPending@InputEventReceiver.java
(调用回调)doFrame-->doCallbacks(输出花费时间)-->c.run@Choreographer.java-->mConsumedBatchedInputRunnable
.run-->doConsumeBatchedInput@ViewRootImpl.java

处理inputEvent：
doCallbacks(输出花费时间)-->c.run@Choreographer.java-->ConsumedBatchedInputRunnable.run-->
doConsumeBatchedInput-->mInputEventReceiver.consumeBatchedInputEvents(等待Vsync，处理事件)--
(处理该View上的事件)doProcessInputEvents@ViewRootImpl.java

处理inputEvent：
dispatchInputEvent-->onInputEvent@InputEventReceiver.java-->WindowInputEventReceiver.
onInputEvent-->enqueueInputEvent-->enqueueInputEvent-->(若不是立即处理事件)
scheduleProcessInputEvents-->ViewRootHandler.handleMessage-->doProcessInputEvents
-->deliverInputEvent@ViewRootImpl.java

________________________________
处理Travel：
(添加回调)scheduleTraversals-->mChoreographer.postCallback(CALLBACK_TRAVERSAL)--
scheduleConsumeBatchedInput-->mChoreographer.postCallback(CALLBACK_INPUT)@ViewRootImpl.java


doCallbacks(Choreographer.CALLBACK_TRAVERSAL)-->c.run@Choreographer.java-->TraversalRunnable.run
-->doTraversal-->performTraversals

display的刷新率60fps

_________________________________
事件对应着某一帧。帧上的时间处理方法，处理该帧存在时发生的事件。

frameworks/base/core/java/android/view/View.java
frameworks/base/core/java/android/view/ViewRootImpl.java
frameworks/base/core/java/android/view/Choreographer.java
frameworks/base/core/java/android/view/DisplayEventReceiver.java
frameworks/base/core/jni/android_view_DisplayEventReceiver.cpp
frameworks/base/core/java/android/view/InputEventReceiver.java
frameworks/native/libs/gui/DisplayEventReceiver.cpp



