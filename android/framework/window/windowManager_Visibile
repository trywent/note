/*
ActivityManager启动app完成后，设置应用可见WindowManager.setAppVisibility

WindowManager知道窗口被设置可见后，通知应用进程进行布局，绘制..

动画管理中显示窗口WindowStateAnimator.performShowLocked

*/
//窗口管理器设置应用显示：
setTokenVisibilityLocked-->wtoken.sendAppVisibilityToClients@WindowManagerService.java
-->dispatchAppVisibility()-->handleAppVisibility-->scheduleTraversals-->mTraversalRunnable.run
-->doTraversal-->performTraversals@ViewRootImpl.java

//创建surface：
performTraversals-->(先布局)
relayoutWindow@ViewRootImpl.java-->relayout@Session.java-->relayoutWindow-->
relayoutWindow{
- 创建窗口surface，createSurfaceLocked
- 设置窗口可视状态，win.mViewVisibility = viewVisibility
}


绘制完成：
performTraversals-->(再绘制)
performDraw@ViewRootImpl.java-->finishDrawing@Session.java-->finishDrawingWindow-->
finishDrawingWindow(Session session, IWindow client){
- 获取窗口windowForClientLocked(session, client, false)
- 窗口不为空，且win.mWinAnimator.finishDrawingLocked()为true{
	- 需要调整壁纸，adjustWallpaperWindowsLocked
	- 重新布局并绘制，performLayoutAndPlaceSurfacesLocked
	}
}

performLayoutAndPlaceSurfacesLockedInner{
- 窗口的surface已经创建，winAnimator.commitFinishDrawingLocked
}
==========================
设置开始窗口，应用窗口可见性，执行动画
__________________________
开始窗口startingWindow：


从activityStack中调用：
startActivityLocked-->
setAppStartingWindow(IBinder token, String pkg,
            int theme, CompatibilityInfo compatInfo,
            CharSequence nonLocalizedLabel, int labelRes, int icon,
            int windowFlags, IBinder transferFrom, boolean createIfNeeded){
- 检查权限
- 获取到对应的AppWindowToken wtoken = findAppWindowToken(token)
- 从前一个activity切换过来，transferFrom{
	- 前一activity的应用窗口不为空，AppWindowToken ttoken = findAppWindowToken{
		-前个窗口中startingWindow不为空{
			- 将前个窗口的开始窗口设为当前应用窗口的开始窗口
			- 重新加入开始窗口到mWindows,addWindowToListInOrderLocked
			- 将前个窗口的动画数据设到当前应用窗口
			- 更新焦点，updateFocusedWindowLocked		 
			- 执行performLayoutAndPlaceSurfacesLocked
			- 返回return
			}
		- 前应用窗口的startingData不为空{
			- 将startingData设置到当前应用窗口
			- 发送消息mH.obtainMessage(H.ADD_STARTING)-->
			}
		- 若存在thumbnail动画，将其设置为当前窗口的AppAnimator.thumbnail
		}
	}
- 不需创建开始窗口则返回
- 检测窗口主题中的属性，有些应用不需开始窗口{
	- 若是透明窗口Window_windowIsTranslucent，返回
	- 若是悬浮窗口Window_windowIsFloating，返回
	- 若显示壁纸Window_windowShowWallpaper，且壁纸窗口存在，返回	
	}
- wtoken.startingData = new StartingData//创建开始窗口数据
- ADD_STARTING，-->handleMessage(){ //创建startingWindow
	- 创建窗口中View，mPolicy.addStartingWindow	
	}
}
__________________________
/*********************
 将可见性发生变化的窗口加入到mOpeningApps,或mClosingApps容器中
 设置相应隐藏,显示动画
*/
setAppVisibility{
- 检查是否有权限执行
- 从mWindowMap中查找对应的AppWindowToken
- 正在执行一个窗口切换mNextAppTransition,延迟设置{
		- 设置可视，加入到容器mOpeningApps.add，
		  设置客户端可视wtoken.sendAppVisibilityToClients{
			- 不隐藏startingwindow
			- mClient是ViewRootImpl中实现的窗口W。win.mClient.dispatchAppVisibility{
				- 绘制View。W.dispatchAppVisibility@ViewRootImpl.java
			}			
		}

		- 设置隐藏，加入到容器mClosingApps.add
		- 返回return
	}
 
- 设置View可见性，进行布局，并设置相应动画。
	 setTokenVisibilityLocked(AppWindowToken wtoken, WindowManager.LayoutParams lp,
            boolean visible, int transit, boolean performLayout){
		- 设置View的可视性，绘制View。wtoken.sendAppVisibilityToClients{
			- 设置ViewRootImpl中的窗口mAppVisible //设置app是否可见，这个决窗口，view是否可见
			}
		- 可视性发生变化{
			- 动画值不为空，设置应用窗口动画wtoken.mAppAnimator类型
				applyAnimationLocked(wtoken, lp, transit, visible){
					- 设置AppWindowToken中AppWindowAnimator动画，进入，退出...
				}
			- 更新appToken中窗口可视性，若没有设置应用窗口动画，
			  则设置窗口动画win.mWinAnimator.applyAnimationLocked{
					- 设置WindowState中WindowStateAnimator动画
				}
			}
			- 窗口发生切换，{
				- 
				- 是否重布局。则更新输入法焦点窗口，执行performLayoutAndPlaceSurfacesLocked
				- inputMonitor更新输入窗口
			}
		}
		- 若动画正在进行返回需要延迟
			
	}

- 更新Activity状态，wtoken.updateReportedVisibilityLocked@AppWindowToken.java
}@WindowManagerService.java


更新activityManager端状态:
updateReportedVisibilityLocked{
- 遍历apptoken的所有窗口，记录，绘制状态，可见状态
- 窗口已经绘制，更新状态到activity端。service.mH.sendMessage(REPORT_APPLICATION_TOKEN_DRAWN)
- 窗口已经显示，更新状态到activity。service.mH.sendMessage(REPORT_APPLICATION_TOKEN_WINDOWS)
}@AppWindowToken.java



H.handleMessage{
- REPORT_APPLICATION_TOKEN_WINDOWS{
	- wtoken.appToken.windowsVisible/Gone{
			- activity.windowsVisible/windowsGone
		}@ActivityRecord.java
	}
- REPORT_APPLICATION_TOKEN_DRAWN{
	- wtoken.appToken.windowsDrawn{
			- activity.windowsDrawn()
		}@ActivityRecord.java
	}

}@WindowManagerService.java

frameworks/base/services/java/com/android/server/wm/AppWindowToken.java
frameworks/base/services/java/com/android/server/am/ActivityRecord.java
___________________________
设置将要执行的动画mNextAppTransition：
prepareAppTransition(int transit, boolean alwaysKeepCurrent){
- 检查权限
- 屏幕打开{
	- 若mNextAppTransition没有设置,则设置为transit
	- 若mNextAppTransition被设置且不强制保持{
			- 若是任务打开动画，且下个动画是任务关闭。则设置替换下个动画
			- 若是activity打开动画，且下个动画是activity关闭。则替换下个动画
		}
	}
- 设置切换状态的变量(mAppTransitionReady...)
- 发送切换动画超时消息APP_TRANSITION_TIMEOUT
}


执行动画：
executeAppTransition{
- 检查权限
- 若mNextAppTransition被设置，执行performLayoutAndPlaceSurfacesLocked 
}

刷新窗口：
performLayoutAndPlaceSurfacesLockedInner{
...
- 准备好切换mAppTransitionReady==true,handleAppTransitionReadyLocked{

}

- 动画执行完成且mAppTransitionRunning状态没有更新，handleAnimatingStoppedAndTransitionLocked{

}
...
}


===============
app切换动画:<style name="Animation.Activity">@style.xml
TRANSIT_NONE
    /** A window in a new activity is being opened on top of an existing one in the same task. */
TRANSIT_ACTIVITY_OPEN //窗口打开，显示到同一task中的当前窗口之上
    /** The window in the top-most activity is being closed to reveal the
     * previous activity in the same task. */
TRANSIT_ACTIVITY_CLOSE //窗口关闭，显示同一task中前个窗口
    /** A window in a new task is being opened on top of an existing one
     * in another activity's task. */
TRANSIT_TASK_OPEN //一个新task中窗口打开，显示到另一task的activity的窗口上
    /** A window in the top-most activity is being closed to reveal the
     * previous activity in a different task. */
TRANSIT_TASK_CLOSE //窗口关闭，显示另一task的窗口
    /** A window in an existing task is being displayed on top of an existing one
     * in another activity's task. */
TRANSIT_TASK_TO_FRONT //一个task中窗口，显示到其它task之上
    /** A window in an existing task is being put below all other tasks. */
TRANSIT_TASK_TO_BACK //一个task中窗口，移到到其它task之下
    /** A window in a new activity that doesn't have a wallpaper is being opened on top of one that
     * does, effectively closing the wallpaper. */
TRANSIT_WALLPAPER_CLOSE //一个没有壁纸的新窗口，打开到一个有壁纸的窗口之上
    /** A window in a new activity that does have a wallpaper is being opened on one that didn't,
     * effectively opening the wallpaper. */
TRANSIT_WALLPAPER_OPEN //一个有壁纸的新窗口，打开到一个没有壁纸的窗口之上
    /** A window in a new activity is being opened on top of an existing one, and both are on top
     * of the wallpaper. */
TRANSIT_WALLPAPER_INTRA_OPEN //窗口打开到一个窗口之上，两个都有壁纸
    /** The window in the top-most activity is being closed to reveal the previous activity, and
     * both are on top of the wallpaper. */
TRANSIT_WALLPAPER_INTRA_CLOSE //窗口关闭并显示前个窗口，两个都有壁纸


@frameworks/base/services/java/com/android/server/wm/AppTransition.java
动画文件：
WindowAnimation_taskOpenEnterAnimation
WindowAnimation_taskOpenExitAnimation
px3/out/target/common/R/android/R.java

