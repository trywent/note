/************************************
  PowerManagerService android8.0

*/
PARTIAL_WAKE_LOCK	//cpu运行，屏幕允许关闭
SCREEN_DIM_WAKE_LOCK	//屏微亮，按键等允许关闭
SCREEN_BRIGHT_WAKE_LOCK	//屏亮状态，按键等允许关闭
FULL_WAKE_LOCK		//屏和按键都亮
DOZE_WAKE_LOCK		//

WAKEFULNESS_ASLEEP	//睡眠状态(要睡眠，可能没有睡着，只能wakeup唤醒。一般先经过dozing状态
WAKEFULNESS_AWAKE	//唤醒状态，goToSleep可以进入睡眠
WAKEFULNESS_DREAMING	//浅睡状态，充电时？
WAKEFULNESS_DOZING	//瞌睡

DIRTY_WAKEFULNESS	//睡眠唤醒状态发生变化
DIRTY_WAKE_LOCKS	//锁发生变化
DIRTY_USER_ACTIVITY 	//用户操作发生变化
DIRTY_SETTINGS		//设置发生变化

//启动
systemReady{
- 创建mDisplayPowerController(灯光服务mLightsService)
- 注册广播接收器，
- 注册数据库监听器，
- updateSettingsLocked(读取数据库中的设置值)@PowerManagerService.java
}@PowerManagerService.java

//开始检查是否动画结束：
BootCompletedReceiver(ACTION_BOOT_COMPLETED)-->startWatchingForBootAnimationFinished


设置超时时间,通过数据库：Settings.System.SCREEN_OFF_TIMEOUT

//数据库变化：
SettingsObserver.onChange-->handleSettingsChangedLocked{
- 从数据库中获取最新值，updateSettingsLocked
- 更新状态，updatePowerStateLocked
}-->

//窗口管理器修改休眠时间：
performLayoutAndPlaceSurfacesLockedInner-->mPowerManager.setUserActivityTimeoutOverrideFromWindowManager
@WindowManagerService.java-->setUserActivityTimeoutOverrideFromWindowManager-->
setUserActivityTimeoutOverrideFromWindowManagerInternal-->
mUserActivityTimeoutOverrideFromWindowManager = timeoutMillis@PowerManagerService.java


//更新状态(亮屏还是黑屏)：
updateUserActivitySummaryLocked{
- 获取黑屏倒计时值，getScreenOffTimeoutLocked{
	- 判断是否设置超时黑屏值，isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked  	
	- 
	}(mScreenOffTimeoutSetting)
- 更新屏幕状态值，mUserActivitySummary
}

//电池状态处理(DIRTY_BATTERY_STATE)：
BatteryReceiver.onReceive(ACTION_BATTERY_CHANGED)-->handleBatteryStateChangedLocked{
- 设置标识位，DIRTY_BATTERY_STATE
- 更新状态updatePowerStateLocked
}

//用户操作状态更新(DIRTY_USER_ACTIVITY)： 底层事件(输入事件):
InputDispatcher::pokeUserActivityLocked-->doPokeUserActivityLockedInterruptible-->
mPolicy->pokeUserActivity@InputDispatcher.cpp-->NativeInputManager::pokeUserActivity
@com_android_server_input_InputManagerService.cpp-->android_server_PowerManagerService_userActivity
@com_android_server_power_PowerManagerService.cpp-->userActivityFromNative-->
userActivityInternal@PowerManagerService.java

userActivity-->userActivityInternal

userActivityInternal{
- userActivityNoUpdateLocked{
	- 更新，mLastUserActivityTimeNoChangeLights，设置DIRTY_USER_ACTIVITY
	- 或更新，mLastUserActivityTime，设置DIRTY_USER_ACTIVITY
	}
- 需要更新，updatePowerStateLocked
}

/*
 睡眠状态处理(DIRTY_WAKEFULNESS)：
*/
触摸事件唤醒：
NativeInputManager::interceptMotionBeforeQueueing-->ativeInputManager::handleInterceptActions{
}@com_android_server_input_InputManagerService.cpp

//处理pwr按键：
NativeInputManager::interceptKeyBeforeQueueing-->NativeInputManager::handleInterceptActions{
- 进入休眠，android_server_PowerManagerService_goToSleep
- 唤醒，android_server_PowerManagerService_wakeUp
}@com_android_server_input_InputManagerService.cpp

//由pwr键进入休眠：
android_server_PowerManagerService_goToSleep@com_android_server_power_PowerManagerService.cpp-->
goToSleepFromNative-->goToSleepInternal@PowerManagerService.java

//由pwr键唤醒：
android_server_PowerManagerService_wakeUp@com_android_server_power_PowerManagerService.cpp-->
wakeUpFromNative-->wakeUpInternal{@PowerManagerService.java

//休眠：
goToSleep-->goToSleepInternal{
- 设置状态值，goToSleepNoUpdateLocked{
		- 发送睡眠通知，
		- 设置状态值mWakefulness = WAKEFULNESS_ASLEEP，标识位DIRTY_WAKEFULNESS
		- 统计清除唤醒锁，mWakeLocks
	}
- 需要更新状态，则更新updatePowerStateLocked
}@PowerManagerSerivce.java

//唤醒：
wakeUpInternal{
- 设置状态值,wakeUpNoUpdateLocked{
	- 若从休眠中唤醒，则发送通知sendPendingNotificationsLocked
	- 设置更新值mWakefulness = WAKEFULNESS_AWAKE，DIRTY_WAKEFULNESS
	}
- 需要更新状态，则更新updatePowerStateLocked
}@PowerManagerService.java



//更新状态:(更新屏幕状态，决定是否进入休眠)
updatePowerStateLocked{
//第零阶段
- 充电状态发生变化，updateIsPoweredLocked{
		- 通过BatteryService获取是否充电，充电类型，当前电量
		- 如果是充电状态，若需唤醒设备则执行唤醒wakeUpNoUpdateLocked
		- 更新用户活动时间，userActivityNoUpdateLocked
		- 若是无线充电，则发送通知
	}
- 是否保持亮屏，更新mStayOn状态，updateStayOnLocked
//第一阶段,获取应用锁的状态？
- 更新mWakeLockSummary值，updateWakeLockSummaryLocked{
	- 收集mWakeLocks中所有锁的状态
	- PARTIAL_WAKE_LOCK类型锁，设置WAKE_LOCK_CPU    //这里可以设置睡眠状态下不锁定
	- FULL_WAKE_LOCK类型锁，若不是睡眠状态{
		- 设置，锁定cpu，打开屏幕背光，按键背光
		- 若是苏醒状态，设置WAKE_LOCK_STAY_AWAKE
		}
	- SCREEN_BRIGHT_WAKE_LOCK类型锁，不是睡眠状态{
		- 锁定cpu，亮屏
		- 若是苏醒状态，设置WAKE_LOCK_STAY_AWAKE
		}
	....
	}
- 更新mUserActivitySummary，updateUserActivitySummaryLocked(不是睡眠状态){
	- 若最近用户操作时间mLastUserActivityTime，比最近唤醒时间mLastWakeTime大。{
		- 根据当前操作时间，更新黑屏计时
		- 黑屏计时没有超时，设置USER_ACTIVITY_SCREEN_BRIGHT
		- 黑屏计时超时则设置超时时间加上黑屏时间端，还超时则设置USER_ACTIVITY_SCREEN_DIM 		
		}
	- 用户操作影响黑屏，发送计时广播MSG_USER_ACTIVITY_TIMEOUT-->PowerManagerHandler.handleMessage-->
		handleUserActivityTimeout
	}
- 更新睡眠状态值，updateWakefulnessLocked{
		-要进入息屏休眠，
		 - 小憩，napNoUpdateLocked
		 - 进入睡眠，goToSleepNoUpdateLocked
	}
//第二阶段
- 设置睡眠，updateDreamLocked-->scheduleSandmanLocked-->mHandler.sendMessage(MSG_SANDMAN)-->
	    PowerManagerHandler.handleMessage-->handleSandman	
- 设置显示，updateDisplayPowerStateLocked{
		- 获取要设置的屏幕状态，getDesiredScreenPowerStateLocked{
			- 若是pwr键键入休眠WAKEFULNESS_ASLEEP，返回关屏
			}
		- 若状态与前面的不同{
			- 若是黑屏，记录设置黑屏的时间
			- 状态发生改变，设置状态nativeSetPowerState
		}
		- 获取屏幕亮度值
		- 设置屏幕亮度，mDisplayPowerController.requestPowerState
	}
//第三阶段
- 发送休眠/唤醒的通知，sendPendingNotificationsLocked
//第四阶段
- 是否要防止睡眠，或防止息屏，updateSuspendBlockerLocked

}

frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java
-----------------------------
sendNextBroadcast-->sendWakeUpBroadcast

frameworks/base/services/java/com/android/server/power/Notifier.java
_____________________________
更新屏幕状态：
mDisplayPowerController.requestPowerState@PowerManagerService.java-->
requestPowerState-->sendUpdatePowerStateLocked@DisplayPowerController.java

sendUpdatePowerState-->sendUpdatePowerStateLocked-->mHandler.sendMessage(msg)-->
(处理消息)DisplayControllerHandler.handleMessage(MSG_UPDATE_POWER_STATE)-->updatePowerState
-->setScreenOn@DisplayPowerController.java


进入休眠：
setScreenOn/setScreenBrightness-->scheduleScreenUpdate-->postScreenUpdateThreadSafe
-->mHandler.post(mScreenUpdateRunnable)-->mScreenUpdateRunnable.run-->mPhotonicModulator
.setState-->PhotonicModulator.setState-->AsyncTask.THREAD_POOL_EXECUTOR.execute(mTask)
-->mTask.run-->(亮屏或息屏)mDisplayBlanker.unblankAllDisplays/blankAllDisplays/setBrightness
@DisplayPowerState.java-->nativeSetAutoSuspend@PowerManagerService.java-->nativeSetAutoSuspend
@com_android_server_power_PowerManagerService.cpp-->autosuspend_enable/autosuspend_disable@autosuspend.c

frameworks/base/services/java/com/android/server/power/DisplayPowerState.java
frameworks/base/services/java/com/android/server/power/DisplayPowerController.java


设置休眠(或是屏幕状态)：
updateDisplayPowerStateLocked-->nativeSetPowerState@PowerManagerService.java-->
nativeSetPowerState{
- 设置gScreenOn，gScreenBright
}@com_android_server_power_PowerManagerService.cpp

updatePowerState

frameworks/base/services/java/com/android/server/power/PowerManagerService.java
frameworks/base/services/jni/com_android_server_power_PowerManagerService.cpp
frameworks/base/services/jni/com_android_server_input_InputManagerService.cpp
_____________________________
cpu状态：
updateSuspendBlockerLocked{
- 是否有应用获取锁防止cpu睡眠，mWakeLockSummary
- 是否是亮屏或用户在操作，防止睡眠。needDisplaySuspendBlocker
- 若有应用获取锁则mWakeLockSuspendBlocker.acquire()，否则释放mWakeLockSuspendBlocker.release()
- 若亮屏则获取锁mDisplaySuspendBlocker.acquire，否则释放mDisplaySuspendBlocker.release
}

//获取锁："PowerManagerService.WakeLocks"
updateSuspendBlockerLocked-->mWakeLockSuspendBlocker.acquire()
SuspendBlockerImpl.acquire-->nativeAcquireSuspendBlocker@PowerManagerService.java-->
nativeAcquireSuspendBlocker-->acquire_wake_lock@com_android_server_power_PowerManagerService.cpp
-->acquire_wake_lock-->write("/sys/power/wake_lock","PowerManagerService.WakeLocks")@power.c

//释放锁：
mWakeLockSuspendBlocker.release-->SuspendBlockerImpl.release-->nativeReleaseSuspendBlocker
@PowerManagerService.java-->release_wake_lock@com_android_server_power_PowerManagerService.cpp-->
write(g_fds[RELEASE_WAKE_LOCK], id, strlen(id)-->向"/sys/power/wake_unlock"中写数据@power.c

system/core/charger/power.c

/************************************
  
*/
开始或停止睡眠：
autosuspend_enable-->autosuspend_init{
- autosuspend_earlysuspend_init
- autosuspend_autosleep_init
- autosuspend_wakeup_count_init

}--autosuspend_ops->enable()

autosuspend_disable-->autosuspend_init{
- autosuspend_earlysuspend_init
- autosuspend_autosleep_init
- autosuspend_wakeup_count_init

}--autosuspend_ops->disable()

_____________________________
autosuspend_earlysuspend_init{
- 打开文件"/sys/power/state"，写入"on"
- 开始进程，start_earlysuspend_thread{
		- 访问"/sys/power/wait_for_fb_sleep"，"/sys/power/wait_for_fb_wake"正常
		- pthread_create(earlysuspend_thread_func),earlysuspend_thread_func{
			- 等待更新状态EARLYSUSPEND_MEM，wait_for_fb_sleep(是否进入睡眠)
			- 睡眠后等待更新状态EARLYSUSPEND_ON，wait_for_fb_wake(是否退出)
		}	
	}
- 返回(enabel/disable)操作函数，autosuspend_earlysuspend_ops
}@autosuspend_earlysuspend.c

autosuspend_earlysuspend_enable{ //进入早期睡眠
- 进入早期休眠，write("/sys/power/state","mem")
- 等待进入早期休眠(关屏)，pthread_cond_wait(&earlysuspend_cond)
}
autosuspend_earlysuspend_disable{//退出早期睡眠
- 退出早期休眠，write("/sys/power/state","on") 
- 等待退出，pthread_cond_wait(&earlysuspend_cond)
}
_____________________________
autosuspend_autosleep_init{
- 打开文件"/sys/power/autosleep"，若失败则返回null
- 打开成功
	- 向打开的文件中写"off"，autosuspend_autosleep_disable
	- 返回(enabel/disable)操作函数，autosuspend_autosleep_ops
}@autosuspend_autosleep_init

autosuspend_autosleep_enable(写"mem")
autosuspend_autosleep_disable(写"off")
_____________________________
autosuspend_wakeup_count_init{
- 文件是否访问正常，"/sys/power/state"，"/sys/power/wakeup_count"
- 开始睡眠处理进程，pthread_create(suspend_thread_func)，suspend_thread_func{	
		- 读取唤醒锁数，read("/sys/power/wakeup_count")
		- 等待信号量，sem_wait
		- 写入唤醒锁数，write("/sys/power/wakeup_count")
		- 进入休眠，write("/sys/power/state"，"mem")
		- 释放信号量，sem_post
	}
- 返回(enabel/disable)操作函数,autosuspend_wakeup_count_ops
}

autosuspend_wakeup_count_enable-->sem_post//增加信号量
autosuspend_wakeup_count_disable-->sem_wait //减少信号量

为什么这么做，参考kernel/power/main.c注释

system/core/libsuspend/autosuspend.c
system/core/libsuspend/autosuspend_wakeup_count.c
system/core/libsuspend/autosuspend_earlysuspend.c
system/core/libsuspend/autosuspend_autosleep.c

fyttek:FYTtek54321
//以charger模式启动:
main-->event_loop{
- handle_input_state{
	- process_key	
	}	
- handle_power_supply_state{
	- 没有连接充电，{
		- 取消挂起，request_suspend(false)
		- 设置检查充电间隔时间，next_pwr_check
		- 检测到超时，shutdown设备。android_reboot
		}
	- 正在充电，取消关闭计时next_pwr_check=-1。开始动画kick_animation
	}
- update_screen_state
}



request_suspend{
- 设置状态autosuspend_enable()或，autosuspend_disable()
}@autosuspend.c


system/core/charger/charger.c

/************************************
 重启

*/
reboot(boolean confirm, String reason, boolean wait)-->
shutdownOrRebootInternal(final @HaltMode int haltMode, final boolean confirm, final String reason, boolean wait){
- ShutdownThread.rebootSafeMode{
	- mReboot = true
	- mRebootSafeMode = true
	- shutdownInner(context, confirm)
	}
- ShutdownThread.reboot{
	- mReboot = true
	- mReason = reason
	- shutdownInner(context, confirm)
	}
- ShutdownThread.shutdown{
	- mReboot = false
	- shutdownInner(context, confirm)
	}
}@PowerManagerService.java

shutdownInner(final Context context, boolean confirm) {
- 
- if (confirm) {//弹出对话框
	- 
  }else{ //直接关机/重启
	- beginShutdownSequence(context){
		- sInstance.mContext = context
		- sInstance.mPowerManager = (PowerManager)context.getSystemService(Context.POWER_SERVICE)
		  //获取锁，不进入休眠
		- sInstance.mCpuWakeLock.acquire()		
		  //保持亮屏
		- sInstance.mScreenWakeLock.acquire()
		- sInstance.start()
		}
  }
}@ShutdownThread.java

sInstance.start()--run{
  //关机广播
- Intent intent = new Intent(Intent.ACTION_SHUTDOWN)
- mContext.sendOrderedBroadcastAsUser(intent,UserHandle.ALL, null, br, mHandler...)
  //关闭activityManager
- IActivityManager am = IActivityManager.Stub.asInterface(ServiceManager.checkService("activity"))
- am.shutdown(MAX_BROADCAST_TIME)
  //关闭packagemanager
- PackageManagerService pm = (PackageManagerService)ServiceManager.getService("package")
- pm.shutdown()
  //关闭radio
- shutdownRadios(MAX_RADIO_WAIT_TIME)
  //卸载存储设备。等待卸载完成才关机/重启 10*1000超时
- IStorageShutdownObserver observer = new IStorageShutdownObserver.Stub()
- IStorageManager storageManager = IStorageManager.Stub.asInterface(ServiceManager.checkService("mount"))
- storageManager.shutdown(observer)

  //
- rebootOrShutdown(mContext, mReboot, mReason){
	- if(reboot){
		- PowerManagerService.lowLevelReboot(reason)-->SystemProperties.set("sys.powerctl", "reboot," + reason)
   	  }else if(SHUTDOWN_VIBRATE_MS > 0){
		- Vibrator vibrator = new SystemVibrator(context)
		- vibrator.vibrate(SHUTDOWN_VIBRATE_MS)
	  }
	- PowerManagerService.lowLevelShutdown(reason)-->SystemProperties.set("sys.powerctl", "shutdown," + reason)
	}
}@ShutdownThread.java

//init中处理关机/重启
property_changed(const std::string& name, const std::string& value) {
- if (name == "sys.powerctl") {
	- shutdown_command = value
	- do_shutdown = true
	}
}@init.cpp

/**********************************
 背光 backlight
*/
initialize-->DisplayPowerState(mLights.getLight(LightsService.LIGHT_ID_BACKLIGHT))
@DisplayPowerController.java

//背光设置：监听设置SCREEN_BRIGHTNESS
SettingsObserver(){
- 设置亮度值，handleSettingsChangedLocked-->updateSettingsLocked-->mScreenBrightnessSetting
- 设置亮度，updatePowerStateLocked-->mDisplayPowerController.requestPowerState-->
	updatePowerState-->animateScreenBrightness-->mScreenBrightnessRampAnimator.animateTo
	@DisplayPowerController.java-->postCallback-->mCallback-->mProperty.setValue
	@RampAnimator.java-->setValue-->object.setScreenBrightness-->setScreenBrightness
	-->(设置亮度mScreenBrightness)scheduleScreenUpdate@DisplayPowerState.java-->
	(背光服务)setBrightness-->setLightLocked-->setLight_native@LightsService.java
	devices->lights[light]->set_light@com_android_server_LightsService.cpp
}PowerManagerService.java


frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java
frameworks/base/services/core/java/com/android/server/power/ShutdownThread.java
frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
frameworks/base/services/java/com/android/server/power/DisplayPowerController.java
frameworks/base/services/java/com/android/server/power/RampAnimator.java
frameworks/base/services/java/com/android/server/power/DisplayPowerState.java

