/*
资源的获取接口
theme
TypedArry
resource

resource ID是一个32位数.格式为:PPTTNNNN. PP资源包; TT资源类型; NNNN资源名. 应用中PP值为0x7f
*/

系统私有资源需要添加res/valus/symbols.xml
  <!--fyt add-->
  <java-symbol type="drawable" name="fytbt_up1" />
  <java-symbol type="drawable" name="fytbt_down1" />
  <java-symbol type="drawable" name="fytbt_up2" />
  <java-symbol type="drawable" name="fytbt_down2" />
  <java-symbol type="layout" name="fyt_button" />
  <java-symbol type="id" name="fytWinbt" />
===================
//theme

theme.obtainStyledAttributes(R.styleable.xxxx/*要获取的属性*/)


===================
//resource创建
ContextImpl{
- mResourcesManager = ResourcesManager.getInstance()
- compatInfo = packageInfo.getCompatibilityInfo()
- resources = packageInfo.getResources(mainThread)-->getResources@LoadedApk.java
	-->mainThread.getTopLevelResources@ActivityThread.java-->mResourcesManager.getTopLevelResources
- mContentResolver = new ApplicationContentResolver
}@ContextImpl.java

//android6.1
getTopLevelResource(resDir,overlayDirs,libDir){
- assets = new AssetManager
- assets.addAssetPath(resDir)//设置资源路径
- dm = getDisplayMetricsLocked(DEFAULT_DISPLAY){
- new Resources(assets,DisplayMetrics,config){
	- mAssets = assets
	- updateConfiguration(config, DisplayMetrics){
		- mAssets.setConfiguration(orientation,width, height,smallestScreenWidthDp)//设置资源的配置
		}
	}@Resource.java
}@ResourcesManager.java
-->AssetManager-->ensureSystemAssets-->init(true/*系统资源*/)@AssetManager.java
-->android_content_AssetManager_init@android_util_AssetManager.cpp-->
addDefaultAssets-->addAssetPath("/system/framework/framework-res.apk")-->
mAssetPaths.add@AssetManager.cpp

//android7.1
getTopLevelResources-->mResourcesManager.getResources@ActivityThread.java-->getResources{
- new ResourcesKey(resDir,splitResDirs,overlayDirs,libDirs)
- getOrCreateResources{
	- 
	- createResourcesImpl-->createAssetManager
	}
}@ResourcesManager.java

//display信息：
// 通过WindowManager获取
        DisplayMetrics dm = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(dm);
        System.out.println("width-display :" + dm.widthPixels);
        System.out.println("heigth-display :" + dm.heightPixels);

// 通过Resources获取
        DisplayMetrics dm2 = getResources().getDisplayMetrics();
        System.out.println("width-display :" + dm2.widthPixels);
        System.out.println("heigth-display :" + dm2.heightPixels);


getDisplayMetricsLocked(DEFAULT_DISPLAY){
- DisplayManagerGlobal dm = DisplayManagerGlobal.getInstance
- dm.getCompatibleDisplay{
	- displayInfo = getDisplayInfo
	- return new Display(displayInfo)
	}
}@DisplayManagerGlobal.java

//应用更新配置configuration
updateConfigurationLocked(Configuration values){
- mSystemThread.applyConfigurationToResources
- 遍历mLruProcesses{//遍历最近进程,更新资源
- ProcessRecord app = mLruProcesses.get(i)
- app.thread.scheduleConfigurationChanged(Configuration)-->
	handleConfigurationChanged@ActivityThread.java--applyConfigurationToResourcesLocked(config)
	}
- mWindowManager.setNewConfiguration //更新窗口配置
}@ActivityManagerService.java

applyConfigurationToResourcesLocked{
- Resources.updateSystemConfiguration
- 遍历mActiveResources{
	- Resources r = mActiveResources.valueAt(i).get()
	- r.updateConfiguration-->updateConfiguration-->mAssets.setConfiguration
	}@Resource.java
}ResourcesManager.java


//获取值
getDimensionPixelSize-->getValue-->mAssets.getResourceValue@Resource.java

//drawable
getDrawable-->getResources().getDrawable(id, getTheme())@Context.java-->getDrawable{
- impl.getValue(id, value, true) //获取value
- mResourcesImpl.loadDrawalbe-->loadDrawalbe(id,value)@ResourcesImpl.java
}@Resources.java


//查找对应id的View：
findViewById-->getWindow().findViewById(id)@Activity.java-->findViewById-->
getDecorView().findViewById@Window.java-->mDecor.findViewById-->DecorView.findViewById
@PhoneWindow.java-->findViewById-->findViewTraversal(id匹配说明查找到)@View.java-->
(是ViewGroup容器)findViewTraversal-->v.findViewById(找到对应id的View)@ViewGroup.java-->findViewById
-->findViewTraversal(return this)@View.java

===================
//typedArray 通过Resources获取
Resources.obtainStyledAttributes(AttributeSet, int[], int, int)
Resources.obtainAttributes(AttributeSet, int[])





===============
//Assert
AssetManager{
- init(false) //应用资源
- ensureSystemAssets-->init(true)//系统资源
}

//初始化
init@AssetManager.java-->android_content_AssetManager_init{
- am = new AssetManager()
- am->addDefaultAssets()-->addDefaultAssets{//加入系统默认资源
	- addAssetPath("framework/framework-res.apk")-->mAssetPaths.add
	}
- env->SetLongField(clazz, gAssetManagerOffsets.mObject,am)
}@android_util_AssetManager.cpp

//设置config
setConfiguration@AssetManager.java-->android_content_AssetManager_setConfiguration@android_util_AssetManager.cpp
setConfiguration(config, locale8){
- mConfig = config
- setLocaleLocked(locale)
}@AssetManager.cpp


//加入资源路径
addAssetPath-->addAssetPathInternal-->addAssetPathNative@AssetManager.java
android_content_AssetManager_addAssetPath@android_util_AssetManager.cpp-->
addAssetPath{

}@AssetManager.cpp

getValue(id,value,true/*resolve*/)@Resouces.java-->getResourceValue-->loadResourceValue@AssetManager.java
-->android_content_AssetManager_loadResourceValue(jint ident,jshort density, jobject outValue,jboolean resolve){
- res= am->getResources(true)-->getResTable{
	- loadFileNameCacheLocked
	- mResources = new ResTable()
	- 遍历资源路径mAssetPaths，appendPathToResTable(mAssetPaths.itemAt(i))
	}
- res.getResource(ident, &value, density,&config)
- res.resolveReference(&value, block, &ref, &typeSpecFlags, &config)
}android_util_AssetManager.cpp



frameworks/base/core/java/android/app/ContextImpl.java
frameworks/base/core/java/android/app/ResourcesManager.java
frameworks/base/core/java/android/app/LoadedApk.java
frameworks/base/core/java/android/hardware/display/DisplayManagerGlobal.java
frameworks/base/core/java/android/content/res/Resources.java
frameworks/base/core/java/android/content/res/ResourcesImpl.java
frameworks/base/core/java/android/content/res/AssetManager.java
frameworks/base/core/jni/android_util_AssetManager.cpp
frameworks/base/libs/androidfw/AssetManager.cpp
frameworks/base/libs/androidfw/ResourceTypes.cpp






