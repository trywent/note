//SystemUI启动:
ServerThread.run-->ActivityManagerService.self().systemReady-->startSystemUi-->
context.startServiceAsUser("com.android.systemui.SystemUIService",UserHandle.SYSTEM)@SystemServer.java

onCreate{
- mComponents = new HashMap<>()
- SystemUIFactory.createFromConfig(this);
- 用户为UserHandle.SYSTEM,registerReceiver(new BroadcastReceiver,SYSTEM_HIGH_PRIORITY)
- 其它用户{
	- startServicesIfNeeded(SERVICES_PER_USER)
	}
}@SystemUIApplication.java

onCreate{
- ((SystemUIApplication) getApplication()).startServicesIfNeeded //SystemUIApplication
- this.registerReceiver(recentTaskReceiver,REMOVE_ALL_RECENT_TASKS)
}@SystemUIService.java

//所有服务保存在mComponents中。可以动态获取
startServicesIfNeeded-->startServicesIfNeeded(SERVICES){
- 遍历SERVICES{
            Dependency.class,
            NotificationChannels.class,
            CommandQueue.CommandQueueStart.class,
            KeyguardViewMediator.class,
            Recents.class,
            VolumeUI.class,
            Divider.class,
            SystemBars.class,
	    PipUI.class,
	    .....
	}
- SystemUIFactory.getInstance().createInstance(cl) //创建服务对象
- mServices[i] = (SystemUI) ((newService == null) ? cl.newInstance() : newService) //创建失败new
- mServices[i].start() //
- mServices[i].mComponents = mComponents //所有服务共享一个mComponents
- Dependency.get(PluginManager.class).addPluginListener
}@SystemUIApplication.java



=======================
/*Dependency
  大量工具类的实例加入到这里方便获取?
*/
Dependency.start{
- mProviders.put(TIME_TICK_HANDLER)
- mProviders.put(RotationLockController.class,new RotationLockControllerImpl(mContext) //旋转设置
- mProviders.put(ConfigurationController.class, () ->new ConfigurationControllerImpl(mContext))
- mProviders.put(FragmentService.class, () ->new FragmentService(mContext))
}@Dependency.java

//commandQueue
CommandQueueStart.start-->putComponent(CommandQueue.class, new CommandQueue())
-->mComponents@CommandQueue.java

//调用systemui接口
(获取服务StatusBarManagerService)-->setIcon-->mBar.setIcon@StatusBarManagerService.java-->
setIcon-->mHandler.obtainMessage(what, OP_SET_ICON)-->H.handleMessage-->mCallbacks.addIcon
@CommandQueue.java-->addIcon@PhoneStatusBar.java

frameworks/base/packages/SystemUI/src/com/android/systemui/Dependency.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java

=======================
/* 
 statusBar窗口：

 StatusBarWindowView{
  - FrameLayout(status_bar_container)---替换CollapsedStatusBarFragment{
		- PhoneStatusBarView //通知图标，信号图标
		}
  }

*/

//整体布局
com.android.systemui.statusbar.phone.StatusBarWindowView{
- FrameLayout "@+id/status_bar_container"
- include layout="@layout/status_bar_expanded"-->
	com.android.systemui.statusbar.phone.NotificationPanelView android:id="@+id/notification_panel" {
	- include layout="@layout/keyguard_status_view"
	- com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer{
		- FrameLayout "@+id/qs_frame
		- com.android.systemui.statusbar.stack.NotificationStackScrollLayout
		}
	- include layout="@layout/keyguard_bottom_area
	}@status_bar_expanded.xml
- com.android.systemui.statusbar.ScrimView android:id="@+id/scrim_in_front
}@super_status_bar.xml

//status_bar布局,宽高
com.android.systemui.statusbar.phone.PhoneStatusBarView android:id="@+id/status_bar"{
- ImageView android:id="@+id/notification_lights_out"
- LinearLayout android:id="@+id/status_bar_contents"{
	- com.android.systemui.statusbar.AlphaOptimizedFrameLayout android:id="@+id/notification_icon_area"
	- com.android.keyguard.AlphaOptimizedLinearLayout android:id="@+id/system_icon_area"{
		- include layout="@layout/system_icons"-->{
			- com.android.keyguard.AlphaOptimizedLinearLayout android:id="@+id/statusIcons"
			- include layout="@layout/signal_cluster_view"
		  }@system_icons.xml	  
		- com.android.systemui.statusbar.policy.Clock android:id="@+id/clock"
		}
	}
}@status_bar.xml


SystemBars.start-->createStatusBarFromConfig(config_statusBarComponent/*获取bar名StatusBar*/){
- mStatusBar.mComponents = mComponents
//启动
- mStatusBar.start-->start{
- mNetworkController=Dependency.get(NetworkController)//NetworkControllerImpl
- mRecents = getComponent(Recents.class)
- mCommandQueue = getComponent(CommandQueue.class)
- mCommandQueue.addCallbacks(this)
  //创建窗口并加入
- createAndAddWindows-->addStatusBarWindow{
	- makeStatusBarView()
	- mStatusBarWindowManager.add(mStatusBarWindow, getStatusBarHeight())
	}
- mIconPolicy = new PhoneStatusBarPolicy
}@StatusBar.java

}@SystemBars.java


//创建statusBar,NaviBar 创建view
makeStatusBarView{
- inflateStatusBarWindow-->mStatusBarWindow = View.inflate(R.layout.super_status_bar)
- mNotificationPanel = (NotificationPanelView) mStatusBarWindow.findViewById(R.id.notification_panel)
  //获取FragmentHostManager
- FragmentHostManager = FragmentHostManager.get(mStatusBarWindow)-->Dependency.get(FragmentService.class).getFragmentHostManager(view)
	-->getFragmentHostManager@FragmentService.java
  //监听fragment创建
- FragmentHostManager.addTagListener(CollapsedStatusBarFragment.TAG, listener)-->addTagListener(view,listener){
	- listeners = new ArrayList
	- mListeners.put(tag, listeners)
	- listeners.add(listener)
	- Fragment current = getFragmentManager().findFragmentByTag(tag)-->mFragments.getFragmentManager().findFragmentByTag
	}@FragmentHostManager.java
  //创建CollapsedStatusBarFragment fragment（包含了status_bar）
- FragmentHostManager.getFragmentManager().beginTransaction().replace(R.id.status_bar_container,CollapsedStatusBarFragment)-->
	FragmentListener.onFragmentViewCreated(TAG,fragment){
	- statusBarFragment = fragment
	- mStatusBarView = (PhoneStatusBarView) fragment.getView()
	}
	 
 //设置statusBarFragment为CollapsedStatusBarFragment 折叠的statusBar(正常状态)
- FragmentHostManager.get(mStatusBarWindow).addTagListener().getFragmentManager().replace(new CollapsedStatusBarFragment)
- StatusBarIconControllerImpl.addIconGroup(new IconManager((ViewGroup))
- mStatusBarWindow.findViewById(R.id.qs_frame) //快速设置view
- createNavigationBar-->NavigationBarFragment.create//创建导航条
}@StatusBar.java


/*替换view中status_bar_container为CollapsedStatusBarFragment
  systemUI中使用FragmentHostManager@FragmentService管理fragment
*/
FragmentHostManager.get(mStatusBarWindow)-->Dependency.get(FragmentService.class).getFragmentHostManager
@FragmentHostManager.java-->getFragmentHostManager(view){
- View root = view.getRootView()
  //创建FragmentController
- state = new FragmentHostState(root)-->new FragmentHostManager(Context context, FragmentService manager, View rootView){
	- mManager = manager
	- mRootView = rootView
	- createFragmentHost{
		- FragmentController mFragments = FragmentController.createController(new HostCallbacks())
		- mLifecycleCallbacks = new FragmentLifecycleCallbacks
		}
	}@FragmentHostManager.java
- mHosts.put(root, state)
- return state.getFragmentHostManager-->mFragmentHostManager //返回FragmentHostManager
}@FragmentService.java

//设置statusBar
onCreateView(LayoutInflater inflater, @Nullable ViewGroup container)-->
inflater.inflate(R.layout.status_bar, container, false)@CollapsedStatusBarFragment.java

//CollapsedStatusBarFragment创建后
onViewCreated(View view, @Nullable Bundle savedInstanceState){
- PhoneStatusBarView mStatusBar = (PhoneStatusBarView) view
- mSystemIconArea
- mSignalClusterView = mStatusBar.findViewById(R.id.signal_cluster)//信号图标SignalClusterView
}@CollapsedStatusBarFragment.java




可以通StatusBarManagerService过设置statusBar：
setIcon@StatusBarManager.java-->setIcon@StatusBarManagerService.java-->
(通过IStatusBar设置)mBar.setIcon-->setIcon@CommandQueue.java-->updateIcon@TabletStatusBar.java



frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/CollapsedStatusBarFragment.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java
=======================
/*
 NavigationBar
*/
NavigationBarFragment.create{ //创建导航条
- WindowManager.LayoutParams lp = new WindowManager.LayoutParams //布局参数
- View navigationBarView = inflate(R.layout.navigation_bar_window)//导航条view
- context.getSystemService(WindowManager.class).addView(navigationBarView, lp) //加入view
}@NavigationBarFragment.java

//navigation_bar_window对应NavigationBarFragment
onCreateView{
- inflater.inflate(R.layout.navigation_bar)
}@NavigationBarFragment


onFinishInflate{
- inflateChildren{
	- mRot0 = (FrameLayout) mLayoutInflater.inflate(R.layout.navigation_layout)
	- addView(mRot0)
	}
- inflateLayout(getDefaultLayout())-->inflateButtons{
	- createView
	- parent.addView(v)
	}
}@NavigationBarInflaterView.java


//按钮View
updateIcons{
- mBackIcon = getDrawable(ctx, R.drawable.ic_sysbar_back)
- mHomeDefaultIcon = getDrawable(ctx,R.drawable.ic_sysbar_home)
- mRecentIcon = getDrawable(ctx,R.drawable.ic_sysbar_recent)
- mImeIcon = getDrawable(R.drawable.ic_ime_switcher_default)
}@NavigationBarView.java



//按钮事件：所有的按钮都是实现KeyButtonView.java
(重写View中方法)onTouchEvent-->sendEvent(发送事件)-->sendEvent(事件和时间)-->
InputManager.getInstance().injectInputEvent@KeyButtonView.java-->


frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarInflaterView.java
=======================
/*
 Divider
*/

public void start() {
- mWindowManager = new DividerWindowManager(mContext);
  //加入view
- update(mContext.getResources().getConfiguration()){
	- addDivider(configuration)
	}
- putComponent(Divider.class, this);
  //监听分屏状态
- mDockDividerVisibilityListener = new DockDividerVisibilityListener();
- SystemServicesProxy ssp = Recents.getSystemServices();
- ssp.registerDockedStackListener(mDockDividerVisibilityListener)
- mForcedResizableController = new ForcedResizableInfoActivityController(mContext)
}@Divider.java

addDivider@Divider.java-->
add(View view, int width, int height){
- WindowManager.LayoutParams mLp = new WindowManager.LayoutParams(width, height, TYPE_DOCK_DIVIDER)
- mWindowManager.addView(view, mLp)
}@DividerWindowManager.java

//移动divider，调整分屏大小
onTouch(View v, MotionEvent event) {
- MotionEvent.ACTION_DOWN
- MotionEvent.ACTION_MOVE{
	- SnapTarget snapTarget = getSnapAlgorithm().calculateSnapTarget
	- resizeStackDelayed(calculatePosition(x, y), mStartPosition, snapTarget)-->resizeStack
	}
- MotionEvent.ACTION_UP
  MotionEvent.ACTION_CANCEL{
	- stopDragging
	}
}@DividerView.java

frameworks/base/packages/SystemUI/src/com/android/systemui/stackdivider/Divider.java
frameworks/base/packages/SystemUI/src/com/android/systemui/stackdivider/DividerWindowManager.java
frameworks/base/packages/SystemUI/src/com/android/systemui/stackdivider/DividerView.java
=======================
/*
 Recents：
*/
start{
- sTaskLoader = new RecentsTaskLoader(mContext)
- mHandler = new Handler()
- mImpl = new RecentsImpl(mContext)
- putComponent(Recents.class, this)
}@Recents.java


prepareNavigationBarView-->recentsButton.setOnClickListener(this::onRecentsClick)
-->mCommandQueue.toggleRecentApps@NavigationBarFragment.java-->msg.sendToTarget(MSG_TOGGLE_RECENT_APPS)
mCallbacks.get(i).toggleRecentApps@CommandQueue.java-->
toggleRecentApps{
- 创建intent("com.android.systemui.recent.RecentsActivity")
- startActivitySafely(intent)
}@Rcents.java


toggleRecentApps{
  //systemUser
- mImpl.toggleRecents(growTarget)
  //非systemUser
- IRecentsNonSystemUserCallbacks callbacks = mSystemToUserCallbacks.getNonSystemUserRecentsForUser(currentUser)
- callbacks.toggleRecents(growTarget)
}@Recents.java
//最近任务视图
onCreate{
- SystemServicesProxy ssp = Recents.getSystemServices()
- setContentView(R.layout.recents)
- mRecentsView = findViewById(R.id.recents_view)
- reloadStackView{
	- loader = Recents.getTaskLoader()
	- loadPlan = loader.createLoadPlan(this)
	- stack = loadPlan.getTaskStack()
	- mRecentsView.onReload(stack, mIsVisible)-->onReload{
		- mTaskStackView = new TaskStackView(getContext()){
			- mStack.setCallbacks(this) //TaskStack.mCb
			- mViewPool = new ViewPool<>(context, this)
			- mTouchHandler = new TaskStackViewTouchHandler
			- mAnimationHelper = new TaskStackAnimationHelper
			}TaskStackView.java
		- addView(mTaskStackView)
		- mTaskStackView.onReload-->requestLayout //重新布局
		- updateStack(stack, true)-->mTaskStackView.setTasks //设置task
		}@RecentsView.java
	}
}@RecentsActivity.java

onStart{
-  mRecentsView.setScrimColors(systemColors)
- mRecentsView.getViewTreeObserver().addOnPreDrawListener(mRecentsDrawnEventListener)
}@RecentsActivity.java

//设置tasks
setTasks@TaskStackView.java-->mStack.setTasks-->
setTasks(List<Task> tasks){
- 遍历tasks{
	- 加入addedTasks.add(newTask)
	- allTasks.add(newTask)
	}
- 遍历removedTasks,mCb.onStackTaskRemoved
- mCb.onStackTasksUpdated //通知TaskStackView更新view
}@TaskStack.java

//布局,
onLayout{
- relayoutTaskViews(AnimationProps.IMMEDIATE)-->bindVisibleTaskViews{
	- tasks = mStack.getStackTasks()
	- 遍历tasks{
		- mViewPool.pickUpViewFromPool(task, task)-->onPickUpViewFromPool
		- updateTaskViewToTransform
		}
	}
- clipTaskViews
}

pickUpViewFromPool{
- TaskView tv = mViewCreator.createView-->createView{
	- (GridTaskView) mInflater.inflate(R.layout.recents_grid_task_view)//isGridEnabled
	- (TaskView)mInflater.inflate(R.layout.recents_task_view)
	}
- mViewCreator.onPickUpViewFromPool-->onPickUpViewFromPool(tv){
	- updateTaskViewsList
	- bindTaskView(tv, task){//从task处获取缩略数据,设置到tv
		- task.notifyTaskDataLoaded(task.thumbnail, task.icon)
		- Recents.getTaskLoader().loadTaskData
		}
	}
}@ViewPoll.java


frameworks/base/packages/SystemUI/src/com/android/systemui/recents/Recents.java
=======================
/*
 quickSetting
*/



//rotation
handleClick@RotationLockTile.java-->setRotationLocked@RotationLockControllerImpl.java-->
setRotationLock{
- IWindowManager wm = WindowManagerGlobal.getWindowManagerService()
- wm.freezeRotation(rotation)//锁定
- wm.thawRotation() //自动
}@RotationPolicy.java

frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/RotationLockControllerImpl.java
frameworks/base/packages/SystemUI/src/com/android/systemui/qs/tiles/RotationLockTile.java
frameworks/base/core/java/com/android/internal/view/RotationPolicy.java
=======================
/* 
 信号图标
*/
onFinishInflate{
//初始化并设置所有图标的view
- mWifiSignalSpacer
- mMobileSignalGroup
}@SignalClusterView.java

//将view关联到controler
setSubs-->inflatePhoneState{
- new PhoneState{
	- inflate(R.layout.mobile_signal_group)
	- setViews //设置mMobileGroup中所有图标
	}
- mMobileSignalGroup.addView(state.mMobileGroup) //将mMobileGroup加入到mMobileSignalGroup
- mPhoneStates.add(state)
- apply{
	- mVpn.setVisibility
	- mWifiGroup.setVisibility
	- 遍历mPhoneStates，PhoneState.apply //设置电话图标
	- mNoSimsCombo.setVisibility
	}
}
//移动信号控制器
NetworkControllerImpl{
- mCallbackHandler = new CallbackHandler()
- mSubscriptionManager = SubscriptionManager.from-->getSystemService(Context.TELEPHONY_SUBSCRIPTION_SERVICE) //创建SubscriptionManager
- mWifiSignalController = new WifiSignalController
- mEthernetSignalController = new EthernetSignalController
- mReceiverHandler.post-->mRegisterListeners.run-->registerListeners{
	- mobileSignalController.registerListener
	- mContext.registerReceiver(mReceiverHandler)//监听所有的网络状态
	- updateMobileControllers
	}
}@NetworkControllerImpl.java

//sim卡状态变化或者DEMO消息
updateMobileControllers-->doUpdateMobileControllers-->setCurrentSubscriptions{
- new MobileSignalController
- controller.registerListener-->mPhone.listen(mPhoneStateListener)//注册phone监听器
- mCallbackHandler.setSubs(subscriptions) //将view关联到controler
}@NetworkControllerImpl.java


//view加入到控制器
onAttachedToWindow-->mNetworkController.addCallback(this)@SignalClusterView.java-->
addCallback-->mCallbackHandler.setListening@NetworkControllerImpl-->handleMessage(MSG_ADD_REMOVE_SIGNAL)
-->mSignalCallbacks.add@CallbackHandler.java


//更新信号
MobilePhoneStateListener.onSignalStrengthsChanged/updateTelephony-->updateTelephony{
- 更新mCurrentState{
	- connected
	- level
	- iconGroup
	- dataConnected
	}
- notifyListenersIfNecessary(r/*判断状态是否发生变化*/)-->notifyListeners(mCallbackHandle)@SignalController.java-->
	notifyListeners{
	- new IconState()//创建icon状态
	- callback.setMobileDataIndicators-->setMobileDataIndicators-->signalCluster.setMobileDataIndicators@CallbackHandler.java
		-->setMobileDataIndicators-->apply@SignalClusterView.java
	}

}@MobileSignalController.java







//DEMO加入mobile
BroadcastReceiver.onReceive(ACTION_DEMO)-->dispatchDemoCommand@StatusBar.java-->
dispatchDemoCommand(COMMAND_NETWORK)-->addSignalController@NetworkControllerImpl.java-->
new MobileSignalController{
- new MobilePhoneStateListener
- mapIconSets-->mNetworkToIconLookup(FOUR_G)
- mObserver = new ContentObserver{onChange-->updateTelephony}
}@MobileSignalController.java



=======================
wallpaper:(默认的静态壁纸com.android.systemui.ImageWallpaper)
//大小
setDimensionHints-->wallpaper.connection.mEngine.setDesiredSize@WallpaperManagerService.java
-->sendMessage(DO_SET_DESIRED_SIZE)-->mEngine.doDesiredSizeChanged{
- 设置mIWallpaperEngine.mReqWidth/mReqHeight
- onDesiredSizeChanged
}@WallpaperService.java


wallpaperService:
attach-->new IWallpaperEngineWrapper@WallpaperService.stub-->executeMessage{
- onCreateEngine
- engine.attach(this)-->attach{
	- mSurfaceHolder
	- onCreate-->updateSurfaceSize(设置壁纸大小)
	- updateSurface(加入窗口)
	}
}@WallpaperService.Engine.java

=======================
android4.4:
makeStatusBarView{
- new NetworkController
- mNetworkController.addSignalCluster(signalCluster)
- signalCluster.setNetworkController(mNetworkController)
}@PhoneStatusBar.java


NetworkController{
- 监听电话网络状态，mPhone.listen(mPhoneStateListener)
}

updateDataNetType()//根据网络类型mDataNetType，更新信号图标

onReceive(收到信号广播)-->refreshViews-->
refreshSignalCluster-->(设置信号图标)cluster.setMobileDataIndicators@NetworkController.java





frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
frameworks/base/packages/SystemUI/src/com/android/systemui/SystemBars.java
frameworks/base/packages/SystemUI/src/com/android/systemui/SystemUIService.java
frameworks/base/packages/SystemUI/src/com/android/systemui/SystemUIApplication.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/SignalClusterView.java
frameworks/base/packages/SystemUI/src/com/android/systemui/fragments/FragmentHostManager.java
frameworks/base/packages/SystemUI/src/com/android/systemui/fragments/FragmentService.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/CollapsedStatusBarFragment.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
frameworks/base/services/java/com/android/server/StatusBarManagerService.java
frameworks/base/core/java/android/app/StatusBarManager.java
frameworks/base/core/java/com/android/internal/statusbar/StatusBarIcon.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/KeyButtonView.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkControllerImpl.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/SignalController.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/CallbackHandler.java
frameworks/base/packages/SystemUI/src/com/android/systemui/qs/tiles/CellularTile.java
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarFragment.java
