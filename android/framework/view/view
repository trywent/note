/******************************
 public class View
 extends Object implements Drawable.Callback, KeyEvent.Callback, AccessibilityEventSource 

 ViewGroup：子类 FrameLayout, GridLayout, LinearLayout, PagerTitleStrip, RelativeLayout等

*/
view{
位置：left,top,
大小：宽高
pading：(left,top,right,bottom)边界缩进位置
}

viewGroup{
margin:布局时所有子view的边界
}

//layout两个过程：measure,layout
measure:从上到下遍历ViewGroup中view.调用view.measure(int, int)，最后每个view保存自己的测量结果。
layout:从上到下调用layout(int, int, int, int)，在这个过程中父View根据measure的结果，确定子View的位置

//LayoutParams：view的大小
    an exact number:确定值
    MATCH_PARENT:父view一样大小
    WRAP_CONTENT:view包含的内容大小 
//MeasureSpecs: 父view如何测量view大小和位置
    UNSPECIFIED: 测量子View期望的大小，父View不限定.
    EXACTLY: 父View限定子View一个固定大小。
    AT_MOST: 父View限定子View一个最大的大小范围。所有的子View必须符合这个限定

0/*
 加入view
*/

addViewInner(View child, int index, LayoutParams params)){
- child.mLayoutParams = params
- dispatchViewAdded(child)
}@ViewGroup.java

1/*
 布局,位置,大小
 int measureSpec(0-29值,30-31模式)
 MODE_MASK  = 0x3 << 30 //30-31为布局模式 UNSPECIFIED,EXACTLY,AT_MOST
 
*/
invalidate-->invalidateInternal(0, 0, mRight - mLeft, mBottom - mTop)-->p.invalidateChild@View.java-->
invalidateChild(View child, Rect r){
- ViewParent parent = this
- while(parent@!=null){//循环获取父view,执行invalidateChildInParent
	- parent = parent.invalidateChildInParent-->
		invalidateChildInParent{
		- invalidateRectOnScreen-->scheduleTraversals
		}@ViewRootImpl.java
	}
}@ViewGroup.java

measureChildren(int widthMeasureSpec, int heightMeasureSpec)-->measureChild{
- LayoutParams lp = child.getLayoutParams()
- childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,mPadding,lp.width)
- childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,mPadding,lp.height){
	- 	
	}
- child.measure(childWidthMeasureSpec, childHeightMeasureSpec)
}@ViewGroup.java

//设置mMeasuredWidth,mMeasuredHeight
measure(widthMeasureSpec,heightMeasureSpec/*父view的范围*/){
- 
- onMeasure(widthMeasureSpec, heightMeasureSpec){
	- getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec)
	- setMeasuredDimensionRaw{
		- mMeasuredWidth,mMeasuredHeight //设置宽高
		}
	}
}@view.java

//设置位置mLeft,mTop,mRight,mBottom	
layout(int l, int t, int r, int b){
- if(isLayoutModeOptical(mParent)){
	- setOpticalFrame(l, t, r, b)
  }else{
	- setFrame(l, t, r, b){
		- 设置mLeft,mTop,mRight,mBottom	
		}
  }
- onLayout(boolean changed, int left, int top, int right, int bottom)
}@View.java

//焦点
onFocusChanged{
- switchDefaultFocusHighlight{ //默认高亮
	- boolean needed = isDefaultFocusHighlightNeeded
	- setDefaultFocusHighlight(getDefaultFocusHighlightDrawable()) //高亮
	- setDefaultFocusHighlight(null)
	}
}@View.java

//View布局设置：
SYSTEM_UI_FLAG_FULLSCREEN:
能够隐藏状态条。与WindowManager.LayoutParams.FLAG_FULLSCREEN效果一样，除了在设置
Window.FEATURE_ACTION_BAR_OVERLAY时，设置该标识同样会隐藏Action Bar。

SYSTEM_UI_FLAG_HIDE_NAVIGATION:
隐藏导航条

SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN:
使View像全屏一样布局

SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION:
使View像导航条被隐藏一样布局

SYSTEM_UI_FLAG_LAYOUT_STABLE:
使View布局具有连续性，不管状态条或导航条是否可见。View的布局都是全屏

SYSTEM_UI_FLAG_LOW_PROFILE:
使状态条，导航条图案变成淡出效果

SYSTEM_UI_FLAG_VISIBLE:
使状态条，导航条可见

2/*
 绘制

*/

//强制view绘制。必须在主线程中执行。非主线程执行postInvalidate()
invalidate()-->invalidate(true)-->
invalidateInternal(int l, int t, int r, int b, boolean invalidateCache,boolean fullInvalidate){
- 
- if(skipInvalidate()) return;
- if ((mPrivateFlags & (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)) == (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)||
	){
	- mPrivateFlags |= PFLAG_DIRTY
	}
 //
- AttachInfo ai = mAttachInfo
- ViewParent p = mParent
- if (p != null && ai != null && l < r && t < b) {
	- Rect damage = ai.mTmpInvalRect
	- damage.set(l, t, r, b)
	- p.invalidateChild(this, damage)
	}
}@View.java

scheduleTraversals-->mChoreographer.postCallback(Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable)
@ViewRootImpl.java-->doFrame-->doCallback-->c.run@Choreographer.java-->
TraversalRunnable.run-->doTraversal-->performTraversals-->mView.draw@ViewRootImpl.java

//绘制
updateDisplayListIfDirty()-->draw(canvas) /
buildDrawingCacheImpl(boolean autoScale)-->draw(canvas) /
createSnapshot(Bitmap.Config quality, int backgroundColor, boolean skipChildren)-->draw(canvas)-->
draw(Canvas canvas, ViewGroup parent){
- boolean hardwareAcceleratedCanvas = canvas.isHardwareAccelerated() //硬件加速
  //动画
- Animation a = getAnimation()
- more = applyLegacyAnimation(parent, drawingTime, a)
- transformToApply = parent.getChildTransformation() //将要设置的动画改变值
- 
- if(transformToApply!=null){
	- 
	}
}@View.java

dispatchDraw-->ViewGroup.drawChild(Canvas canvas, View child, long drawingTime)@ViewGroup.java-->
draw(Canvas canvas, ViewGroup parent, long drawingTime)-->draw(canvas)





getDisplayList

buildDrawingCache

createSnapshot

dispatchDraw-->drawChild-->child.draw@ViewGroup.java-->draw(Canvas canvas, ViewGroup parent, long drawingTime)@View.java

onDrawShadow


3/*
 动画
 
*/
startAnimation(Animation animation){
- animation.setStartTime(Animation.START_ON_FIRST_FRAME)
- setAnimation(animation){
	- mCurrentAnimation = animation
	- animation.reset()
	}
- invalidate(true)
}@View.java


applyLegacyAnimation(ViewGroup parent, long drawingTime,Animation a){
 //确保初始化animation
- boolean initialized = a.isInitialized()
- a.initialize
- onAnimationStart
 //transformation
- Transformation t = parent.getChildTransformation()
- boolean more = a.getTransformation(drawingTime, t)
- invalidationTransform = t
 //计算变化区域,执行invalid
- a.getInvalidateRegion(invalidationTransform)
- parent.invalidate
}@View.java



/*
 应用的View.DecorView

*/

dispatchKeyEvent(KeyEvent event){
- Window.Callback cb = mWindow.getCallback()
- cb.dispatchKeyEvent(event)-->dispatchKeyEvent@Activity.java
 //没有view处理,则窗口处理
- mWindow.onKeyDown/mWindow.onKeyUp
}@DecorView.java

/* 事件处理

*/
//触摸事件
processPointerEvent@ViewRootImpl.java-->
dispatchTouchEvent{
- 
- onTouchEvent
}@ViewGroup.java




frameworks/base/core/java/com/android/internal/policy/DecorView.java

