/**********************
 viewRootImpl

  view{
  session  用于和WindowManager交互,加入,移除窗口
  IWindow  WindowManager通知View,窗口变化,布局,可见等
  }

 DecorView extends FrameLayout implements RootViewSurfaceTaker, WindowCallbacks
　outset  不是屏幕的部分。当前窗口不能显示.view测量时可以使用（下巴?手表　config_windowOutsetBottom)
　inset　　　屏幕中部分被其它UI占用。当前窗口内容被遮挡部分　(systemui占用)

*/
//activity创建view
performLaunchActivity@ActivityThread.java-->attach{
- mWindow = PolicyManager.makeNewWindow(this)
- mWindow.setCallback(this)
- mWindow.getLayoutInflater().setPrivateFactory(this)
}@Activity.java


//创建rootView：并加入decor为DecorView@PhoneWindow.java
handleResumeActivity-->(将activity的View加入到窗口)wm.addView(DecorView/*activity.window.getDecorView*/)@ActivityThread.java-->
addView-->LocalWindowManager.addView(设置LayoutParams)-->super.addView@window.java-->
CompatModeWrapper.addView-->mWindowManager.addView-->addView(View, ViewGroup.LayoutParams)
-->addView(view, params, null, false)-->addView(view){
- 加入系统属性监听方法
- 查找View是否已经加入，则找到根root增加计数
- 若是panel，找到改panel以来的窗口
- root = new ViewRootImpl
- mViews.add(view)
- mRoots.add(root)
- mParams.add(wparams)
- 执行root.setView(view) //将view加入到viewrootImpl
}WindowManagerGlobal.java

ViewRootImpl(Context context, Display display) {
- mWindowSession = WindowManagerGlobal.getWindowSession(){
	- IWindowManager windowManager = getWindowManagerService()
	- sWindowSession = windowManager.openSession() //windowManager session
	}WindowManangerGlobal.java
- mThread = Thread.currentThread()
- mWindow = new W(this)
- mAttachInfo = new View.AttachInfo(mWindowSession, mWindow, display, this, mHandler, this,context)
- mChoreographer = Choreographer.getInstance() //界面刷新的脉冲驱动
}

//加入窗口,加入DecorView extends 
// inset 被systemui遮挡部分
// outset 超出屏幕部分(下巴？)但能用来测量view
setView(View view, WindowManager.LayoutParams attrs, View panelParentView){
- mView = view //DecorView
- mWindowAttributes.copyFrom(attrs)
  //
- if (view instanceof RootViewSurfaceTaker) {

	}

- mInputChannel = new InputChannel()
  //加入窗口，获取inset,outSet信息
- mWindowSession.addToDisplay(mWindow, mWindowAttributes,getHostVisibility(), 
	mAttachInfo.mContentInsets, mAttachInfo.mStableInsets,mAttachInfo.mOutsets, mInputChannel)-->
	mService.addWindow(this, window, seq, attrs, viewVisibility...)@Session.java-->addWindow@WindowManagerService.java
}@ViewRootImpl.java


//relayout,设置mSurface.用于绘制数据
//public final Surface mSurface = new Surface()
relayoutWindow(WindowManager.LayoutParams params, int viewVisibility,boolean insetsPending){
- mWindowSession.relayout(mWindow, mSeq, params,mMeasuredWidth,mMeasuredHeight,...mWinFrame,..mSurface)@ViewRootImpl.java
  -->mService.relayoutWindow@Session.java-->relayoutWindow@WindowManangerService.java
}@ViewRootImpl.java


//记录窗口状态
performRestart/performStop-->WindowManagerGlobal.getInstance().setStoppedState(mToken, true)@Activity.java
setStoppedState-->root.setWindowStopped@WindowManagerGlobal.java-->
setWindowStopped(boolean stopped){
- mStopped = stopped
- ThreadedRenderer renderer = mAttachInfo.mThreadedRenderer
- !stopped,scheduleTraversals
- stoped,renderer.destroyHardwareResources(mView)
  //通知监听器。surfaceView监听了窗口状态
- for (int i = 0; i < mWindowStoppedCallbacks.size(); i++) {
	- mWindowStoppedCallbacks.get(i).windowStopped(stopped)
	}
}@ViewRootImpl.java


//report draw
reportResized-->dispatchResized-->mClient.resized(frame)@WindowState.java-->
W.resized(Rect frame,boolean reportDraw)-->dispatchResized-->
mHandler.obtainMessage(reportDraw ? MSG_RESIZED_REPORT : MSG_RESIZED).send-->
ViewRootHandler.handleMessage(MSG_RESIZED_REPORT)-->
reportNextDraw{
- drawPending
- mReportNextDraw = true
}@ViewRootImpl.java


/***********************
 执行测量布局
 relayout从frame获取view的初始大小.frame大小从windowmanager获取的窗口大小
 performMeasure测量大小
　measureHierarchy测量非全屏view的大小防止全屏（弹框...）
*/
performTraversals{
- View host = mView
- WindowManager.LayoutParams lp = mWindowAttributes;
- Rect frame = mWinFrame
  //第一次
- if (mFirst) {
	- mFullRedrawNeeded = true
	- mLayoutRequested = true //需要布局
	- desiredWindowWidth,desiredWindowHeight //设置为屏幕大小
  }else{
	- desiredWindowWidth = frame.width(),desiredWindowHeight = frame.height() //设置为frame大小。mWinFrame从relayoutWindow的outFrame获取
	- if(desiredWindowWidth != mWidth) {mLayoutRequested = true} //大小变化
  }
  //大小发生变化,测量大小
- boolean layoutRequested = mLayoutRequested && (!mStopped || mReportNextDraw);
- if (layoutRequested) {
	- measureHierarchy(host, lp, desiredWindowWidth, desiredWindowHeight)
	}
  //发生变化,重新计算frame,surface大小
- if(mFirst || windowShouldResize|| params != null||mForceNextWindowRelayout){
	- relayoutWindow(params, viewVisibility)
	- mWidth = frame.width()
        - mHeight = frame.height()
	- if (!mStopped || mReportNextDraw) {
		- childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width){
			- MeasureSpec.makeMeasureSpec(mWidth) //创建measureSpec	
			}
		- childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height)
		- performMeasure(childWidthMeasureSpec, childHeightMeasureSpec)-->mView.measure
		}
	}
 //,设置位置
- boolean didLayout = layoutRequested && (!mStopped || mReportNextDraw)
- if(didLayout){
	- performLayout(lp, mWidth, mHeight)
	}
}

//计算view的大小。
getRootMeasureSpec(int windowSize, int rootDimension) {
  switch (rootDimension)
- ViewGroup.LayoutParams.MATCH_PARENT:
            // Window can't resize. Force root view to be windowSize.
            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);
- ViewGroup.LayoutParams.WRAP_CONTENT:
            // Window can resize. Set max size for root view.
            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);
- default:measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);
}@ViewRootImpl.java

//测量view（对话框，正常view）
measureHierarchy(final View host, final WindowManager.LayoutParams lp,
            final Resources res, final int desiredWindowWidth, final int desiredWindowHeight) {
  //包含内容布局
- if (lp.width == ViewGroup.LayoutParams.WRAP_CONTENT) {
	  //获取对话框大小
	- res.getValue(com.android.internal.R.dimen.config_prefDialogWidth, mTmpValue, true)
	- baseSize = (int)mTmpValue.getDimension(packageMetrics)
	  //测量大小设置为baseSize	
	-　if (baseSize != 0 && desiredWindowWidth > baseSize) {
		- childWidthMeasureSpec = getRootMeasureSpec(baseSize, lp.width)
		- childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight, lp.height)
		- performMeasure(childWidthMeasureSpec, childHeightMeasureSpec)
		}
	}
}@ViewRootImpl.java



/***********************
 测量 
 设置View的mMeasuredWidth,mMeasuredHeight

 mOutsets虽然不可见，view的测量高宽要加上mOutsets
*/
performMeasure-->mView.measure@ViewRootImpl.java-->Measure@view.java-->
onMeasure(int widthMeasureSpec, int heightMeasureSpec){
  //获取显示屏信息
- DisplayMetrics metrics = getContext().getResources().getDisplayMetrics()
- boolean isPortrait = getResources().getConfiguration().orientation == ORIENTATION_PORTRAIT
  //根据outset调整宽高
- getOutsets(mOutsets)
- heightMeasureSpec = MeasureSpec.makeMeasureSpec(height + mOutsets.top + mOutsets.bottom, mode)
- widthMeasureSpec = MeasureSpec.makeMeasureSpec(width + mOutsets.left + mOutsets.right, mode)
- super.onMeasure(widthMeasureSpec, heightMeasureSpec){
	- int count = getChildCount()
	- for (int i = 0; i < count; i++) {
		- measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0)
		}
	- 
	}@FrameLayout.java
  //调整width
- int width = getMeasuredWidth()
}@DecorView.java


/***********************
 布局  
 设置View位置mLeft,mTop,mRight,mBottom
 view的位置要向左移动mOutsets的宽度偏移，向上移动mOutsets的高度偏移
*/
performLayout(WindowManager.LayoutParams lp, int desiredWindowWidth,int desiredWindowHeight){
- View host = mView
- host.layout(0, 0, host.getMeasuredWidth(), host.getMeasuredHeight())
- if(mLayoutRequesters.size()>0){
	- measureHierarchy(host,desiredWindowWidth, desiredWindowHeight)
	- host.layout(0, 0, host.getMeasuredWidth(), host.getMeasuredHeight())
	}
}@ViewRootImpl.java

host.layout(0, 0, host.getMeasuredWidth(), host.getMeasuredHeight())-->
onLayout(boolean changed, int left, int top, int right, int bottom){
- super.onLayout(changed, left, top, right, bottom){
	- 
	}@FrameLayout.java
 //根据outset调整位置
- getOutsets(mOutsets)-->outOutsetRect.set(mAttachInfo.mOutsets)
- offsetLeftAndRight((-mOutsets.left)){
	- mLeft,mRight //调整offset
	}
- offsetTopAndBottom((-mOutsets.top)){
	- mTop,mBottom //调整offset
	}
  //阴影效果。设置elevation,窗口立体高度
- updateElevation{
	- FREEFORM_WORKSPACE_STACK_ID设置20
	- PINNED_STACK_ID设置5
	}
}@DecorView.java



/***********************
  绘制
*/
setAppVisibility-->wtoken.sendAppVisibilityToClients@WindowManagerService.java-->
sendAppVisibilityToClients@AppWindowToken.java-->win.mClient.dispatchAppVisibility
-->dispatchAppVisibility-->mHandler.sendMessage(MSG_DISPATCH_APP_VISIBILITY)-->
handleAppVisibility{
- mAppVisible
- scheduleTraversals
}@ViewRootImpl.java


performTraversals-->performDraw(){
- if (mAttachInfo.mDisplayState == Display.STATE_OFF && !mReportNextDraw) {
	- return
	}
- final boolean fullRedrawNeeded = mFullRedrawNeeded
- draw(fullRedrawNeeded)
- if (mReportNextDraw) {
	- mReportNextDraw = false
	- 
	}
}@ViewRootImpl.java


draw(boolean fullRedrawNeeded){
- surface = mSurface //将数据绘制到mSurface.从windowManagerService返回
  //第一次绘制，去报jit打开(ActivityThread中设置的回调)
- if (!sFirstDrawComplete) {
	- sFirstDrawComplete = true
	- mHandler.post(sFirstDrawHandlers.get(i))-->sFirstDrawHandlers
	}
- mHardwareRenderer没有创建则{
	ttachInfo.mHardwareRenderer.initializeIfNeeded
	}
- 硬件attachInfo.mHardwareRenderer.draw(mView, attachInfo){
	- buildDisplayList-->(View进行绘制)view.getDisplayList
	- drawDisplayList
	- onHardwarePostDraw@ViewRootImpl.java
	- swapBuffers
	}@HardwareRenderer.java
- 软件drawSoftware(surface){
	- canvas = mSurface.lockCanvas
	- mView.draw(canvas){ //传入canvas
		- 绘制自己onDraw
		- 绘制子View，dispatchDraw-->drawChild-->child.draw
		}
	- surface.unlockCanvasAndPost
	}
}

getDisplayList{
- 
- 创建，mAttachInfo.mHardwareRenderer.createDisplayList
- LAYER_TYPE_HARDWARE{
	- 
	- canvas.drawHardwareLayer
 }LAYER_TYPE_SOFTWARE{
	- buildDrawingCache
	- 
 }没有设置layer的情况{
	- 跳过绘制，dispatchDraw
	- draw
 }
- 
}



frameworks/base/core/java/android/view/ViewRootImpl.java
frameworks/base/core/java/com/android/internal/policy/DecorView.java
frameworks/base/core/java/android/widget/FrameLayout.java
