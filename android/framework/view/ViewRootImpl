/*****************
 ViewRootImpl
 
 view{
  session  用于和WindowManager交互,加入,移除窗口
  IWindow  WindowManager通知View,窗口变化,布局,可见等
  }


*/

//activity创建view
performLaunchActivity@ActivityThread.java-->attach{
- mWindow = PolicyManager.makeNewWindow(this)
- mWindow.setCallback(this)
- mWindow.getLayoutInflater().setPrivateFactory(this)
}@Activity.java


//创建rootView：并加入decor为DecorView@PhoneWindow.java
handleResumeActivity-->(将activity的View加入到窗口)wm.addView(DecorView/*activity.window.getDecorView*/)@ActivityThread.java-->
addView-->LocalWindowManager.addView(设置LayoutParams)-->super.addView@window.java-->
CompatModeWrapper.addView-->mWindowManager.addView-->addView(View, ViewGroup.LayoutParams)
-->addView(view, params, null, false)-->addView(view){
- 加入系统属性监听方法
- 查找View是否已经加入，则找到根root增加计数
- 若是panel，找到改panel以来的窗口
- root = new ViewRootImpl
- mViews.add(view)
- mRoots.add(root)
- mParams.add(wparams)
- 执行root.setView(view) //将view加入到viewrootImpl
}WindowManagerGlobal.java

//在应用进程中创建
ViewRootImpl{
- mWindowSession = WindowManagerGlobal.getWindowSession() //获取一个session的代理(与windowManager通信)
- loadSystemProperties
}

setView{
- 判断surfaceHolder是由应用自己提供，还是使用系统
- attrs.setSurfaceInsets(view,false) //surfaceInset
- 使用系统的surfaceHolder，打开硬件加速enableHardwareAcceleration{
	- 判断应用是否开启硬件加速，FLAG_HARDWARE_ACCELERATED
	- 创建HardwareRenderer.createGlRenderer
	}
- requestLayout
- 创建输入通道new InputChannel
- mWindowSession.addToDisplay//加入窗口到WindowManager
- 加入到窗口服务，mWindowSession.addToDisplay(window,inputChannel)//关联窗口服务
- 输入事件是否有回调(一般没有)，willYouTakeTheInputQueue，有则{
	- 设置mInputQueueCallback
	- 设置mInputQueue
	}
- 若需要接收事件，创建事件接收器。WindowInputEventReceiver
}@ViewRootImpl.java


================================
//view布局：
sendAppVisibilityToClients-->win.mClient.dispatchAppVisibility@AppWindowToken.java-->
W.dispatchAppVisibility-->dispatchAppVisibility-->mHandler.sendMessage(MSG_DISPATCH_APP_VISIBILITY)
-->handleAppVisibility(mAppVisible 发生变化)-->scheduleTraversals-->mChoreographer.postCallback
(CALLBACK_TRAVERSAL)--scheduleConsumeBatchedInput-->mChoreographer.postCallback(CALLBACK_INPUT)
@ViewRootImpl.java


doCallbacks(Choreographer.CALLBACK_TRAVERSAL)-->c.run@Choreographer.java-->TraversalRunnable.run
-->doTraversal-->performTraversals{
- 
- 第一次执行{
	- 设置高宽为res.getDisplayMetrics,desiredWindowWidth,desiredWindowHeight//(屏幕或应用自己说明)
	- 初始attachInfo
	- 获取最后配置，mLastConfiguration
	- 设置contentIsert，fitSystemWindows	
	}否则{
	- 期望的窗口高宽设置，mWinFrame()		
	}
- 可见性变化viewVisibilityChanged
- 执行布局layoutRequested{
	- 第一次执行ensureTouchModeLocally
	- 否则{
		- 判断mContentInsets是否变化
		- 更新mAttachInfo.mVisibleInsets
		- 设置期望高宽,desiredWindowWidth，desiredWindowHeight 
		}
	- 执行测量measureHierarchy(desiredWindowWidth, desiredWindowHeight)
	}
- 第一次或可视变化{
	- 窗口是否自动调整大小(有输入窗口时)，保存属性在params		
	}
- mFitSystemWindowsRequested设置窗口的contentInsert{
	- fitSystemWindows(mFitSystemWindowsInsets)
	- 若需布局，则测量measureHierarchy
	}
- 若mFirst || windowShouldResize || insetsChanged{
	- relayoutWindow-->sWindowSession.relayout(mWindow,mView.getMeasuredWidth,mView.getMeasuredHeight,mSurface){
		- 设置了窗口，显示的帧mWinFrame，contentInsert
		- 返回mSurface用于绘制
		}
	}
- 若需要布局{
	- performLayout-->host.layout
	}
}


=================================
//measure设置view大小：rootView的大小值：DisplayMetrics packageMetrics = mView.getContext().getResources().getDisplayMetrics()
performTraversals-->measureHierarchy(LayoutParams,desiredWindowWidth,desiredWindowHeight){
- 布局为WRAP_CONTENT{
	- com.android.internal.R.dimen.config_prefDialogWidth//若是对话框窗口限制对话框布局成全屏
	- 计算baseSize
	- 将值和模式值合并在一个变量中，getRootMeasureSpec(basesize,LayoutParams.width)
	- performMeasure
	}

- 普通窗口{
	- 将值和模式值合并在一个变量中，getRootMeasureSpec(desiredWindowWidth,desiredWindowHeight)
	- performMeasure(childWidthMeasureSpec, childHeightMeasureSpec)-->
	performMeasure-->measure{
		- 创建缓存，LongSparseLongArray
		- 没有缓存，onMeasure-->setMeasuredDimension
		- 存在缓存，setMeasuredDimension
		- 测量值存入缓存，mMeasureCache.put
		}@View.java
	}
}@ViewRootImpl.java


_________________________________
viewGroup:

getChildMeasureSpec{
- 根据传入的参数(包含大小，MATCH_PARENT,WRAP_CONTENT)，确定子view的大小和测量模式(AT_MOST,EXACTLY,UNSPECIFIED)
- 返回测量结果，MeasureSpec.makeMeasureSpec
}


invalidateChildInParent

=================================
//窗口大小变化，窗口移除
服务端窗口变化：
updateResizingWindows

通知client窗口大小：
performLayoutAndPlaceSurfacesLockedInner-->win.mClient.resized@WindowManagerService.java
-->W.resized-->dispatchResized-->mHandler.sendMessage-->handleMessage(MSG_RESIZED_REPORT)
(更新大小)@ViewRootImpl.java

W.resized(传入大小参数)-->dispatchResized-->viewAncestor.dispatchResized-->
dispatchResized{
- mPendingOverscanInsets发生改变
- sendMessage(MSG_RESIZED)-->requestLayout{
	- 请求布局，mLayoutRequested
	- scheduleTraversals
	}
	
}

scheduleTraversals-->TraversalRunnable.run-->doTraversal-->performTraversals{
- 
- 第一次布局或窗口大小,可见变化，relayoutWindow{
	- mView.getMeasuredWidth/getMeasuredHeight //获取请求布局的宽高
	- 获取帧大小并设置surface，mWindowSession.relayout(requestedWidth,requestedHeight,mSurface)
	- 通知绘制完成，mWindowSession.finishDrawing
	}
}@ViewRootImpl.java


performTraversals-->performDraw-->draw



frameworks/base/core/java/android/view/WindowManagerImpl.java
frameworks/base/core/java/android/view/WindowManagerGlobal.java
frameworks/base/core/java/android/view/ViewRootImpl.java
frameworks/base/services/java/com/android/server/wm/Session.java

=================================
//绘制：
setAppVisibility-->wtoken.sendAppVisibilityToClients@WindowManagerService.java-->
sendAppVisibilityToClients@AppWindowToken.java-->win.mClient.dispatchAppVisibility
-->dispatchAppVisibility-->mHandler.sendMessage(MSG_DISPATCH_APP_VISIBILITY)-->
handleAppVisibility{
- mAppVisible
- scheduleTraversals
}@ViewRootImpl.java


performTraversals-->performDraw-->draw(){
- surface = mSurface //将数据绘制到mSurface.从windowManagerService返回
- mHardwareRenderer没有创建则{
	ttachInfo.mHardwareRenderer.initializeIfNeeded
	}
- 硬件attachInfo.mHardwareRenderer.draw(mView, attachInfo){
	- buildDisplayList-->(View进行绘制)view.getDisplayList
	- drawDisplayList
	- onHardwarePostDraw@ViewRootImpl.java
	- swapBuffers
	}@HardwareRenderer.java
- 软件drawSoftware(surface){
	- canvas = mSurface.lockCanvas
	- mView.draw(canvas){ //传入canvas
		- 绘制自己onDraw
		- 绘制子View，dispatchDraw-->drawChild-->child.draw
		}
	- surface.unlockCanvasAndPost
	}
}

getDisplayList{
- 
- 创建，mAttachInfo.mHardwareRenderer.createDisplayList
- LAYER_TYPE_HARDWARE{
	- 
	- canvas.drawHardwareLayer
 }LAYER_TYPE_SOFTWARE{
	- buildDrawingCache
	- 
 }没有设置layer的情况{
	- 跳过绘制，dispatchDraw
	- draw
 }
- 
}

frameworks/base/core/java/android/view/HardwareRenderer.java
