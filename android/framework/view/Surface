/******************************
 SurfaceSession -- SurfaceComposerClient。对应surfaceFlinger中的client
 SurfaceControl 操作native surface的接口。对应surfaceFlinger中的Layer
 Surface{ 
  - 封装SurfaceControl的IGraphicBufferProducer.应用绘制数据都是通过Surface
 }

 cpp层中是由SurfaceComposerClient控制显示窗口
*/
//activity的显示窗口。创建SurfaceSession
addWindow@WindowManagerService.java-->attach@WindowState.java-->
windowAddedLocked{
- mSurfaceSession = new SurfaceSession()
- mService.mSessions.add(this)
}@Session.java

 //activity 创建surfaceControl,surface
relayoutWindow(Session session, IWindow client, int seq, LayoutParams attrs,.... Surface outSurface){
- createSurfaceLocked(createSurfaceControl(outSurface, result, win, winAnimator))
  createSurfaceControl(Surface outSurface, int result, WindowState win,WindowStateAnimator winAnimator){
	- WindowSurfaceController surfaceController = winAnimator.createSurfaceLocked{
		- mSurfaceController = new WindowSurfaceController(mSession.mSurfaceSession)-->new SurfaceControlWithBackground
		- return mSurfaceController
		}@WindowSurfaceController
	}@WindowStateAnimator.java
- surfaceController.getSurface(outSurface)-->outSurface.copyFrom(mSurfaceControl)@WindowSurfaceController
}@WindowManagerService.java

//surfaceView的显示窗口。创建SurfaceSession,surfaceControl,surface
updateSurface{
- mSurfaceSession = new SurfaceSession(viewRoot.mSurface)
- new SurfaceControlWithBackground(mSurfaceSession)-->new SurfaceControl
- mSurface.copyFrom(mSurfaceControl)
}@SurfaceView.java


/*******
 surfaceSession   对应一个SurfaceComposerClient

*/
SurfaceSession{//创建新SurfaceComposerClient
- mNativeClient = nativeCreate-->SurfaceComposerClient* client = new SurfaceComposerClient()@android_view_SurfaceSession.cpp
}@SurfaceSession.java

SurfaceSession(Surface root){//复用nativeCreateScoped
  //c++对象指针
- private long mNativeClient = nativeCreateScoped(root.mNativeObject){
	- Surface *parent = reinterpret_cast<Surface*>(surfaceObject)
	- SurfaceComposerClient* client = new SurfaceComposerClient(parent->getIGraphicBufferProducer())
	- return reinterpret_cast<jlong>(client)
	}@android_view_SurfaceSession.cpp
}SurfaceSession.java


frameworks/base/core/java/android/view/SurfaceSession.java
frameworks/base/core/jni/android_view_SurfaceSession.cpp
/*******
 surfaceControl
	1 数据填充接口。用surface封装，创建了实际填充数据的IGraphicBufferProducer
	2 层次，大小，显示隐藏操作接口
 mNativeObject 一个指针指向SurfaceComposerClient
*/
//SurfaceControl.Builder
Builder(SurfaceSession session) {
- SurfaceSession mSession = session
}

SurfaceControl build() {
- new SurfaceControl(mSession, mName, mWidth, mHeight, mFormat, mFlags, mParent, mWindowType, mOwnerUid)
}@SurfaceControl.java

//创建native surfaceControl
SurfaceControl(SurfaceSession session, String name, int w, int h, int format, int flags,
            SurfaceControl parent, int windowType, int ownerUid){
- mName = name
- mNativeObject = nativeCreate(session, name, w, h, format, flags,...) //创建surfaceControl
}@SurfaceControl.java

nativeCreate(JNIEnv* env, jclass clazz, jobject sessionObj,jstring nameStr, 
	jint w, jint h, jint format, jint flags, jlong parentObject,jint windowType, jint ownerUid){
- name(env, nameStr)
  //获取surfaceSession创建的SurfaceComposerClient
- sp<SurfaceComposerClient> client(android_view_SurfaceSession_getClient(env, sessionObj))
  //创建surfaceControl
- sp<SurfaceControl> surface
- client->createSurface(String8(name.c_str()), w, h, format, &surface,){
	- sp<IGraphicBufferProducer> gbp
	- mClient->createSurface(name, w, h, format, flags, parentHandle,windowType, ownerUid, &handle, &gbp)
	- *outSurface = new SurfaceControl(this, handle, gbp, true /* owned */){
			- mClient(client)		//SurfaceComposerClient
			- mHandle(handle)		//surfaceflinger中的layer
			- mGraphicBufferProducer(gbp)	//IGraphicBufferProducer
			}@SurfaceControl.cpp
	}SurfaceComposerClient.cpp
- return reinterpret_cast<jlong>(surface.get())
}@android_view_SurfaceControl.cpp

//创建surface
getSurface-->generateSurfaceLocked{
- mSurfaceData = new Surface(mGraphicBufferProducer, false)
}@SurfaceControl.cpp

//销毁
destory-->nativeDestroy@SurfaceControl.java-->destroy-->mClient->destroySurface(mHandle)@SurfaceControl.cpp

//开始设置。所有的设置保存在一个对象中，提交时统一提交
openTransaction-->nativeOpenTransaction@SurfaceControl.java-->SurfaceComposerClient::openGlobalTransaction
@android_view_SurfaceControl.cpp

//操作层次，大小，隐藏，显示的接口
SurfaceControl::setLayer(int32_t layer)-->mClient->setLayer(mHandle, layer)
SurfaceControl::setPosition(float x, float y)
SurfaceControl::setSize(uint32_t w, uint32_t h) 
SurfaceControl::hide()
SurfaceControl::show()

//提交设置
closeTransaction-->nativeCloseTransaction@SurfaceControl.java-->SurfaceComposerClient::closeGlobalTransaction
@android_view_SurfaceControl.cpp

//设置parents
nativeReparentChildren(JNIEnv* env, jclass clazz, jlong nativeObject, jobject newParentObject)
@android_view_SurfaceControl.cpp-->reparentChildren(handle)@SurfaceControl.cpp-->
SurfaceComposerClient::reparentChildren-->Composer::reparentChildren(const sp<SurfaceComposerClient>& client,
        const sp<IBinder>& id,const sp<IBinder>& newParentHandle)){
- layer_state_t* s = getLayerStateLocked(client, id)
- s->what |= layer_state_t::eReparentChildren
- s->reparentHandle = newParentHandle
}@SurfaceComposerClient.cpp

//删除child
nativeSeverChildren(JNIEnv* env, jclass clazz, jlong nativeObject)@android_view_SurfaceControl.cpp-->
detachChildren()@SurfaceControl.cpp-->SurfaceComposerClient::detachChildren(const sp<IBinder>& id)-->
Composer::detachChildren(const sp<SurfaceComposerClient>& client, const sp<IBinder>& id){
- layer_state_t* s = getLayerStateLocked(client, id)
- s->what |= layer_state_t::eDetachChildren
}@SurfaceComposerClient.cpp



frameworks/base/core/java/android/view/SurfaceControl.java
frameworks/base/core/jni/android_view_SurfaceControl.cpp
frameworks/native/libs/gui/SurfaceControl.cpp
frameworks/native/libs/gui/SurfaceComposerClient.cpp
/*******
 Surface(java层) 
 mCanvas用于绘制图像
 
应用端绘制和提交数据
 1 创建surface
 2 获取数据buffer lockCanvas-->
 3 填充buffer
 3 提交buffer unlockCanvasAndPost-->

*/
1//创建surface
mSurface.copyFrom(mSurfaceControl)-->copyFrom(SurfaceControl other){
- long surfaceControlPtr = other.mNativeObject
  //创建surface
- newNativeObject = nativeGetFromSurfaceControl(surfaceControlPtr){
	- sp<SurfaceControl> ctrl(reinterpret_cast<SurfaceControl *>(surfaceControlNativeObj))
	- sp<Surface> surface(ctrl->getSurface())-->generateSurfaceLocked
		-->new Surface(mGraphicBufferProducer, false)@SurfaceControl.cpp
	- return reinterpret_cast<jlong>(surface.get())
	}@android_view_Surface.cpp
- setNativeObjectLocked(newNativeObject)
}@Surface.java

2//lockCanvas 初始化surface中的mCanvas并返回.传入inOutDirty指定绘制大小(可能会被改变)
lockCanvas(Rect inOutDirty){
- nativeLockCanvas(mNativeObject, mCanvas, inOutDirty)
- return mCanvas
}@Surface.java

//初始化canvas
nativeLockCanvas(JNIEnv* env, jclass clazz,jlong nativeObject, jobject canvasObj, jobject dirtyRectObj) {
- sp<Surface> surface(reinterpret_cast<Surface *>(nativeObject))
  //获取rect大小.获取ANativeWindow_Buffer (一个显示窗口的buffer,用于填充绘制数据)
- dirtyRect.left   = env->GetIntField(dirtyRectObj, gRectClassInfo.left)
- Rect* dirtyRectPtr = &dirtyRect
- ANativeWindow_Buffer outBuffer
- surface->lock(&outBuffer, dirtyRectPtr)
- SkImageInfo info = SkImageInfo::Make(outBuffer.width, outBuffer.height...)
  //创建canvas.bitmap应该是填充数据的空间
- SkBitmap bitmap
- bitmap.setPixels(outBuffer.bits)
- Canvas* nativeCanvas = GraphicsJNI::getNativeCanvas(env, canvasObj)
- nativeCanvas->setBitmap(bitmap)
  //创建新surface引用
- sp<Surface> lockedSurface(surface)
- return (jlong) lockedSurface.get()
}@android_view_Surface.cpp


3//填充数据
drawSoftware(Surface surface, AttachInfo attachInfo, int xoff, int yoff, boolean scalingRequired, Rect dirty){
- Canvas canvas = mSurface.lockCanvas(dirty)
- mView.draw(canvas){//绘制
	- 
	}@View.java
- surface.unlockCanvasAndPost(canvas)
}@ViewRootImpl.java


4//提交绘制。将一个填充了绘制数据的buffer，传送给bufferQueue
unlockCanvasAndPost-->nativeUnlockCanvasAndPost@Surface.java-->nativeUnlockCanvasAndPost{
- 设置新canvas并关联到java层，swapCanvasPtr
- surface->unlockAndPost
}@android_view_Surface.cpp


//从surface获取buffer
Surface::lock( ANativeWindow_Buffer* outBuffer, ARect* inOutDirtyBounds){
  //从队列中获取一个buffer
- ANativeWindowBuffer* out
- dequeueBuffer(&out, &fenceFd)
- sp<GraphicBuffer> backBuffer(GraphicBuffer::getSelf(out))
  //设置到outBuffer
- void* vaddr
- backBuffer->lockAsync(GRALLOC_USAGE_SW_READ_OFTEN | GRALLOC_USAGE_SW_WRITE_OFTEN,
		newDirtyRegion.bounds(), &vaddr, fenceFd)
- outBuffer->bits   = vaddr
}@Surface.cpp

//填充buffer完成，提交数据
surface->unlockAndPost{
- mLockedBuffer->unlock
- queueBuffer{
	- 获取buffer编号，getSlotFromBufferLocked
	- mGraphicBufferProducer->queueBuffer@IGraphicBufferProducer.cpp
	}
}@Surface.cpp

frameworks/base/core/java/android/view/Surface.java
frameworks/base/core/jni/android_view_Surface.cpp
frameworks/native/libs/gui/Surface.cpp
/*******
 cpp层使用的surface接口
*/

1 //创建 IGraphicBufferProducer
sp<IGraphicBufferProducer> bufferProducer;

2 //创建surface
android_view_Surface_createFromIGraphicBufferProducer(JNIEnv* env, const sp<IGraphicBufferProducer>& bufferProducer){
- sp<Surface> surface(new Surface(bufferProducer, true))
- android_view_Surface_createFromSurface(JNIEnv* env, const sp<Surface>& surface){
	- jobject surfaceObj = env->NewObject(gSurfaceClassInfo.clazz,gSurfaceClassInfo.ctor, (jlong)surface.get())
		-->Surface(long nativeObject)@Surface.java
	}
}@android_view_Surface.cpp


