/*audioTrack通过audioFlinger进行操作

*/


//new AudioTrack
AudioTrack@AudioTrack.java-->native_setup-->android_media_AudioTrack_native_setup
{
- 创建，new AudioTrack
- lpJniStorage = new AudioTrackJniStorage()
- 设置，lpJniStorage.set//MODE_STREAM模式没有共享内存，MODE_STATIC(只写一次数据)使用共享内存
	
}@android_media_AudioTrack.cpp


AudioTrack::AudioTrack-->set(sharedBuffer){
- 检查参数，获取参数
- 获取output，AudioSystem::getOutput-->aps->getOutput
- 设置采样率，格式，channel
- 若有回调函数，创建mAudioTrackThread，new AudioTrackThread->run
- 创建，createTrack_l{
	- 获取flinger，AudioSystem::get_audio_flinger
	- 获取各种参数，AudioSystem::getxxxx(output, streamType, &xxxx)
	- 创建mAudioTrack，audioFlinger->createTrack //audioFlinger端返回一个TrackHandle
	- sp<IMemory> mCblkMemory = track->getCblk() //返回mCblkMemory
	- mCblk = iMemPointer //audioFlinger端的回调
	- mProxy = new AudioTrackClientProxy(cblk, buffers/*audioFlinger端创建的buffer*/
	}
- 赋值流类型，mStreamType = streamType
}@AudioTrack.cpp

//android8.0
AudioTrack::set{
- 
- AudioTrackThread
- createTrack_l{
	- AudioSystem::getOutputForAttr(&output)-->aps->getOutputForAttr{//获取output
		- strategy = getStrategyForAttr(&attributes)//获取策略
		- device = getDeviceForStrategy(strategy)
		- getOutputForDevice(device)
		}@AudioPolicyManager.cpp
	- audioFlinger->createTrack
	}
}

//设置outputdevice
AudioTrack::setOutputDevice

//write
write@AudioTrack.java-->native_write_byte-->android_media_AudioTrack_native_write_byte
-->writeToTrack{
- sharedBuffer为0，直接写入write
- sharedBuffer不为0，拷贝数据到sharedBuffer
}@android_media_AudioTrack.cpp


AudioTrack::write{
- 获取buffer，obtainBuffer-->obtainBuffer(Buffer*,timespec)-->obtainBuffer{
	- 若服务对象dead，重建AudioTrack，restoreTrack_l
	- 通过代理从获取buffer，proxy->obtainBuffer-->ClientProxy::obtainBuffer
	}
- 拷贝数据，memcpy(audioBuffer.i8, buffer)
- releaseBuffer-->mProxy->releaseBuffer
}@AudioTrack.cpp



//play
play@AudioTrack.java-->native_start-->android_media_AudioTrack_start-->
lpTrack->start@android_media_AudioTrack.cpp-->start-->mAudioTrack->start@AudioTrack.cpp
-->AudioFlinger::TrackHandle::start@AudioFlinger.cpp-->mTrack->start@Tracks.cpp-->
start-->playbackThread->addTrack_l@Track.cpp-->AudioSystem::startOutput@Threads.cpp


//
start{
- 设置状态，mState
- 设置播放位置，mNewPosition
- 开始线程mAudioTrackThread，若为空则创建androidSetThreadPriority
- mAudioTrack->start@AudioTrack.cpp-->TrackHandle.start-->mTrack->start@Tracks.cpp-->
	
}@AudioTrack.cpp

//stop
stop@AudioTrack.java-->native_stop-->android_media_AudioTrack_stop
lpTrack->stop@android_media_AudioTrack.cpp-->stop@AudioTrack.cpp

stop{
- mAudioTrack->stop@AudioTrack.cpp-->(服务端Track)mTrack->stop@TrackHandle-->stop
	-->设置状态mState = STOPPED@Track.cpp
}@AudioTrack.cpp

//回调通知AudioTrack.java
AudioTrack::AudioTrackThread::threadLoop-->AudioTrack::processAudioBuffer

//音量
setStereoVolume-->native_setVolume@AudioTrack.java-->android_media_AudioTrack_set_volume
@android_media_AudioTrack.cpp-->setVolume-->mProxy->setVolumeLR@AudioTrack.cpp
mCblk->mVolumeLR@AudioTrackShared.h
=============
//mixer

FastMixer::onWork-->AudioMixer::setParameter

frameworks/base/media/java/android/media/AudioTrack.java
frameworks/base/core/jni/android_media_AudioTrack.cpp
frameworks/av/media/libmedia/AudioTrackShared.cpp
frameworks/av/media/libmedia/AudioTrack.cpp
frameworks/av/services/audioflinger/Tracks.cpp
frameworks/av/services/audioflinger/FastMixer.cpp
frameworks/av/services/audioflinger/AudioMixer.cpp
