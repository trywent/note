/* 
 audioManager接口

*/
AudioManager = Context.getSystemService("audio")

AudioService{
- 更新alias流，updateStreamVolumeAlias
- 创建并初始化流状态，createStreamStates
}

//获取流对应的设备
getDeviceForStream-->AudioSystem.getDevicesForStream@AudioService.java-->
getDevicesForStream@AudioSystem.java-->android_media_AudioSystem_getDevicesForStream
AudioSystem::getDevicesForStream@android_media_AudioSystem.cpp-->getDevicesForStream
@AudioSystem.cpp-->getDevicesForStream@AudioPolicyInterfaceImpl.cpp-->
getDevicesForStream@AudioPolicyManager.cpp


//设置流音量：最终是设置device音量
//streamState保存音量在mIndex中，同时将音量设置到AudioSystem
AudioManager.setStreamVolume-->AudioService.setStreamVolume(int streamType, int index, int flags, String callingPackage)
--setStreamVolume(int streamType, int index, int flags, String callingPackage,String caller, int uid) {
- ensureValidStreamType						//检查状态是否正确
- streamState = mStreamStates[streamTypeAlias = mStreamVolumeAlias]
- int device = getDeviceForStream(streamType)			//获取流对应的设备
- syncronised{
	- streamState.getIndex
	- 将要设置的音量根据mIndex转换，rescaleIndex
	- 若是a2dp，则设置setAvrcpAbsoluteVolume
	- 音量超标checkSafeMediaVolume				// 损害耳朵?
	- onSetStreamVolume(streamType, index, flags, device, caller)-->
		setStreamVolumeInt(stream, index, device, false, caller){	//设置音量
		- VolumeStreamState streamState = mStreamStates[streamType]
		- streamState.setIndex
		- sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME)-->
			AudioHandler.setDeviceVolume(VolumeStreamState streamState, int device){
			- streamState.applyDeviceVolume_syncVSS(device, isAvrcpAbsVolSupported)	//设置到audioSystem
			- sendMsg(MSG_PERSIST_VOLUME)-->persistVolume				//保存音量
			}
		}
	- index = mStreamStates[streamType].getIndex(device)
	}

- sendVolumeUpdate						//音量变化UI和广播
}@AudioService.java

applyDeviceVolume_syncVSS(int device, boolean isAvrcpAbsVolSupported) {
- index = (getIndex(device) + 5)/10
- setStreamVolumeIndex(index, device)
- AudioSystem.setStreamVolumeIndexAS(mStreamType, index, device)
}@AudioService.java

//设置音量到audioSystem
VolumeStreamState.applyDeviceVolume(int device, boolean isAvrcpAbsVolSupported)@AudioService.java-->
setStreamVolumeIndexAS(int stream, int index, int device)@AudioSystem.java-->
setStreamVolumeIndex(audio_stream_type_t stream,int index, audio_devices_t device)-->
aps->setStreamVolumeIndex(stream, index, device)@AudioSystem.cpp-->
setStreamVolumeIndex(audio_stream_type_t stream,int index,audio_devices_t device)-->
setVolumeIndexForAttributes(const audio_attributes_t &attributes,int index,audio_devices_t device)-->
checkAndSetVolume(IVolumeCurves &curves,VolumeSource volumeSource,int index,
        const sp<AudioOutputDescriptor>& outputDesc,audio_devices_t device...){
- float volumeDb = computeVolume(curves, volumeSource, index, device)
- outputDesc->setVolume(volumeDb, volumeSource, curves.getStreamTypes(), device, delayMs, force){	//设置音量，设置到audioFlinger
	-  mClientInterface->setStreamVolume(stream, volumeAmpl, mIoHandle, delayMs)
	}
}@AudioPolicyManager.cpp
-->setStreamVolumeIndex@AudioPolicyService.cpp-->setStreamVolume
@AudioSystem.cpp-->setStreamVolume@AudioFlinger.cpp

//设置流静音
setStreamMute-->mStreamStates[streamType].mute(IBinder cb)-->VolumeStreamState.mute{
- 获取binder客户端死亡处理类，getDeathHandler
- handler.mute(state)-->VolumeDeathHandler.mute{
	- 若设置静音，注册死亡处理(主要处理在客户端死亡后，取消它设置的静音)
	- 若设置不静音，注销死亡处理
	- 是否更新音量，sendMsg
	}
}@AudioService.java

================
流状态：
createStreamStates-->
VolumeStreamState{
- 设置流类型，mStreamType
- 最大音量，mIndexMax //*10
- 初始化流，AudioSystem.initStreamVolume //保存到HAL层中
- 创建mDeathHandlers
- 读取设置中音量值，readSettings
}


设置:
applyDeviceVolume//保存音量在mIndex


mute//


/*
 ringerMode
*/
setRingerModeExternal/setRingerModeInternal-->setRingerMode-->
setRingerModeInt{
- 判断流是否需要静音，isStreamAffectedByRingerMode
- 设置流静音，mStreamStates[streamType].mute
- 保存设置值，sendMsg(MSG_PERSIST_RINGER_MODE)-->persistRingerMode
- 发送广播,broadcastRingerMode(INTERNAL_RINGER_MODE_CHANGED_ACTION)
}



dump{
- 流状态dumpStreamStates{
	- muteCount //被静音次数
	- 
	}
- 响铃模式，dumpRingerMode{
	- RINGER_MODE_NAMES,静音，震动，正常
	- mRingerModeAffectedStreams //模式影响的流(设置静音时这些流也被静音)
	- mRingerModeMutedStreams //被静音的流(静音，震动模式)
	}
- 
}@AudioService.java

/*
 route
*/
//注册route监听
startMonitoringRoutes-->mAudioService.startWatchingRoutes(mAudioRoutesObserver)
@MediaRouter.java-->mRoutesObservers.register@AudioService.java


//更新route
IAudioRoutesObserver.Stub.dispatchAudioRoutesChanged-->updateAudioRoutes
-->dispatchRouteChanged-->cbi.cb.onRouteChanged@MediaRouter.java



frameworks/base/media/java/android/media/AudioService.java
frameworks/base/media/java/android/media/AudioSystem.java
frameworks/base/core/jni/android_media_AudioSystem.cpp
frameworks/av/media/libmedia/AudioSystem.cpp



