/*
  MediaCodec
*/

/* api接口
   example
*/
input ---->codec----> output


Data Types{
- Compressed Buffers //需要解码的数据
- Raw Audio Buffers //pcm数据
- Raw Video Buffers{
	- COLOR_FormatSurface
	- YUV,例如COLOR_FormatYUV420Flexible
	- other, specific formats
	}
}

MediaCodec{
//Creation
- MediaExtractor.getTrackFormat 			//获取文件格式
- MediaCodecList.findDecoderForFormat(MediaFormat) 	//获取codec名字
- createByCodecName(String)				//创建codec
//Initialization
- setCallback()
- configure (MediaFormat, Surface, MediaCrypto,flags) 	//设置视频输出的surface.解码还是编码
//Codec-specific data  一些特殊编码数据.必须在start之前提交
//Data Processing
- queueInputBuffer(index)/onInputBufferAvailable 	//同步/异步
- dequeuOutputBuffer(index)/onOutputBufferAvailable 	//同步/异步
}

//android4.1 同步模式
example{
- MediaCodec codec = MediaCodec.createDecoderByType(type);
- codec.configure(format, ...);
- codec.start();
 for (;;) {
   int inputBufferIndex = codec.dequeueInputBuffer(timeoutUs);
   if (inputBufferIndex >= 0) {
     inputBuffers = codec.getInputBuffers(inputBufferIndex)
     // fill inputBuffers[inputBufferIndex] with valid data
     ...
     codec.queueInputBuffer(inputBufferIndex, ...);
   }

   int outputBufferIndex = codec.dequeueOutputBuffer(timeoutUs);
   if (outputBufferIndex >= 0) {
     outputBuffers = codec.getOutputBuffers(outputBufferIndex)
     // outputBuffer is ready to be processed or rendered.
     ...
     codec.releaseOutputBuffer(outputBufferIndex, ...);
   } else if (outputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
     outputBuffers = codec.getOutputBuffers();
   } else if (outputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
     // Subsequent data will conform to new format.
     MediaFormat format = codec.getOutputFormat();
     ...
   }
 }
- codec.stop();
- codec.release();
}

//android8.0 异步模式
 MediaCodec codec = MediaCodec.createByCodecName(name);
 MediaFormat mOutputFormat; // member variable
 codec.setCallback(new MediaCodec.Callback() {
   @Override
   void onInputBufferAvailable(MediaCodec mc, int inputBufferId) {
     ByteBuffer inputBuffer = codec.getInputBuffer(inputBufferId);
     // fill inputBuffer with valid data
     …
     codec.queueInputBuffer(inputBufferId, …);
   }

   @Override
   void onOutputBufferAvailable(MediaCodec mc, int outputBufferId, …) {
     ByteBuffer outputBuffer = codec.getOutputBuffer(outputBufferId);
     MediaFormat bufferFormat = codec.getOutputFormat(outputBufferId); // option A
     // bufferFormat is equivalent to mOutputFormat
     // outputBuffer is ready to be processed or rendered.
     …
     codec.releaseOutputBuffer(outputBufferId, …);
   }

   @Override
   void onOutputFormatChanged(MediaCodec mc, MediaFormat format) {
     // Subsequent data will conform to new format.
     // Can ignore if using getOutputFormat(outputBufferId)
     mOutputFormat = format; // option B
   }

   @Override
   void onError(…) {
     …
   }
 });
 codec.configure(format, …);
 mOutputFormat = codec.getOutputFormat(); // option B
 codec.start();
 // wait for processing to complete
 codec.stop();
 codec.release();

frameworks/base/media/java/android/media/MediaCodec.java
frameworks/base/media/jni/android_media_MediaCodec.cpp
frameworks/av/media/libstagefright/MediaCodec.cpp
frameworks/av/media/libstagefright/ACodec.cpp
frameworks/av/media/libstagefright/MediaCodecList.cpp
