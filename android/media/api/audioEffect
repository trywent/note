/********************************
  音效 操作接口。effect真正创建在audioflinger

  混音时：
  effectChain的输入halInBuffer是Track的mainBuffer
  effectChain的输出halOutBuffer是mEffectBuffer
*/


//创建effect。。初始化static fields_t fields
AudioEffect-->native_init@AudioEffect.java-->
android_media_AudioEffect_native_init{
- fields.clazzEffect // AudioEffect class
- fields.clazzDesc   // AudioEffect.Descriptor class
}@android_media_AudioEffect.cpp

android_media_AudioEffect_native_setup(JNIEnv *env, jobject thiz, jobject weak_this,jstring type, jstring uuid,
	 jint priority, jint sessionId, jintArray jId,jobjectArray javadesc, jstring opPackageName){
- setAudioEffect(env, thiz, 0)
- lpAudioEffect = new AudioEffect(typeStr,String16(opPackageNameStr.c_str()),uuidStr, priority,effectCallback)
- setAudioEffect(env, thiz, lpAudioEffect)
}@android_media_AudioEffect.cpp

AudioEffect(const char *typeStr, const String16& opPackageName,const char *uuidStr,int32_t priority,effect_callback_t cbf)-->
set(pType, pUuid, priority, cbf, user, sessionId, io){
- mCbf = cbf
- mSessionId = sessionId
  //effect_descriptor_t     mDescriptor
- mDescriptor.type
- mDescriptor.uuid
- mIEffectClient = new EffectClient(this)
- iEffect = audioFlinger->createEffect((effect_descriptor_t *)&mDescriptor,
            mIEffectClient, priority, io, mSessionId, mOpPackageName, mClientPid)
- cblk = iEffect->getCblk()
  //音效接口
- mIEffect = iEffect
- mCblkMemory = cblk
}@AudioEffect.cpp


//打开
setEnabled(boolean enabled)-->native_setEnabled(enabled)@AudioEffect.java-->
android_media_AudioEffect_native_setEnabled{
- lpAudioEffect = getAudioEffect(env, thiz)
- lpAudioEffect->setEnabled(enabled)-->AudioEffect::setEnabled(bool enabled){
	- if(enabled){
		- mIEffect->enable()
	   }else{
		- mIEffect->disable()
 		}
	}
}@android_media_AudioEffect.cpp


//执行音效
AudioFlinger::EffectHandle::enable(){
- sp<EffectModule> effect = mEffect.promote()
- effect->setEnabled(true)
}@Effects.cpp



frameworks/base/media/java/android/media/audiofx/AudioEffect.java
frameworks/base/media/jni/audioeffect/android_media_AudioEffect.cpp
/**********
 Equalizer 均衡器（高低音处理）
*/
Equalizer(int priority, int audioSession){
- AudioEffect(UUID type, UUID uuid, int priority, int audioSession){
	- int[] id = new int[1]
	- native_setup(this,type.toString(), uuid.toString(), priority, audioSession, id,desc, ActivityThread.currentOpPackageName())
	- mId = id[0]
	}
- getNumberOfBands()
- mNumPresets = (int)getNumberOfPresets()
}@Equalizer.java


frameworks/base/media/java/android/media/audiofx/Equalizer.java
/**********
  echo canceler 回音消除，android本身使用的是单mic机制。使用播发数据和录制数据进行消除

  NS（Noise Suppression 噪声抑制） 
  VAD（Voice Activity Detection 静音检测）
  AECM（Acoustic Echo Canceller for Mobile 声学回声消除）
  AGC（Auto Gain Control 自动增益控制）
*/
1 AudioRecord
2 获取sessionId AudioRecord.getAudioSessionId()
3 创建AudioTrack(SessionId)
4 创建AcousticEchoCanceler(SessionId)
5 再次录音后会消除播放的声音？

AcousticEchoCanceler extends AudioEffect{
- super(EFFECT_TYPE_AEC, EFFECT_TYPE_NULL, 0, audioSession){
	- 
	}
}@AcousticEchoCanceler.java



frameworks/base/media/java/android/media/audiofx/AcousticEchoCanceler.java



