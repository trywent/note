//audio hw
//hal提供接口
{
- getSupportedDevices
- setVoiceVolume
- setMasterVolume/getMasterVolume
- setParameters/getParameters
- getInputBufferSize
- openOutputStream
- openInputStream
- supportsAudioPatches/createAudioPatch/releaseAudioPatch
}@DeviceHalInterface.h

//local hal接口(真正实现接口库文件)
struct audio_hw_device {
- get_supported_devices
- set_voice_volume
- set_master_volume/get_master_volume
- set_parameters/get_parameters
- get_input_buffer_size
- open_output_stream/close_output_stream
- open_input_stream/close_input_stream
}

声音设备:AUDIO_HARDWARE_MODULE_ID
legacy_adev_open{
- 创建ladev，(struct legacy_audio_device *)calloc
- 初始化设备函数，ladev->device.xxx
- 返回设备，*device = &ladev->device.common
- 创建AudioHardwareInterface接口，ladev->hwif=createAudioHardware-->new AudioHardware
}

============
//output
打开流：
AudioFlinger::openOutput-->open_output_stream-->adev_open_output_stream{
- 创建out，(legacy_stream_out *)calloc
- 转换设备，convert_audio_device
- 打开流，ladev->hwif->openOutputStream-->AudioHardware::openOutputStream-->
	new AudioStreamOutALSA@@AudioHardware.cpp
- 设置out->legacy_out为,AudioStreamOutALSA
- 封装AudioStreamOutALSA的方法到，out->stream.xxx
}@audio_hw_hal.cpp

写数据：
AudioFlinger::PlaybackThread::threadLoop-->threadLoop_write@Threads.cpp-->write@AudioHardware.cpp

停止：
AudioFlinger::PlaybackThread::threadLoop-->mOutput->stream->common.standby@Threads.cpp-->
standby@AudioHardware.cpp




=============
//input
open_input_stream -->adev_open_input_stream{
- 
}@audio_hw.c


in_read-->start_input_stream




frameworks/av/media/libaudiohal/include/media/audiohal/DeviceHalInterface.h
hardware/rk29/audio/audio_hw_hal.cpp
hardware/rk29/audio/AudioHardware.cpp
