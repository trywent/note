/*extrator

可解析媒体框架支持的各种文件格式的组件
*/

serviceName "media.extractor"
service mediaextractor /system/bin/mediaextractor
int main(int argc __unused, char** argv){
- sp<IServiceManager> sm = defaultServiceManager()
- MediaExtractorService::instantiate()-->publish//add to serviceMananger
}@main_extractorservice.cpp

//创建source
makeIDataSource(makeIDataSource(int fd, int64_t offset, int64_t length)){
- sp<DataSource> source = DataSource::CreateFromFd(fd, offset, length)-->
	source = new FileSource(fd, offset, length)@DataSource.cpp
- return source->asIDataSource()
}@MediaExtractorService.cpp



initFromDataSource@GenericSource.cpp-->MediaExtractor::Create@MediaExtractor.cpp
makeExtractor(const sp<IDataSource> &remoteSource, const char *mime){
- sp<DataSource> localSource = DataSource::CreateFromIDataSource(remoteSource)
  //根据类型创建对应的Extractor
- sp<IMediaExtractor> ret = MediaExtractor::CreateFromService(localSource, mime)
- registerMediaExtractor(ret, localSource, mime)
- return ret
}@@MediaExtractorService.cpp


//创建服务端extractor
MediaExtractor::CreateFromService(localSource, mime){
  //注册类型侦测函数
- RegisterDefaultSniffers{
	- RegisterSniffer_l(SniffMPEG4)
	- RegisterSniffer_l(SniffMatroska)
	- RegisterSniffer_l(SniffOgg)
	}
 //获取mime	
- sniff(source, &tmp, &confidence, &meta)
- mime = tmp.string()
 //根据mime创建extractor
- MediaExtractor *ret = NULL
- new MPEG4Extractor(source)
- new MP3Extractor(source, meta)
- new FLACExtractor(source)
}@MediaExtractor.cpp


/*
 MPEG4Extractor示例

*/
class MPEG4Source : public MediaSource {
- start
- stop
- read
}

struct Track {
        Track *next;
        sp<MetaData> meta;
        uint32_t timescale;
        sp<SampleTable> sampleTable;
        bool includes_expensive_metadata;
        bool skipTrack;
}@MPEG4Extractor.h

//Extractor
MPEG4Extractor::MPEG4Extractor(const sp<DataSource> &source){
- mDataSource(source)
- mFirstTrack(NULL)
}@MPEG4Extractor.cpp

//
MPEG4Source::parseChunk(off64_t *offset){
- mDataSource->readAt(*offset, hdr, 8)
- parseChunk
}

MPEG4Extractor::parseChunk(off64_t *offset, int depth) {
- trak:{
	- Track *track = new Track
	- mLastTrack = track
	- track->meta = new MetaData
	}
}@MPEG4Extractor.cpp

//创建MediaSource
sp<IMediaSource> MPEG4Extractor::getTrack(size_t index) {
- readMetaData
- sp<MPEG4Source> source =  new MPEG4Source(this,
            track->meta, mDataSource, track->timescale, track->sampleTable,
            mSidxEntries, trex, mMoofOffset, mItemTable)
- return source
}@MPEG4Extractor.cpp

//开始
MPEG4Source::start(MetaData *params) {

//读取数据
MPEG4Source::read(
        MediaBuffer **out, const ReadOptions *options) {
- 
- 
}@MPEG4Extractor.cpp

frameworks/av/services/mediaextractor/main_extractorservice.cpp
frameworks/av/media/libmedia/IMediaExtractorService.cpp
frameworks/av/services/mediaextractor/MediaExtractorService.cpp
frameworks/av/media/libstagefright/DataSource.cpp
frameworks/av/media/libstagefright/MediaExtractor.cpp
frameworks/av/media/libstagefright/MPEG4Extractor.cpp
