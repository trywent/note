/* mediaPlayerService

 player :public MediaPlayerInterface : public MediaPlayerBase

*/
main--> MediaPlayerService::instantiate@main_mediaserver.cpp
MediaPlayerService::instantiate-->addService(String16("media.player"), new MediaPlayerService())
@MediaPlayerService.cpp


//注册播放器内置factory：
MediaPlayerService::MediaPlayerService@MediaPlayerService.cpp-->
registerBuiltinFactories{
- registerFactory_l(new StagefrightPlayerFactory(), STAGEFRIGHT_PLAYER)
- registerFactory_l(new NuPlayerFactory(), NU_PLAYER)
- registerFactory_l(new TestPlayerFactory(), TEST_PLAYER)
- registerFactory_l(new ApePlayerFactory(),APE_PLAYER);
}@MediaPlayerFactory.cpp


/*
 服务端client
*/
service->create@mediaplayer.cpp-->create(const sp<IMediaPlayerClient>& client,audio_session_t audioSessionId){
- sp<Client> c = new Client(this, pid, connId, client){
	- mService = service
	- mClient = client
	}
- mClients.add(w)
}@MediaPlayerService.cpp


/*
 setDataSource{
	- setDataSource_pre 创建player
	- MediaPlayerBase->setDataSource
	- setDataSource_post
 }
*/
player->setDataSource@mediaplayer.cpp-->Client::setDataSource(const sp<IMediaHTTPService> &httpService,const char *url){
- "content://"{
	- String16 url16(url)
	- int fd = android::openContentProviderFile(url16)
	- setDataSource(fd, 0, 0x7fffffffffLL){
		//获取文件状态
		- struct stat sb
		- fstat(fd, &sb)
		//设置player
		- playerType = MediaPlayerFactory::getPlayerType(this,fd)
		- sp<MediaPlayerBase> p = setDataSource_pre(playerType)
		- setDataSource_post(p, p->setDataSource(fd, offset, length))
		}
	}
- 其它url{
	- player_type playerType = MediaPlayerFactory::getPlayerType(this, url)  //默认播放器类型	 
	- sp<MediaPlayerBase> p = setDataSource_pre(playerType)//创建播放器	  
	- setDataSource_post(p, p->setDataSource(httpService, url, headers))
	}
}@MediaPlayerService.cpp


//获取播放器类型
MediaPlayerFactory::getPlayerType(const sp<IMediaPlayer>& client, const char* url)-->GET_PLAYER_TYPE_IMPL{
- player_type ret = STAGEFRIGHT_PLAYER
   //遍历sFactoryMap
- for (size_t i = 0; i < sFactoryMap.size()){
	- IFactory* v = sFactoryMap.valueAt(i)
	- thisScore = v->scoreFactory(a, bestScore)
	- if (thisScore > bestScore) ret = sFactoryMap.keyAt(i)
	}
- bestScore==0.0 getDefaultPlayerType //分数为0,返回默认播放器NU_PLAYER
@MediaPlayerFactory.cpp

//创建player
setDataSource_pre(player_type){
- createPlayer(playerType)-->MediaPlayerFactory::createPlayer{
	- factory = sFactoryMap.valueFor(playerType)
	- p = factory->createPlayer(pid)-->NuPlayerFactory::createPlayer-->new NuPlayerDriver
	- p->initCheck
	- p->setNotifyCallback
	}@MediaPlayerFactory.cpp
- binder = defaultServiceManager()->getService(String16("media.extractor")
- mExtractorDeathListener=new ServiceDeathNotifier(binder)
- binder->linkToDeath(mExtractorDeathListener)
- binder = IOmx::getService()//默认执行
- mCodecDeathListener = new ServiceDeathNotifier(omx)
- binder->linkToDeath(mCodecDeathListener)
- mAudioOutput =new AudioOutput
- p->setAudioSink(mAudioOutput) //设置audio
}@MediaPlayerService.cpp

//设置源
setDataSource-->p->setDataSource(fd)@MediaPlayerService.cpp





frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp
frameworks/av/media/mediaserver/main_mediaserver.cpp
frameworks/av/media/libmedia/IMediaPlayerService.cpp
frameworks/av/media/libmedia/IMediaPlayer.cpp
frameworks/av/media/libstagefright/AudioPlayer.cpp
frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.cpp
frameworks/av/media/libmediaplayerservice/StagefrightPlayer.cpp
frameworks/av/media/libstagefright/AwesomePlayer.cpp


