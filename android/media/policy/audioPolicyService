//通过HAL层进行操作  9853：vendor/sprd/modules/audio/normal/newapm/O.x/AudioPolicyManagerSPRD.cpp
module{
//mixport
- IOProfile{
	- name
	- role //sink source
	- flags //AUDIO_OUTPUT_FLAG_PRIMARY AUDIO_OUTPUT_FLAG_DEEP_BUFFER
	- AudioProfile
	}
//deviceport
- DeviceDescriptor {
	- name
	- type
	- role //sink source
	- AudioProfile
	}
//route
- AudioRoute{
    - AudioPort sink //只有一个sink. 将route加入sink
    - AudioPort source  //多个source 将route加入source
   }
}

HwModule{
//mixport
- mOutputProfiles
- mInputProfiles
//deviceport
- DeviceVector mDeclaredDevices
//route
- AudioRouteVector mRoutes 
//包含mixport ,deviceport
- AudioPortVector mPorts  
}

AudioOutputDescriptor //output


AudioPolicyService::onFirstRef{
- mTonePlaybackThread = new AudioCommandThread        
- mAudioCommandThread = new AudioCommandThread// start audio commands thread
- mOutputCommandThread = new AudioCommandThread// start output activity command thread
- mAudioPolicyClient = new AudioPolicyClient(this) //audioflinger的封装
- mAudioPolicyManager = createAudioPolicyManager(mAudioPolicyClient);
- mAudioPolicyEffects = new AudioPolicyEffects
}

createAudioPolicyManager-->
AudioPolicyManager(AudioPolicyClientInterface *clientInterface){
- mpClientInterface = clientInterface //audioflinger
- mVolumeCurves = new VolumeCurvesCollection()
- AudioPolicyConfig config(mHwModules, mAvailableOutputDevices, mAvailableInputDevices)
  //解析加载odm/vendor/system下"audio_policy_configuration.xml"
- deserializeAudioPolicyXmlConfig(config)-->serializer.deserialize{
	- 
	}
  /* 使用 enginedefault    
   */
- engineInstance = audio_policy::EngineInstance::getInstance
- mEngine = engineInstance->queryInterface<AudioPolicyManagerInterface>()-->Engine{
	- ManagerInterfaceImpl mManagerInterface(this)
	}
- mEngine->initializeVolumeCurves //初始化音量
- 遍历,mHwModules{
	- mHwModules[i]->mHandle = mpClientInterface->loadHwModule(name)--> //获取audiohw接口,以前的加载hw库
	  AudioPolicyService::AudioPolicyClient::loadHwModule-->af->loadHwModule(name)
	  //将当前可用的设备关联到audiohw
	- 遍历,mOutputProfiles{
		- profileType = outProfile->getSupportedDeviceForType(outputDeviceTypes)//找对对应存在的设备
		- outputDesc = new SwAudioOutputDescriptor(outprofile) //创建当前设备的outputStream
		- outputDesc->mDevice = profileType
		- mpClientInterface->openOutput(&output)
		- mAvailableOutputDevices[index]->attach //设置attached设备可用状态
		- addOutput(output, outputDesc) //保存到mOutputs
		- setOutputDevice //设置route,patch
		}
	- 遍历,mInputProfiles{
		- sp<AudioInputDescriptor> inputDesc = new AudioInputDescriptor
		- mpClientInterface->openInput
		- devDesc->attach(mHwModules[i])/devDesc->importAudioPort //设置attached设备可用状态
		}
	}
- 
}@AudioPolicyManager.cpp

//解析xml
deserializeAudioPolicyXmlConfig(config)-->serializer.deserialize{
- deserializeCollection<ModuleTraits>(modules,&config)-->ModuleTraits::deserialize{
	//IOProfile mixport 
	- deserializeCollection<MixPortTraits>(mixPorts)
	- module->setProfiles(mixPorts)-->addProfile{
		- addOutputProfile //outputProflie/inputProfile
		- addInputProfile
		}
	 //DeviceDescriptor devicePorts 
	- deserializeCollection<DevicePortTraits>(devicePorts)
	- module->setDeclaredDevices(devicePorts)
	 //AudioRoute route
	- deserializeCollection<RouteTraits>(routes){
		- sink->addRoute/source->addRoute //保存route到sink,source中
		}
	- module->setRoutes(routes){
		- mRoutes = routes
		- refreshSupportedDevices-->stream->setSupportedDevices // 设置profile支持的设备
		}
	 //attachedDevices 已连接设备(DeviceDescriptor)
	- config->addAvailableDevice-->mAvailableOutputDevices.add/mAvailableInputDevices.add 
	- config->setDefaultOutputDevice-->mDefaultOutputDevices //"defaultOutputDevice"
	}
- config.setHwModules(modules) //加入module
- deserializeCollection<VolumeTraits>(volumes, &config)
- config.setVolumes(volumes) //volume配置
}@Serializer.cpp

//audioService接口实现
AudioPolicyService::{
- setDeviceConnectionState
- createAudioPatch
}AudioPolicyInterfaceImpl.cpp


//devices状态
AudioPolicyManager::setDeviceConnectionState-->setDeviceConnectionStateInt{
- mAvailableOutputDevices.add(devDesc)
- mAvailableInputDevices.add(devDesc)
}
=================
openOutput-->af->openOutput@AudioPolicyClientImpl.cpp-->AudioFlinger::openOutput

//android8.0
AudioPolicyManager::getOutputForAttr(&output,selectedDeviceId){
- strategy = getStrategyForAttr //获取策略
- device = getDeviceForStrategy(strategy)//获取设备
- getOutputForDevice(device,stream){
	- 遍历mOutputs查找合适的output返回
	- outputDesc = new SwAudioOutputDescriptor(profile)
	- outputDesc->mDevice = device
	- mpClientInterface->openOutput(output)
	- addOutput(output, outputDesc)
	}
}




frameworks/av/services/audioflinger/AudioPolicyService.cpp
frameworks/av/services/audiopolicy/service/AudioPolicyClientImpl.cpp
frameworks/av/services/audiopolicy/common/managerdefinitions/src/Serializer.cpp





