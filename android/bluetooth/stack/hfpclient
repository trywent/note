/*
 AG(audio gate):通常是手机
 hf(hands free):控制设备

 提供上层调用接口:BTA_ID_HS - bta_hf_client_reg
*/
 //jni接口
bthfClientInterface = {
    sizeof(bthf_client_interface_t),
    .init = init,
    .connect = connect,
    .disconnect = disconnect,
    .connect_audio = connect_audio,
    .dial = dial,
    .dial_memory = dial_memory,
    .handle_call_action = handle_call_action,
    .disconnect_audio = disconnect_audio,
    .query_current_calls = query_current_calls,
}@btif_hf_client.c
 //java获取stack jni接口
btif_hf_client_get_interface-->return &bthfClientInterface@btif_hf_client.c

 //初始化jni接口
init-->bt_hf_client_callbacks = callbacks@btif_hf_client.c

 //开始服务,设置bta api
btif_in_execute_service_request@btif_dm.cc
btif_hf_client_execute_service-->BTA_HfClientEnable(bta_hf_client_evt,BTIF_HF_CLIENT_SECURITY)@btif_hf_client.c
--> BTA_HfClientEnable(tBTA_HF_CLIENT_CBACK* p_cback, tBTA_SEC sec_mask)@bta_hf_client_api.c-->
bta_hf_client_api_enable{
- bta_sys_register(BTA_ID_HS, &bta_hf_client_reg)
- bta_hf_client_cb_arr_init   //初始化control block...回调接口,函数接口
  //设置接口回调到java...底层通知到java
- bta_hf_client_cb_arr.p_cback = bta_hf_client_evt  
- bta_sys_collision_register(BTA_ID_HS, bta_hf_client_collision_cback)
}@bta_hf_client_main.c




/*
 java上层调用stack接口

 状态机处理回调btif-->bta. bta-->btif
 状态表有4中状态,st_init,st_opening,st_open,st_closing
 每种状态中包含15种event.每种event有2个action,一个next state
*/
bta_sys_sendmsg(BTA_HF_CLIENT_API_AUDIO_OPEN_EVT)-->bta_message_loop->task_runner()->PostTask(bta_sys_event)
-->bta_sys_event@bta_sys_main.cc-->bta_hf_client_reg.evt_hdlr-->bta_hf_client_hdl_event-->
bta_hf_client_sm_execute{
- client_cb = bta_hf_client_find_cb_by_handle(layer_specific) //根据handle,连接设备control block
- state_table = bta_hf_client_st_tbl[client_cb->state] //获取状态表
- client_cb->state = state_table[event][BTA_HF_CLIENT_NEXT_STATE] //设置下一个状态
- action = state_table[event][i] 
  //获取该事件下状态的action,并执行
- bta_hf_client_action[action](p_data){
- client_cb->state = state_table[event][BTA_HF_CLIENT_NEXT_STATE] //设备下一个状态
 //是否通知上层状态
- bta_hf_client_app_callback
}@bta_hf_client_main.cc



//connect_audio
connect_audio{
- cb = btif_hf_client_get_cb_by_bda(*bd_addr)//获取连接的设备
- 若设备支持codec协商,BTA_HfClientSendAT(BTA_HF_CLIENT_AT_CMD_BCC)
- 不支持codec协商则执行,BTA_HfClientAudioOpen
-  btif_transfer_context(btif_in_hf_client_generic_evt)-->btif_sendmsg//在线程bt_jni_workqueue_thread,通知上层正在连接
	-do_in_jni_thread(&bt_jni_msg_ready)-->bt_jni_msg_ready-->btif_context_switched
	-->@btif_core.cc-->btif_in_hf_client_generic_evt
}@btif_hf_client.c




BTA_HfClientAudioOpen-->bta_sys_sendmsg(BTA_HF_CLIENT_API_AUDIO_OPEN_EVT)@btif_hf_client.c-->
bta_hf_client_sco_open-->bta_hf_client_sco_event(BTA_HF_CLIENT_SCO_OPEN_E)@bta_hf_client_sco.cc-->

 //disconnect_audio


//查询电话状态
query_current_calls-->BTA_HfClientSendAT(cb->handle, BTA_HF_CLIENT_AT_CMD_CLCC)@btif_hf_client.cc-->
BTA_HfClientSendAT-->bta_sys_sendmsg@bta_hf_client_api.cc


//接听，挂断通话
handle_call_action(const RawAddress* bd_addr,bthf_client_call_action_t action,int idx){
- btif_hf_client_cb_t* cb = btif_hf_client_get_cb_by_bda(*bd_addr)
- switch (action) {
	- BTHF_CLIENT_CALL_ACTION_CHLD_0:BTA_HfClientSendAT(cb->handle, BTA_HF_CLIENT_AT_CMD_CHLD, 0, 0, NULL)
	  //挂断
	- BTHF_CLIENT_CALL_ACTION_CHUP:BTA_HfClientSendAT(cb->handle, BTA_HF_CLIENT_AT_CMD_CHUP, 0, 0, NULL)
	}
}@btif_hf_client.cc


/*
 hfp发送at命令
*/
BTA_HfClientSendAT(uint16_t handle, tBTA_HF_CLIENT_AT_CMD_TYPE at,uint32_t val1, uint32_t val2, const char* str){
- tBTA_HF_CLIENT_DATA_VAL* p_buf = (tBTA_HF_CLIENT_DATA_VAL*)osi_malloc(sizeof(tBTA_HF_CLIENT_DATA_VAL))
- p_buf->hdr.event = BTA_HF_CLIENT_SEND_AT_CMD_EVT
- p_buf->uint8_val = at
- p_buf->uint32_val1 = val1
- p_buf->hdr.layer_specific = handle
  //发送事件，切换到bta上下文
- bta_sys_sendmsg(p_buf)
}@bta_hf_client_api.cc

bta_hf_client_send_at_cmd((tBTA_HF_CLIENT_DATA* p_data)){
- tBTA_HF_CLIENT_CB* client_cb = bta_hf_client_find_cb_by_handle(p_data->hdr.layer_specific)
  //命令类型
- tBTA_HF_CLIENT_DATA_VAL* p_val = (tBTA_HF_CLIENT_DATA_VAL*)p_data
- switch(p_val->uint8_val){
	- BTA_HF_CLIENT_AT_CMD_VTS:bta_hf_client_send_at_vts(client_cb, (char)p_val->uint32_val1)
	- BTA_HF_CLIENT_AT_CMD_CLCC:bta_hf_client_send_at_clcc(client_cb){
		- buf = "AT+CLCC\r"
		- bta_hf_client_send_at(client_cb, BTA_HF_CLIENT_AT_CLCC, buf, strlen(buf))
		}
	}
}@bta_hf_client_at.cc


bta_hf_client_send_at(tBTA_HF_CLIENT_CB* client_cb,tBTA_HF_CLIENT_AT_CMD cmd, const char* buf,uint16_t buf_len) {
  //当前可以发送AT命令
- if ((client_cb->at_cb.current_cmd == BTA_HF_CLIENT_AT_NONE ||client_cb->svc_conn == false) &&
	!alarm_is_scheduled(client_cb->at_cb.hold_timer)) {
	- client_cb->at_cb.current_cmd = cmd
	- PORT_WriteData(client_cb->conn_handle, buf, buf_len, &len)
	//加入命令回复计时器
	- bta_hf_client_start_at_resp_timer(client_cb)-->alarm_set_on_mloop(client_cb->at_cb.resp_timer, BTA_HF_CLIENT_AT_TIMEOUT,
                     bta_hf_client_at_resp_timer_cback)
	}
 //延时发送AT
- bta_hf_client_queue_at(client_cb, cmd, buf, buf_len)
}@bta_hf_client_at.cc

 //命令超时
bta_hf_client_at_resp_timer_cback(void* data){
- tBTA_HF_CLIENT_CB* client_cb = (tBTA_HF_CLIENT_CB*)data
  //AT_CNUM AT_CLCC
- bta_hf_client_handle_ok(client_cb)
  //其它命令
- msg.hdr.layer_specific = client_cb->handle
- bta_hf_client_sm_execute(BTA_HF_CLIENT_API_CLOSE_EVT, &msg)
}@bta_hf_client_at.cc


/*
  收到命令
*/
bta_hf_client_rfc_data(tBTA_HF_CLIENT_DATA* p_data) {
- tBTA_HF_CLIENT_CB* client_cb = bta_hf_client_find_cb_by_handle(p_data->hdr.layer_specific)
  //读取数据，解析数据
- PORT_ReadData(client_cb->conn_handle, buf, BTA_HF_CLIENT_RFC_READ_MAX,&len)
- bta_hf_client_at_parse(client_cb, buf, len){
	- bta_hf_client_at_parse_start(client_cb){
		}
	- bta_hf_client_at_clear_buf(client_cb)
	}@bta_hf_client_at.cc
}@bta_hf_client_act.cc

//解析收到的命令
bta_hf_client_at_parse_start(client_cb){
 //遍历解析函数。查找对应的解析函数
- bta_hf_client_parser_cb[i](client_cb, buf)
}@bta_hf_client_act.cc

//收到clcc回复
bta_hf_client_parse_clcc(tBTA_HF_CLIENT_CB* client_cb,char* buffer){
- bta_hf_client_handle_clcc(client_cb, idx, dir, status, mode, mpty, numstr,type)-->
  bta_hf_client_clcc(tBTA_HF_CLIENT_CB* client_cb, uint32_t idx,bool incoming, uint8_t status, bool mpty,char* number){
	- evt.clcc.idx = idx
	- evt.clcc.inc = incoming
	- evt.clcc.status = status
	- bta_hf_client_app_callback(BTA_HF_CLIENT_CLCC_EVT, &evt)-->bta_hf_client_cb_arr.p_cback(event, data)
	}
 //发送命令完成回调
- bta_hf_client_handle_ok(client_cb)-->
  bta_hf_client_at_result(tBTA_HF_CLIENT_CB* client_cb,tBTA_HF_CLIENT_AT_RESULT_TYPE type, uint16_t cme){
	- evt.result.type = type //0 ok.1 error
	- evt.result.cme = cme
	}
}@bta_hf_client_act.cc


/*
 状态机处理事件
*/

bta_hf_client_hdl_event-->bta_hf_client_sm_execute-->bta_hf_client_action[BTA_HF_CLIENT_SEND_AT_CMD]-->
bta_hf_client_send_at_cmd{
-
}@bta_hf_client_at.cc


===================
/*
 底层回调到java

 bta_hf_client_cb_arr.p_cback
*/
bta_hf_client_app_callback-->bta_hf_client_cb.p_cback@bta_hf_client_main.c
bta_hf_client_evt(event)-->btif_transfer_context(btif_hf_client_upstreams_evt,event)
btif_hf_client_upstreams_evt{
- BTA_HF_CLIENT_OPEN_EVT{//连接
	- btif_hf_client_cb.state = BTHF_CLIENT_CONNECTION_STATE_CONNECTED
	- HAL_CBACK(bt_hf_client_callbacks, connection_state_cb)//回调
	}
  //电话状态
- BTA_HF_CLIENT_IND_EVT:process_ind_evt{
	- HAL_CBACK(bt_hf_client_callbacks, call_cb)
	- HAL_CBACK(bt_hf_client_callbacks, callsetup_cb)
	}
  //命令处理结束
- BTA_HF_CLIENT_AT_RESULT_EVT:
	- HAL_CBACK(bt_hf_client_callbacks, cmd_complete_cb)
  //通话状态
- BTA_HF_CLIENT_CLCC_EVT:
	- HAL_CBACK(bt_hf_client_callbacks, current_calls_cb)
- BTA_HF_CLIENT_AUDIO_OPEN_EVT://接听
	- HAL_CBACK(bt_hf_client_callbacks, audio_state_cb, BTHF_CLIENT_AUDIO_STATE_CONNECTED)
	
- BTA_HF_CLIENT_AUDIO_CLOSE_EVT://声音断开
	- HAL_CBACK(bt_hf_client_callbacks, audio_state_cb, BTHF_CLIENT_AUDIO_STATE_DISCONNECTED)

}@btif_hf_client.c



===================
/*
 sco
 */
bta_hf_client_sm_execute-->bta_hf_client_action{
- bta_hf_client_sco_open
- bta_hf_client_sco_close
}@bta_hf_client_main.cc-->
bta_hf_client_sco_event{//sco状态处理
- BTA_HF_CLIENT_SCO_SHUTDOWN_ST{
	- BTA_HF_CLIENT_SCO_LISTEN_E
	- BTA_HF_CLIENT_SCO_OPEN_E
	}

- BTA_HF_CLIENT_SCO_LISTEN_ST

- BTA_HF_CLIENT_SCO_OPEN_ST{
	- 
	}
}@bta_hf_client_sco.cc

bta_hf_client_sco_create(origin/*是否发起连接*/){
- origin{
	- BTM_SetEScoMode(&params)
	- bta_sys_sco_use	
	}
- BTM_CreateSco( bta_hf_client_sco_conn_cback,bta_hf_client_sco_disc_cback)
- 非origin{
	- BTM_RegForEScoEvts(bta_hf_client_esco_connreq_cback) //注册连接监听
	}
}@bta_hf_client_sco.cc

BTM_CreateSco{
- 遍历 p= btm_cb.sco_cb.sco_db[0]{ //BTM_MAX_SCO_LINKS最多3个sco连接
   	- p->p_conn_cb = p_conn_cb
	- p->p_disc_cb = p_disc_cb

	} 
}

===================
/*
  rfc
*/
bta_hf_client_port_cback-->bta_sys_sendmsg(BTA_HF_CLIENT_RFC_DATA_EVT)

(状态机执行)bta_hf_client_action(bta_hf_client_st_open[RFC_DATA_EVT])-->bta_hf_client_rfc_data
@bta_hf_client_act.cc-->bta_hf_client_at_parse-->bta_hf_client_at_parse_start-->
bta_hf_client_parser_cb@bta_hf_client_at.cc




//收到AT command
bta_hf_client_port_cback@bta_hf_client_rfc.cc-->bta_hf_client_action[BTA_HF_CLIENT_RFC_DATA]
@bta_hf_client_main.cc-->bta_hf_client_rfc_data@bta_hf_client_act.cc-->
bta_hf_client_at_parse{//解析命令
- 
- bta_hf_client_at_parse_start
}@btif_hf_client.cc

===================
/*hpfclient连接
  1 RFCOMM连接
  2 服务层连接
*/

//hf端发起连接
bta_hf_client_rfc_open(tBTA_HF_CLIENT_DATA* p_data){
- tBTA_HF_CLIENT_CB* client_cb = bta_hf_client_find_cb_by_handle(p_data->hdr.layer_specific)
- bta_sys_conn_open(BTA_ID_HS, 1, client_cb->peer_addr)
  //SLC服务层连接
- bta_hf_client_slc_seq(client_cb, false)
}@bta_hf_client_act.cc


//收到AG端的连接数据
bta_hf_client_handle_ok(tBTA_HF_CLIENT_CB* client_cb) {
- bta_hf_client_stop_at_resp_timer(client_cb)
- if (!client_cb->svc_conn) {
	  //SLC服务层连接
	- bta_hf_client_slc_seq(client_cb, false) 
    	- return
  }
- 
}


bta_hf_client_slc_seq(tBTA_HF_CLIENT_CB* client_cb, bool error) {

}@bta_hf_client_main.cc

btif/src/btif_hf_client.cc
bta/hf_client/bta_hf_client_api.cc
bta/hf_client/bta_hf_client_main.cc
bta/sys/bta_sys_main.cc
bta/hf_client/bta_hf_client_sco.cc
bta/hf_client/bta_hf_client_act.cc
bta/hf_client/bta_hf_client_at.cc
stack/btm/btm_sco.cc
bta/hf_client/bta_hf_client_rfc.cc
