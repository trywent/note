/*********************
 btav
*/

bta_sys_sendmsg-->bta_av_reg->evt_hdlr--> //在线程message_loop_thread_
bta_av_hdl_event{
- bta_av_nsm_act[event] //非状态机处理消息
- bta_av_sm_execute //状态机,av控制处理
- bta_av_ssm_execute  //状态机,av流控制处理
}@bta_av_main.cc

/*********************
 a2dpsink 初始化
 设置a2dpsink 的api @bta_av_api
 
*/
static const btav_sink_interface_t bt_av_sink_interface = {
    sizeof(btav_sink_interface_t),
    init_sink,
    sink_connect_src,
    disconnect,
    cleanup_sink,
    update_audio_focus_state,
    update_audio_track_gain,
};

init_sink-->btif_av_init(BTA_A2DP_SINK_SERVICE_ID){
- btif_a2dp_sink_startup{
	- 初始化,btif_a2dp_sink_cb
	- worker_thread = thread_new("btif_a2dp_sink_worker_thread") //创建线程
	- rx_audio_queue,cmd_msg_queue //注册工作队列到worker_thread
	- fixed_queue_register_dequeue(cmd_msg_queue,btif_a2dp_sink_command_ready)
	}
- btif_enable_service(service_id)-->btif_av_sink_execute_service
	- BTA_AvEnable(bte_av_callback){
		- bta_sys_register(BTA_ID_AV, &bta_av_reg)@bta_av_api.cc //注册bta接口
		- bta_sys_sendmsg(BTA_AV_API_ENABLE_EVT)//打开api?
		}
	- BTA_AvRegister(BTA_AV_CHNL_AUDIO,bte_av_sink_media_callback){
		- tBTA_AV_API_REG* p_buf //创建
		- p_buf->hdr.layer_specific = BTA_AV_CHNL_AUDIO
		- p_buf->p_app_sink_data_cback = bte_av_sink_media_callback
		- bta_sys_sendmsg(BTA_AV_API_REGISTER_EVT)-->bta_av_api_register@bta_av_main.cc
		}
	}
- btif_av_cb.sm_handle = btif_sm_init(btif_av_state_handlers) //初始化状态机
}@btif_av.cc


BTA_AvEnable(bte_av_callback)-->bta_av_api_enable{//enable 设置bta_av_cb回调.非状态机处理
- bta_av_cb.p_cback = bte_av_callback
- bta_av_cb.features = p_data->api_enable.features //设置功能
-(*bta_av_cb.p_cback)(BTA_AV_ENABLE_EVT, &bta_av_data)-->bte_av_callback
}@bta_av_api.cc

BTA_AvRegister(BTA_AV_CHNL_AUDIO,bte_av_sink_media_callback)-->bta_av_api_register{//register.非状态机处理
- 创建registr,p_scb
- p_scb= bta_av_alloc_scb(BTA_AV_CHNL_AUDIO)
- BTA_AV_FEAT_RCTG{//control TG功能
	- bta_ar_reg_avrc(UUID_SERVCLASS_AV_REM_CTRL_TARGET) //注册一个sdp record
	}
- 是BTA_AV_CHNL_AUDIO{//初始化scb(stream control block) 
	- scb
	}
- p_scb->seps[codec_index].p_app_sink_data_cback //设置sink数据处理回调函数
- cs.p_sink_data_cback = bta_av_sink_data_cback
- (*bta_av_cb.p_cback)(BTA_AV_REGISTER_EVT, &bta_av_data)-->bte_av_callback
}@bta_av_main.cc

//收到数据回调
bte_av_callback-->btif_transfer_context(btif_av_handle_event)
-->btif_av_handle_event{
- BTIF_AV_CLEANUP_REQ_EVT
- BTA_AV_REGISTER_EVT
- btif_sm_dispatch-->p_cb->p_handlers-->btif_av_state_handlers[state]{//状态机处理
	- BTA_AV_REGISTER_EVT: btif_av_cb.bta_handle= registr.hndl
	- BTIF_AV_CONNECT_REQ_EVT:
	}
}@btif_av.cc

/*********************
btif中状态机 btif_av_state_handlers(初始状态BTIF_AV_STATE_IDLE)
bta中状态表(stream state machine) bta_av_a2dp_action
bta_av_a2dp_action 定义了所有操作函数

*/
typedef enum { //状态
  BTIF_AV_STATE_IDLE = 0x0,
  BTIF_AV_STATE_OPENING,
  BTIF_AV_STATE_OPENED,
  BTIF_AV_STATE_STARTED,
  BTIF_AV_STATE_CLOSING
}

btif_sm_handler_t btif_av_state_handlers[] = {
    btif_av_state_idle_handler, btif_av_state_opening_handler,
    btif_av_state_opened_handler, btif_av_state_started_handler,
    btif_av_state_closing_handler}

//状态切换
btif_sm_change_state(handle,state)-->
btif_av_state_idle_handler{
- btif_sm_cb_t* p_cb = (btif_sm_cb_t*)handle
- p_cb->p_handlers[p_cb->state](BTIF_SM_EXIT_EVT) //离开当前状态
- p_cb->state = state //更新状态
- p_cb->p_handlers[p_cb->state](BTIF_SM_ENTER_EVT)//进入新状态
}@btif_av.cc

//获取状态
btif_sm_get_state-->p_cb->state@btif_sm.cc

//事件处理
btif_av_handle_event{
- BTIF_AV_CLEANUP_REQ_EVT{
	- btif_a2dp_source_shutdown
	- btif_a2dp_sink_shutdown
	}
- default:btif_sm_dispatch(btif_av_cb.sm_handle, event){
	- p_cb->p_handlers[p_cb->state](event, data)
	}@btif_sm.cc
}@btif_av.cc

/*********************
 idle
*/
btif_av_state_idle_handler{

}

//connect
sink_connect_src-->btif_queue_connect(UUID_SERVCLASS_AUDIO_SINK, bd_addr, connect_int)
-->queue_int_handle_evt-->connect_int-->btif_sm_dispatch(BTIF_AV_CONNECT_REQ_EVT)


BTA_AvOpen{BTA_AV_API_OPEN_EVT}@btif_av_api.cc-->bta_sys_sendmsg-->bta_av_reg->evt_hdlr-->
bta_av_hdl_event@bta_av_main.cc
-->bta_av_ssm_execute(BTA_AV_API_OPEN_EVT){ //状态机,av流控制处理
- state_table = bta_av_sst_tbl[p_scb->state] //当前状态表
- p_scb->p_act_tbl[action]()-->bta_av_a2dp_action[action] //执行处理
 -->bta_av_connect_req@bta_av_aact.cc
}@bta_av_ssm.cc



//处理命令
avdt_scb_hdl_pkt@avdt_scb.cc-->avdt_scb_hdl_pkt_no_frag-->(*p_scb->cs.p_sink_data_cback)@avdt_scb_act.cc
bta_av_sink_data_cback-->p_app_sink_data_cback@bta_av_aact.cc-->bte_av_sink_media_callback@btif_av.cc
btif_a2dp_sink_update_decoder-->fixed_queue_enqueue(cmd_msg_queue,BTIF_MEDIA_SINK_DECODER_UPDATE)
@btif_a2dp_sink.cc

btif_a2dp_sink_command_ready{
- btif_a2dp_sink_decoder_update_event{
	- 更新采样率,声道
	- btif_a2dp_sink_cb.audio_track = BtifAvrcpAudioTrackCreate@btif_avrcp_audio_track.cc //创建audioTrack
	}
- btif_a2dp_sink_clear_track_event
- BTIF_MEDIA_SINK_SET_FOCUS_STATE://设置焦点
	btif_a2dp_sink_set_focus_state_event
- btif_a2dp_sink_audio_rx_flush_event
}@btif_a2dp_sink.cc

//stream数据解码
bte_av_sink_media_callback@btif_av.cc
btif_a2dp_sink_enqueue_buf(BT_HDR* p_pkt){
- memcpy(p_msg->data, p_pkt->data + p_pkt->offset, p_pkt->len) //将数据拷贝到p_msg->data中
- fixed_queue_enqueue(btif_a2dp_sink_cb.rx_audio_queue, p_msg)         //将msg加入queue中
  //收到5个数据包才开始解码
- if (fixed_queue_length(btif_a2dp_sink_cb.rx_audio_queue) == MAX_A2DP_DELAYED_START_FRAME_COUNT)
   - btif_a2dp_sink_audio_handle_start_decoding{
	- BtifAvrcpAudioTrackStart(btif_a2dp_sink_cb.audio_track)//开始AudioTrack
	- btif_a2dp_sink_cb.decode_alarm = alarm_new_periodic("btif.a2dp_sink_decode")
	  //20ms
	- alarm_set(btif_a2dp_sink_cb.decode_alarm, BTIF_SINK_MEDIA_TIME_TICK_MS,btif_decode_alarm_cb)-->
	  thread_post(btif_a2dp_sink_cb.worker_thread, btif_a2dp_sink_avk_handle_timer)
	}
}@btif_a2dp_sink.cc

btif_a2dp_sink_avk_handle_timer{
- BT_HDR* p_msg = (BT_HDR*)fixed_queue_try_dequeue(btif_a2dp_sink_cb.rx_audio_queue)
- btif_a2dp_sink_handle_inc_media(p_msg)-->btif_a2dp_sink_cb.decoder_interface->decode_packet(p_msg)
}@btif_a2dp_sink.cc

//设置焦点
update_audio_focus_state@btif_av.cc-->btif_a2dp_sink_set_focus_state_req{
- BTIF_MEDIA_SINK_FOCUS_UPDATE* p_buf =reinterpret_cast<tBTIF_MEDIA_SINK_FOCUS_UPDATE*>(osi_malloc())
- p_buf->hdr.event = BTIF_MEDIA_SINK_SET_FOCUS_STATE
- fixed_queue_enqueue(btif_a2dp_sink_cb.cmd_msg_queue, p_buf)
}@btif_a2dp_sink.cc



btif_dm_upstreams_evt-->btif_dm_execute_service_request@



/*********************
 opening
*/

/*********************
 opend
*/

/*********************
 started
*/
btif_av_state_started_handler{
- BTIF_SM_ENTER_EVT{
	- btif_report_audio_state
	- get_element_attr_cmd,register_playstatuschangeByAddr //sprd
	}
}


/*********************
 closing
*/
//播放状态
btif_a2dp_on_stopped-->btif_a2dp_sink_on_stopped



btif/src/btif_av.cc
btif/src/btif_a2dp.cc
btif/src/btif_a2dp_sink.cc
btif/src/btif_avrcp_audio_track.cc
btif/src/btif_dm.cc
bta/av/bta_av_main.cc
bta/av/bta_av_ssm.cc
bta/av/bta_av_aact.cc
stack/avdt/avdt_scb_act.cc
stack/avdt/avdt_scb.cc


