/*******************
 bluetoothService

*/
startOtherServices-->mSystemServiceManager.startService(BluetoothService.class)@SystemServer.java
-->BluetoothService{
-mBluetoothManagerService = new BluetoothManagerService()
}@BluetoothService.java-->

mSystemServiceManager.startBootPhase@SystemServer.java-->startBootPhase-->
service.onBootPhase@SystemServiceManager.java-->onBootPhase(int phase){
- PHASE_SYSTEM_SERVICES_READY: //发布服务
	publishBinderService(BluetoothAdapter.BLUETOOTH_MANAGER_SERVICE,mBluetoothManagerService)
- PHASE_ACTIVITY_MANAGER_READY:	mBluetoothManagerService.handleOnBootPhase--> //bluetoothServiceManager
	handleOnBootPhase{
	- sendEnableMsg(mQuietEnableExternal)-->handleEnable-->doBind(IBluetooth)//启动时打开蓝牙
	- getNameAndAddress-->handleMessage(MESSAGE_GET_NAME_AND_ADDRESS)-->doBind(IBluetooth) //获取完成会自动关闭蓝牙
	}@BluetoothManagerService.java
}@BluetoothService.java

//打开蓝牙
enable@BluetoothAdapter.java-->mManagerService.enable-->enable{
- 保存设置值，persistBluetoothSetting(Settings.Global.BLUETOOTH_ON)
- sendEnableMsg-->sendMessage(MESSAGE_ENABLE)-->handleEnable
}@BluetoothManagerService.java

handleEnable{
- mBluetooth==null{ //还没连接到蓝牙服务adapterService
	- sendMessageDelayed(MESSAGE_TIMEOUT_BIND) //发送连接超时广播
	- Intent i = new Intent(IBluetooth.class.getName()
	- mConnection = new BluetoothServiceConnection
	- doBind(i,mConnection)-->mContext.bindServiceAsUser(intent, mConnection) //连接服务 "android.bluetooth.IBluetooth"
	}
- mBluetooth!=null{//已经连接到adapterService
	- mBluetooth.enable()
	}
}@BluetoothManagerService.java

//服务连接
mConnection{
- onServiceConnected{
	- Message msg = mHandler.obtainMessage(MESSAGE_BLUETOOTH_SERVICE_CONNECTED)
	- msg.obj = service
	- mHandler.sendMessage(msg)
	}
- onServiceDisconnected
}@BluetoothServiceConnection

//关闭.persist=false 不保存关闭设置
disable(boolean persist){
- persistBluetoothSetting
- sendDisableMsg-->sendMessage(MESSAGE_DISABLE)-->handleDisable-->mBluetooth.disable()
}@BluetoothManagerService.java

//消息处理
BluetoothHandler.handleMessage{
- MESSAGE_REGISTER_ADAPTER{ //BlutoothAdapter注册回调
	- mCallbacks.register(callback)
	}
- MESSAGE_BLUETOOTH_SERVICE_CONNECTED{//连接到AdapterService
	- IBinder service = (IBinder) msg.obj
	- mBluetoothBinder = service
	- mBluetooth = IBluetooth.Stub.asInterface(Binder.allowBlocking(service)) //蓝牙服务
	- sendBluetoothServiceUpCallback
	}
}

/*******************
 bluetoothAdapter

*/

BluetoothManager-->getDefaultAdapter{
- IBinder b = ServiceManager.getService(BLUETOOTH_MANAGER_SERVICE)
- IBluetoothManager managerService = IBluetoothManager.Stub.asInterface(b) //BluetoothManagerService
- new BluetoothAdapter(managerService){
	- mService = managerService.registerAdapter(mManagerCallback) //设置回调,返回蓝牙服务adapterService接口
	- mManagerService = managerService
	}
}@BluetoothAdapter.java

//注册监听蓝牙状态更新
BluetoothAdapter-->managerService.registerAdapter(mManagerCallback)@BluetoothAdapter.java-->
sendMessage(MESSAGE_REGISTER_ADAPTER)-->mCallbacks.register(callback)@BluetoothManagerService.java

=======================

getService-->adapter.getBluetoothService(mStateChangeCallback)@BluetoothDevice.java
-->getBluetoothService-->mProxyServiceStateCallbacks.add@BluetoothAdapter.java

//蓝牙连接服务通知
mConnection.onServiceConnected-->sendMessage(MESSAGE_BLUETOOTH_SERVICE_CONNECTED)-->
sendBluetoothServiceUpCallback-->mCallbacks.getBroadcastItem(i).onBluetoothServiceUp
@BluetoothManagerService.java-->onBluetoothServiceUp-->cb.onBluetoothServiceUp@BluetoothAdapter.java
-->mStateChangeCallback.onBluetoothServiceUp@BluetoothDevice.java

//蓝牙断开服务通知
recoverBluetoothServiceFromError/handleMessage(MESSAGE_USER_SWITCHED)/bluetoothStateChangeHandler
/mConnection.onServiceDisconnected-->sendMessage(MESSAGE_BLUETOOTH_SERVICE_DISCONNECTED)-->

sendBluetoothServiceDownCallback-->mCallbacks.getBroadcastItem(i).onBluetoothServiceDown
@BluetoothManagerService.java-->onBluetoothServiceDown-->cb.onBluetoothServiceDown@BluetoothAdapter.java
-->mStateChangeCallback.onBluetoothServiceDown@BluetoothDevice.java


//蓝牙状态
mBluetooth.registerCallback(mBluetoothCallback)@BluetoothManagerService.java

updateAdapterState-->onBluetoothStateChange@AdapterService.java-->
mBluetoothCallback.onBluetoothStateChange-->sendMessage(MESSAGE_BLUETOOTH_STATE_CHANGE)
handleMessage(MESSAGE_BLUETOOTH_STATE_CHANGE){ //状态变化
- bluetoothStateChangeHandler{
	- STATE_OFF{
		- sendBluetoothServiceDownCallback
		- unbindAndFinish
		}
	- 	
	}

- recoverBluetoothServiceFromError //错误状态回复
}@BluetoothManagerService.java


frameworks/base/services/core/java/com/android/server/BluetoothService.java
frameworks/base/services/core/java/com/android/server/BluetoothManagerService.java
frameworks/base/core/java/android/bluetooth/BluetoothAdapter.java
frameworks/base/core/java/android/bluetooth/BluetoothDevice.java
packages/apps/Bluetooth/src/com/android/bluetooth/btservice/AdapterService.java
