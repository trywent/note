/***********************
  开始inputManangerService服务
*/
InputManagerService{
- this.mHandler = new InputManagerHandler
- mPtr = nativeInit-->NativeInputManager{//返回NativeInputManager
	- eventHub = new EventHub()
	- mInputManager = new InputManager(eventHub) //inputManager
	}@com_android_server_input_InputManagerService.cpp
}@InputManagerService.java

new InputManager(eventHub){
- mDispatcher = new InputDispatcher(dispatcherPolicy)
- mReader = new InputReader(eventHub, mDispatcher)
- initialize{
	- mReaderThread = new InputReaderThread(mReader)
	- mDispatcherThread = new InputDispatcherThread(mDispatcher)
	}
}@InputMananger.cpp

//开始读取分发线程
WindowManagerService-->mInputManager.start@WindowManagerService.java-->start@InputManagerService.java
-->nativeStart-->im->getInputManager()->start()@com_android_server_input_InputManagerService.cpp-->
start{
- mDispatcherThread->run("InputDispatcher")
- mReaderThread->run("InputReader")
}@InputManager.cpp

//设置input的窗口，方位
setDisplayViewports@LocalService.java-->setDisplayViewportsInternal-->setDisplayViewport-->
nativeSetDisplayViewport@InputManagerService.java-->setDisplayViewport(type,viewport){
- type == ViewportType::VIEWPORT_EXTERNAL: mLocked.externalViewport = viewport
- type == ViewportType::VIEWPORT_INTERNAL: mLocked.internalViewport = viewport
- ontroller = mLocked.pointerController.promote
- controller->setDisplayViewport
- mInputManager->getReader()->requestRefreshConfiguration
}@com_android_server_input_InputManagerService.cpp


/***********************
  接收事件
  viewRootImpl.InputChannel //读取事件
  WindowState.InputWindowHandle //用于事件分发.位置计算

*/

//注册监听input事件,channel和InputWindowHandle
registerInputChannel(InputChannel,InputWindowHandle)-->nativeRegisterInputChannel@InputManangerService.java-->
nativeRegisterInputChannel(InputChannel,InputWindowHandle){
- sp<InputChannel> inputChannel = android_view_InputChannel_getInputChannel
- sp<InputWindowHandle> inputWindowHandle = android_server_InputWindowHandle_getHandle
- im->registerInputChannel(inputChannel,inputWindowHandle)-->NativeInputManager::registerInputChannel-->
	mInputManager->getDispatcher()->registerInputChannel
}com_android_server_input_InputManagerService.cpp

 //只注册了Channel,没有加入InputWindowHandle...后续加入
createInputConsumer(String name, InputChannel inputChannel){
- InputConsumerImpl consumer = new InputConsumerImpl(mService, name, inputChannel){
	- InputChannel[] channels = InputChannel.openInputChannelPair(name);
        - mServerChannel = channels[0] //socketPair
	- mService.mInputManager.registerInputChannel(mServerChannel,null)//注册
	- mWindowHandle = new InputWindowHandle //创建InputWindowHandle
	- mWindowHandle.inputChannel = mServerChannel
	}@InputConsumerImpl.java
- addInputConsumer{
	- mInputConsumers.put(name, consumer)
	- updateInputWindowsLw(true)//更新输入窗口
	}
}@InputMonitor.javas

//加入WindowHandle(包含在WindowState中)...输入事件位置
updateInputWindowsLw-->mUpdateInputForAllWindowsConsumer.updateInputWindows-->
updateInputWindows{
- navInputConsumer = getInputConsumer(INPUT_CONSUMER_NAVIGATION)
- pipInputConsumer = getInputConsumer(INPUT_CONSUMER_PIP)//画中画
- wallpaperInputConsumer = getInputConsumer(INPUT_CONSUMER_WALLPAPER)
- mService.mRoot.forAllWindows(this/*当前类为consumer*/)-->accept(WindowState w){ //遍历窗口执行accept
	- InputWindowHandle inputWindowHandle = w.mInputWindowHandle //当前窗口InputWindowHandle
	- 当前窗口位置低于pip,PINNED_STACK_ID{//画中画事件接收
		- pipInputConsumer.mWindowHandle.touchableRegion.set(pipTouchableBounds) //设置触摸范围
		- addInputWindowHandle(pipInputConsumer.mWindowHandle)
		}
	- 当前窗口位置低于navi,addInputWindowHandle(navInputConsumer.mWindowHandle) //导航
	- 当前窗口位置低于wallpaper,addInputWindowHandle(wallpaperInputConsumer.mWindowHandle)//wallpaper
	- addInputWindowHandle(inputWindowHandle, w){ //加入到数组
		- mInputWindowHandles[mInputWindowHandleCount++] = windowHandle
		}
	}
- mService.mInputManager.setInputWindows(mInputWindowHandles, mFocusedInputWindowHandle)//设置到inputManager
}@InputMonitor.java

setInputWindows(InputWindowHandle[] windowHandles,InputWindowHandle focusedWindowHandle)@InputManagerService.java-->
nativeSetInputWindows-->im->setInputWindows-->
NativeInputManager::setInputWindows{
- mInputManager->getDispatcher()->setInputWindows
- 设置newPointerGesturesEnabled
}@com_android_server_input_InputManagerService.cpp





frameworks/base/services/core/java/com/android/server/input/InputManagerService.java
frameworks/base/services/core/java/com/android/server/wm/InputMonitor.java
frameworks/base/services/jni/com_android_server_input_InputManagerService.cpp




/***********************
  inputDispatcher
  
  inputChannel本质是socketPair
*/
InputDispatcher::registerInputChannel{
- sp<Connection> connection = new Connection(inputChannel, inputWindowHandle
- int fd = inputChannel->getFd()
- mConnectionsByFd.add(fd, connection) //保存
- mLooper->addFd(fd, handleReceiveCallback)
}@InputDispatcher.cpp

//加入窗口
setInputWindows(Vector<sp<InputWindowHandle> >& inputWindowHandles){
- mWindowHandles = inputWindowHandles
- windowHandle->getInfo()->hasFocus,newFocusedWindowHandle = windowHandle //查找焦点窗口
- mFocusedWindowHandle = newFocusedWindowHandle
}@InputDispatcher.cpp

//dispatcher处理事件：
threadLoop-->mDispatcher->dispatchOnce-->dispatchOnceInnerLocked{
- resetKeyRepeatLocked
- mPendingEvent{//获取一个事件
	- mInboundQueue.dequeueAtHead
	- pokeUserActivityLocked //更新用户操作时间
	- resetANRTimeoutsLocked
	}
- 设置DropReason//是否要丢弃事件
 //mPendingEvent->type
- TYPE_CONFIGURATION_CHANGED:{}
- TYPE_DEVICE_RESET:{}
- TYPE_KEY，{
	- 是app切换时间{
		- 若是切换app事件(back，home)，重设app切换时间
		- 若是其它事件，则丢弃该事件
		}
	- 事件若陈旧，则丢弃当前事件
	- 若有下个非阻塞事件，则丢弃当前事件
	- 分发事件，dispatchKeyLocked
	}
- TYPE_MOTION:{
	- dispatchMotionLocked
	}
- 处理完成，事件是否被丢弃dropInboundEventLocked //输出丢弃原因

}


//按键事件,TYPE_KEY
dispatchKeyLocked{
- 事件没有分配，dispatchInProgress==false{
	- 是否是重复事件
	}
- 
- 若需要丢弃事件，则设置注入事件的丢弃原因setInjectionResultLocked
- 查找事件目标窗口，findFocusedWindowTargetsLocked{
	- 找到可接收事件的目标窗口，加入到目标中addWindowTargetLocked(新加入一个目标到inputTargets)
	}
- 设置注入事件的结果返回目标，setInjectionResultLocked //设置出错状态
- 加入检测事件的接收目标(不一定是窗口)
- dispatchEventLocked 1-> //分发事件到connection
- startDispatchCycleLocked 2-> //从connection发送到client
}

->1 dispatchEventLocked //根据传入的目标，找到对应的connection
-->prepareDispatchCycleLocked-->enqueueDispatchEntriesLocked-->InputDispatcher::
enqueueDispatchEntryLocked{
- 创建事件对象，new DispatchEntry
- 判断按键和触摸事件是否是连续的，不连续的则丢弃
- 记录事件，后面判断是否该事件是否被处理。incrementPendingForegroundDispatchesLocked
- 加入队列，connection->outboundQueue.enqueueAtTail
}

->2 startDispatchCycleLocked{//发送事件到client
-- connection状态正常，且outboundQueue不为空{
- 获取队列头事件，connection->outboundQueue.head
- 判断事件类型{
	- 按键，connection->inputPublisher.publishKeyEvent
	- 触摸，connection->inputPublisher.publishMotionEvent-->publishMotionEventP{
		- 封装消息，InputMessage
		- 发送消息，mChannel->sendMessage-->send
		}@InputTransport.cpp
	}
- 检查分发结果
- 删除已处理的事件，connection->outboundQueue.dequeue
- 加入到等待结果队列，connection->waitQueue.enqueueAtTail(dispatchEntry);
}
}


//触摸事件,TYPE_MOTION
InputDispatcher::dispatchMotionLocked(MotionEntry* entry){
- Vector<InputTarget> inputTargets
- isPointerEvent坐标事件,findTouchedWindowTargetsLocked(inputTargets,&conflictingPointerActions){//查找接收目标
- !isPointerEvent,findFocusedWindowTargetsLocked(inputTargets)
- setInjectionResultLocked
- addMonitoringTargetsLocked(inputTargets)
- dispatchEventLocked(entry, inputTargets)
}


findTouchedWindowTargetsLocked(inputTargets,&conflictingPointerActions){//查找接收目标
- action = entry->action
- maskedAction = action & AMOTION_EVENT_ACTION_MASK
- mTempTouchState = mTouchStatesByDisplay.indexOfKey(displayId) //获取当前触摸事件,对应屏幕的touchState
- newGesture{ //鼠标,滚轮,触摸板?
	- mTempTouchState.reset
	}
- newGesture||(AMOTION_EVENT_ACTION_POINTER_DOWN&& isSplit){
	- 遍历mWindowHandles{
		- sp<InputWindowHandle> windowHandle = mWindowHandles.itemAt(i)
		- InputWindowInfo* windowInfo = windowHandle->getInfo()
		- windowInfo->visible&&
		}
	}
- !newGesture,pointer事件{
	- 
	}
- mTouchStatesByDisplay.add(displayId, mTempTouchState) //保存touchState
}

加入命令：
postCommandLocked-->(加入到命令队列)mCommandQueue.enqueueAtTail@InputDispatcher.cpp
执行命令：
dispatchOnce-->runCommandsLockedInterruptible-->(this->*command)(commandEntry)@InputDispatcher.cpp


frameworks/base/core/java/android/view/InputChannel.java
frameworks/base/services/input/InputDispatcher.cpp
fameworks/base/core/jni/android_view_InputChannel.cpp
frameworks/base/libs/androidfw/InputTransport.cpp

/***********************
  应用消耗事件

*/

//设置inputchannel：用来读取事件的socket
setView(创建InputChannel对象，后面会被替换)-->sWindowSession.add@ViewRootImpl.java-->add@Session.java
-->addWindow{
- 创建通道，InputChannel.openInputChannelPair
- (将窗口的接收客户端重设为正确的inputChannel)inputChannels[1].transferTo(outInputChannel)
- 注册窗口的事件接收通道，mInputManager.registerInputChannel(inputChannels[0])-->
	nativeRegisterInputChannel
}@WindowManagerService.java

//android8.1
addWindow-->win.openInputChannel(outInputChannel)@WindowManagerService.java-->
registerInputChannel@WindowState.java

//主线程中的looper接收inputEvent数据：
NativeInputEventReceiver::handleEvent-->consumeEvents@android_view_InputEventReceiver.cpp



1. //接收事件：
setView-->new WindowInputEventReceiver(mInputChannel,Looper.myLooper())@ViewRootImple.java
new InputEventReceiver-->nativeInit@InputEventReceiver.java-->nativeInit-->receiver->initialize
NativeInputEventReceiver::initialize-->mMessageQueue->getLooper()->addFd(传入socketpair中消耗端)
@android_view_InputEventReceiver.java

2. //处理获取的事件：
NativeInputEventReceiver::handleEvent-->consumeEvents-->
env->CallVoidMethod(mReceiverObjGlobal,gInputEventReceiverClassInfo.dispatchInputEvent, seq, inputEventObj)
@android_view_InputEventReceiver.cpp-->dispatchInputEvent@InputEventReceiver.java-->
WindowInputEventReceiver.onInputEvent-->(将事件加入队列)enqueueInputEvent-->enqueueInputEvent
(立即处理doProcessInputEvents)或延迟处理scheduleProcessInputEvents-->(发送处理广播)
mHandler.sendMessage(MSG_PROCESS_INPUT_EVENTS)-->ViewRootHandler.handleMessage-->doProcessInputEvents
deliverInputEvent(处理按键，触摸...等事件)-->(触摸事件)deliverPointerEvent-->mView.dispatchPointerEvent
@ViewRootImpl.java-->dispatchTouchEvent@View.java

//读取事件超时，调用回调处理未处理的事件：
NativeInputEventReceiver::handleEvent-->consumeEvents-->
env->CallVoidMethod(mReceiverObjGlobal,gInputEventReceiverClassInfo.dispatchBatchedInputEventPending
@android_view_InputEventReceiver.cpp-->dispatchBatchedInputEventPending-->onBatchedInputEventPending
@InputEventReceiver.java-->onBatchedInputEventPending-->(注册与帧同步的回调)scheduleConsumeBatchedInput
@ViewRootImpl.java

//窗口主动获取事件(主要是在动画，新一帧前消耗掉所有的事件)：
doCallbacks-->c.run@Choreographer.java-->ConsumeBatchedInputRunnable.run-->doConsumeBatchedInput
-->mInputEventReceiver.consumeBatchedInputEvents@ViewRootImpl.java-->
nativeConsumeBatchedInputEvents@InputEventReceiver.java-->nativeConsumeBatchedInputEvents-->
receiver->consumeEvents-->NativeInputEventReceiver::consumeEvents-->mInputConsumer.consume
@android_view_InputEventReceiver.cpp-->InputConsumer::consume(按键事件直接返回处理，触摸事件
要处理一次触摸的所有数据)-->(读取事件)mChannel->receiveMessage-->::recv@InputTransport.cpp

3. //事件被处理完成：
doProcessInputEvents-->deliverInputEvent-->(处理按键或触摸，触摸球等事件)deliverKeyEvent-->
finishInputEvent-->q.mReceiver.finishInputEvent@ViewRootImpl.java-->finishInputEvent@
InputEventReceiver.java->nativeFinishInputEvent-->receiver->finishInputEvent-->finishInputEvent-->
mInputConsumer.sendFinishedSignal@android_view_InputEventReceiver.cpp-->sendFinishedSignal
-->sendUnchainedFinishedSignal@InputTransport.cpp


//dispatcher获取事件处理结果：
threadLoop-->mDispatcher->dispatchOnce-->mLooper->pollOnce@InputDispatcher.cpp-->pollOnce
pollInner-->response.request.callback->handleEvent-->mCallback@Looper.cpp-->(dispatcher的回调)
handleReceiveCallback@InputDispatcher.cpp

//设置焦点应用：
setFocusedActivityLocked@ActivityManagerService.java-->setFocusedApp@WindowManagerService.java
-->setFocusedAppLw@InputMonitor.java-->setFocusedApplication@InputManagerService.java
-->setFocusedApplication@com_android_server_input_InputManagerService.cpp-->
setFocusedApplication@InputDispatcher.cpp


/***********************
  其它接口消耗事件

*/
createInputConsumer-->mInputMonitor.createInputConsumer(name)@WindowManagerService.java

frameworks/base/core/java/android/view/InputEventReceiver.java
frameworks/base/core/jni/android_view_InputEventReceiver.cpp

============================
inputDevice:
InputDevice::addMapper-->mMappers.add@InputReader.cpp


____________________________
WindowManager中在所有其他窗口之上加入FakeWindow用来处理事件
beginLayoutLw-->WindowManagerFuncs.addFakeWindow(InputEventReceiver.Factory)@PhoneWindowManager.java-->addFakeWindow-->mInputMonitor.updateInputWindowsLw@WindowManagerService.java-->updateInputWindowsLw
-->addInputWindowHandleLw--mService.mInputManager.setInputWindows@InputMOnitor.java-->
setInputWindows@InputManagerService.java-->nativeSetInputWindows-->nativeSetInputWindows
-->im->setInputWindows-->NativeInputManager::setInputWindows-->mInputManager->getDispatcher()->setInputWindows
@com_android_server_input_InputManagerService.cpp-->InputDispatcher::setInputWindows@InputDispatcher.cpp

window中接收事件：
InputEventReceiver--@InputEventReceiver-->nativeInit-->NativeInputEventReceiver
--receiver->initialize-->NativeInputEventReceiver::initialize-->mMessageQueue->getLooper()
->addFd@android_view_inputEventReceiver.cpp

处理事件：
NativeInputEventReceiver::handleEvent-->NativeInputEventReceiver::consumeEvents-->
env->CallVoidMethod-->dispatchInputEvent@android_view_InputEventReceiver.cpp-->
dispatchInputEvent-->onInputEvent@InputEventReceiver.java


----------------------------
superDispatchKeyEvent-->mDecor.superDispatchKeyEvent@PhoneWindow.java

onKeyUp/onKeyDown


frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindow.java
============================
//注入事件
injectKeyEvent@input.java-->injectInputEvent@InputManager.java-->IInputManager.injectInputEvent()
-->nativeInjectInputEvent@com_android_server_input_InputManagerService.cpp-->
injectInputEvent{
- KEY_EVENT{
	- 验证， validateKeyEvent
	- 系统先处理，mPolicy->interceptKeyBeforeQueueing
	- 创建KeyEntry
	}
- MOTION_EVENT{
	- 验证， validateKeyEvent
	- 系统先处理，mPolicy->interceptKeyBeforeQueueing
	- 创建MotionEntry
	}
- 加入队列,enqueueInboundEventLocked
- 等待结果，injectionState->injectionResult。(dispatchKeyLocked-->setInjectionResultLocked中设置结果)
}@InputDispatcher.cpp

消耗事件：
threadLoop-->mDispatcher->dispatchOnce-->dispatchOnceInnerLocked（从mInboundQueue中取出event，
根据不同的事件调用对应的处理函数）-->dispatchKeyLocked(从这里开始处理按键事件，找到处理该事件的目标)
-->dispatchEventLocked-->prepareDispatchCycleLocked-->enqueueDispatchEntriesLocked-->
InputDispatcher::enqueueDispatchEntryLocked-->connection->inputState.trackKey && connection
->outboundQueue.enqueueAtTail@InputDispatcher.cpp

InputManagerService实现IInputManager.stub。

injectInputEvent@InputDispatcher.cpp将事件加入队列后，调用分发函数。在一个循环中等待分发结果，并返回。
其中会检查执行inject进程的权限，不被POLICY_FLAG_TRUSTED的事件不会执行interceptKeyBeforeQueueing，
也不会执行interceptKeyBeforeDispatching（所以HOME操作不会执行）。

mInboundQueue是event队列

interceptKeyBeforeQueueing一些硬件按键power，volume
interceptKeyBeforeDispatching处理HOME，SEARCH，MENU（没有BACK）

--------------------
consumed by policy:

injectInputEvent-->
dispatchOnce-->dispatchOnceInnerLocked{
- 根据不同事件进行分发
- 按键事件TYPE_KEY{
	- 若有DROP_REASON_BLOCKED，设置丢弃原因为blocked
	- dispatchKeyLocked
	}
- 若回复是丢弃事件，dropInboundEventLocked
}
============================
//显示触摸：Settings.System.SHOW_TOUCHES
updateShowTouchesFromSettings-->nativeSetShowTouches@InputManagerService.java
nativeSetShowTouches-->im->setShowTouches(enabled)-->NativeInputManager::setShowTouches-->
mInputManager->getReader()->requestRefreshConfiguration@com_android_server_input_InputManagerService.cpp
-->requestRefreshConfiguration(更新值mConfigurationChangesToRefresh)@InputReader.cpp

更新配置：
InputReader::loopOnce-->refreshConfigurationLocked-->device->configure-->
TouchInputMapper::configure-->configureSurface


PointerController{
 struct Locked {
	pointerSprite //用于显示的图层
 }	
}


frameworks/base/services/java/com/android/server/input/InputManagerService.java
frameworks/base/services/jni/com_android_server_input_InputManagerService.cpp
frameworks/base/services/input/InputReader.cpp
frameworks/base/services/input/SpriteController.h
___________________________
//触摸位置：Settings.System.POINTER_LOCATION

Settings.System.getInt(Settings.System.POINTER_LOCATION)，发生改变-->
mHandler.sendEmptyMessage(MSG_ENABLE_POINTER_LOCATION)-->handleMessage-->
enablePointerLocation{
- 创建视图和布局，mPointerLocationView。
- 加入窗口，wm.addView(mPointerLocationView)
- 创建事件通道，mPointerLocationInputChannel
- 
}



frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java


