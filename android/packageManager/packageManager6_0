/*

*/
//LI必须获得锁lock install。LP必须获得锁lock package
package服务:
startBootstrapServices-->PackageManagerService.main@SystemServer.java-->
main/*加入系统服务ServiceManager.addService("package", m)*/-->
PackageManagerService(installer){
- mSettings = new Settings(mPackages)
- mPackageDexOptimizer = new PackageDexOptimizer(this)
- mDexManager = new DexManager(this, mPackageDexOptimizer)
- mHandlerThread = new ServiceThread
- mAppDataDir,mAppInstallDir...//初始化目录
- permConfig,libConfig //读取系统权限,配置信息
- mFirstBoot = !mSettings.readLPw(sUserManager.getUsers(false)) //读取setting
- frameworkFiles = frameworkDir.list(){//遍历/system/framework/下jar
	- libPath = new File(frameworkDir, frameworkFiles[i])
	- mInstaller.dexopt(libPath)
	}
- scanDirTracedLI("/vendor/overlay")
- scanDirTracedLI("/system/framwork")
- scanDirTracedLI("priv-app")
- scanDirTracedLI("app")
...
- updatePermissionsLPw(UPDATE_PERMISSIONS_ALL) //扫描完成分配所有权限
}@PackageManagerService.java

scanDirTracedLI-->scanDirLI(dir/*遍历dir下文件*/){
- parallelPackageParser = new ParallelPackageParser
- 遍历目录下所有文件,files = dir.listFiles()-->parallelPackageParser.submit(file)-->
	submit(scanfile){
	- pp = new PackageParser()
	- pr.pkg = parsePackage(pp, scanFile)//解析apk
	- mQueue.put(pr) //加入队列中
	}@ParallelPackageParser.java
- 处理解析后的apk{
	- parseResult = parallelPackageParser.take()
	- scanPackageLI(parseResult.pkg, parseResult.scanFile)
	}
}@PackageManagerService.java



scanPackageLI(PackageParser.Package pkg, File scanFile,
            int policyFlags, int scanFlags, long currentTime, @Nullable UserHandle user)
-->scanPackageInternalLI{
- PackageSetting ps = mSettings.getPackageLPr(pkg.packageName)
- updatedPkg = mSettings.getDisabledSystemPkgLPr //该apk是否覆盖已存在apk
- apk升级,isUpdatedSystemPkg{
	- mSettings.enableSystemPackageLPw(ps.name)
	}
- pkg.setApplicationVolumeUuid //设置package信息
- scanPackageLI(package)-->scanPackageDirtyLI{
	- 获取pkgSetting = mSettings.getPackageLPr{
		- 若不存在,pkgSetting = Settings.createNewSetting
		- 若存在,Settings.updatePackageSetting
		}
	- pkg.applicationInfo.processName = fixProcessName //进程名
	- mSettings.writeUserRestrictionsLPw(pkgSetting, oldPkgSetting) //写入保存应用设置
	- 非检查apk,commitPackageSettings //保存
	}
}@PackageManagerService.java


//外部存储扫描：
onDaemonConnected-->mPms.scanAvailableAsecs()@MountService.java-->scanAvailableAsecs-->
updateExternalMediaStatusInner@PackageManagerService.java-->getSecureContainerList@PackageHelper.java
-->getSecureContainerList@MountService.java-->executeForList("asec", "list")@NativeDaemonConnector.java
--通过socket-->AsecCmd::runCommand-->AsecCmd::listAsecsInDirectory("/mnt/secure/asec")@CommandListener.cpp
-->返回.asec文件列表

挂载/mnt/secure/asec/xxx.asec文件到/mnt/asec/xxx：
updateExternalMediaStatusInner-->loadMediaPackages-->AsecInstallArgs.doPreInstall-->
PackageHelper.mountSdDir@PackageManagerService.java-->getMountService().mountSecureContainer
@PackageHelper.java-->Connector.execute@MountService.java-->execute.NativeDaemonConnector.java-->
(通过socket)-->mountAsec(创建/mnt/asec/xxx挂载点)@VolumeManager.cpp

安装codePath，scanPackageLI(File)
/*
 dexopt

*/
PackageManagerService{
- for (SharedUserSetting setting : mSettings.getAllSharedUsersLPw()) {
	- adjustCpuAbisForSharedUserLPw(setting.packages, null /* scanned package */,false /* force dexopt */, false /* defer dexopt */)
	}
}

performDexOpt(PackageParser.Package pkg, String[] instructionSets,boolean forceDex, boolean defer, boolean inclDependencies)-->
performDexOptLI(PackageParser.Package pkg, String[] targetInstructionSets, boolean forceDex, boolean defer, ArraySet<String> done)
@PackageDexOptimizer.java

performBootDexOpt{
- ms = PackageHelper.getMountService不为空{
	- doTrim  = isUpgrade = isUpgrade() //是否执行优化
	- doTrim //若超过默认时间也执行优化,3day
	- ActivityManagerNative.getDefault().showBootMessage//非第一次启动,显示优化信息
	- ms.runMaintenance() //执行优化
	}
- pkgs = mPackageDexOptimizer.clearDeferredDexOptPackages

}@PackageManagerService.java


将apk加入要dex的容器：
scanPackageLI(PackageParser.Package, parseFlags, scanMode, currentTime)-->scanPackageDirtyLI
-->performDexOptLI(若!forceDex && defer则将apk加入容器)

frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java
frameworks/base/services/core/java/com/android/server/pm/PackageDexOptimizer.java
frameworks/base/services/core/java/com/android/server/pm/ParallelPackageParser.java
dalvik/dexopt/OptMain.cpp
dalvik/vm/analysis/DexPrepare.cpp
dalvik/vm/Init.cpp
/* 权限

*/
updateSettingsLI-->updateSettingsInternalLI-->updatePermissionsLPw-->grantPermissionsLPw

installPackageFromSystemLIF-->updatePermissionsLPw

onNewUserCreated-->updatePermissionsLPw

//intall permission
grantPermissionsLPw(package){
- PackageSetting ps = (PackageSetting) pkg.mExtras
- permissionsState = ps.getPermissionsState()
- 遍历pkg.requestedPermissions{
	- GRANT_INSTALL{
		- permissionsState.grantInstallPermission
		}
	- GRANT_RUNTIME{
		- permissionsState.grantRuntimePermission
		- permissionsState.updatePermissionFlags
		}
	}
}@PackageManagerService.java




/*
 读取偏好设置：
*/
startActivityMayWait-->resolveActivity@ActivityStack.java-->resolveIntent-->
chooseBestActivity(查找合适的app，没有找到则返回选择对话框)-->findPreferredActivity
(查找以前选择过的app)@PackageManagerService.java

保存偏好应用设置:
onButtonClick-->startSelected-->onIntentSelected-->getPackageManager().
addPreferredActivity@ResolverActivity.java-->addPreferredActivity(将偏好保存)
->scheduleWriteSettingsLocked-->mHandler.sendEmptyMessageDelayed(WRITE_SETTINGS..)
-->PackageHandler.sendEmptyMessageDelayed-->handleMessage-->doHandleMessage-->
mSettings.writeLPr@PackageManagerService.java-->writeLPr-->writePreferredActivitiesLPr
@Setting.java

//替换偏好设置
replacePreferredActivity@PackageManagerService.java

ApplicationPackageManager

相关文件：
data/system/packages.xml
data/system/packages-backup.xml
data/system/packages.list
===================
解析package中activity,service,provider,BroadcastReceiver信息：

//收集保存activity信息：
ActivityIntentResolver.addActivity-->ActivityIntentResolver.addFilter@PackageManagerService.java-->
addFilter(保存activity中的过滤器信息)-->(分类过滤信息)register_intent_filter--register_mime_types
@IntentResolver.java

//查询activity
resolveIntent-->queryIntentActivities(Intent intent, int flags){
- ComponentName comp = intent.getComponent()
- comp不为空,getActivityInfo(comp, flags, userId){
	- PackageParser.Activity a = mActivities.mActivities.get(component)
	- PackageParser.generateActivityInfo(a)
	}
- packageName为空{
	- querySkipCurrentProfileIntents
	- mActivities.queryIntent(intent)
	}
- 通过packageName获取,mPackages.get(pkgName)
}@PackageManagerService.java

//service
resolveService-->queryIntentServices(Intent intent, int flags)@PackageManagerService.java
//broadcast
queryBroadcastReceivers(Intent intent, int flags)
//provider
queryContentProviders(String processName,int uid, int flags)


//广播会自动设置FLAG_EXCLUDE_STOPPED_PACKAGES，过滤掉stop状态的app。
解析intent：
resolveIntent(传入当前用户ID，一般为0)-->queryIntentActivities-->ActivityIntentResolver.queryIntent-->
super.queryIntent@PackageMangerService.java-->queryIntent-->(保存满足条件的目标)
buildResolveList@IntentResolver.java



===================
//保存package信息
Settings("/data"){
- mRuntimePermissionsPersistence = new RuntimePermissionPersistence
- mSystemDir = new File(dataDir, "system")
- mSettingsFilename = new File(mSystemDir, "packages.xml")
- mBackupSettingsFilename = new File(mSystemDir, "packages-backup.xml")
- mPackageListFilename = new File(mSystemDir, "packages.list")
}

//保存配置
writeLPr{

}
//读取配置
readLPw{
- FileInputStream str = new FileInputStream(mBackupSettingsFilename)//先打开"packages-backup.xml"
- backup文件不存在,str = new FileInputStream(mSettingsFilename) //"packages.xml"
- readPackageLPw //"package"
- readPermissionsLPw //"permissions"
}


readPackageLPw{
- 
- readInstallPermissionsLPr{ //分配权限
	
	}
}

scanPackageDirtyLI-->commitPackageSettings-->addPackageSettingLPw

//创建应用id：
newUserIdLPw--Process.FIRST_APPLICATION_UID + i(查找mUserIds中没有用的的id值i，再加上10000)@Setting.java

readInstallPermissionsLPr

frameworks/base/services/java/com/android/server/pm/Settings.java
===================
//protected broadcast
mProtectedBroadcasts

===================
//install
installPackageFromSystemLIF

installPackageTracedLI-->installPackageLI-->installNewPackageLIF{
- scanPackageTracedLI
- updateSettingsLI
}


/*
开机提示：Android is upgrading...
*/
ServerThread.run()-->pm.performBootDexOpt(处理mDeferredDexOpt中的apk)@SystemServer.java
-->performBootDexOpt-->(不是第一次启动)ActivityManagerNative.getDefault().showBootMessage
@PackageManagerService.java-->showBootMessage-->mWindowManager.showBootMessage
@ActivityManagerService.java-->showBootMessage(判断是否要显示消息)-->mPolicy.showBootMessage
@WindowManagerService.java-->showBootMessage{
- 若没有创建则创建new ProgressDialog().setMessage
- 已经创建则设置消息字符，setMessage
}@PhoneWindowManager.java


结束动画打开显示：
showBootMessage-->performEnableScreen(判断是否是显示启动消息，是否系统还没有启动)-->
mPolicy.enableScreenAfterBoot@ActivityManagerService.java



-----------------
判断是否显示消息：
mAllowBootMessages=WindowManagerService.mAllowBootMessages=WMThread.mAllowBootMessages
=WindowManagerService.main(!firstBoot)=PackageManagerService.isFirstBoot//不是第一次启动允许显示消息框

WindowManagerService.main(!firstBoot)@System_server.java-->main-->new WMThread(传入allowBootMsgs)-->
WMThread.run(设置值mAllowBootMessages)-->WindowManagerService(传入值mAllowBootMessages)-->
mAllowBootMessages = showBootMsgs

hideBootMessagesLocked-->mShowingBootMessages = fasle@WindowManagerService.java

显示“正在启动应用”：
pm.performBootDexOpt--ActivityManagerNative.getDefault().showBootMessage@System_server.java

-------------------
关闭启动消息：
enableScreenAfterBoot-->hideBootMessagesLocked@WindowManagerService.java
===================

错误原因是apk命名问题(多个点):
rewriteDex(DexOpt没有成功)@DexPrepare.cpp


dalvik/vm/analysis/DexPrepare.cpp



