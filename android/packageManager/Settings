/**************************************
 保存应用信息
*/

PackageManagerService{
- mSettings = new Settings(File dataDir, PermissionSettings permission, Object lock){
	- mPermissions = permission
	- mSystemDir = new File(dataDir, "system")
	- mSettingsFilename = new File(mSystemDir, "packages.xml");
        - mBackupSettingsFilename = new File(mSystemDir, "packages-backup.xml");
        - mPackageListFilename = new File(mSystemDir, "packages.list");
	}
  //读取应用信息
- mFirstBoot = !mSettings.readLPw(sUserManager.getUsers(false))
}@PakcageManagerService.java


//创建应用信息packageSetting
createNewSetting(String pkgName, PackageSetting originalPkg,PackageSetting disabledPkg, 
	String realPkgName, SharedUserSetting sharedUser,File codePath,...){
- if (originalPkg != null) {
 - pkgSetting = new PackageSetting(originalPkg, pkgName /*realPkgName*/)
 - pkgSetting.codePath = codePath
 }else{
 - PackageSetting pkgSetting
 - pkgSetting = new PackageSetting(pkgName, realPkgName, codePath, resourcePath...)
 - if (sharedUser != null) {
  	- pkgSetting.appId = sharedUser.userId
   else if (disabledPkg != null) {
 	- pkgSetting.appId = disabledPkg.appId
   }
  }
}@Settings.java

//分配应用的appId,uesrId。。。使用sharedUser的不分配uid(使用shareduser一样的id)
registerAppIdLPw(PackageSetting p) throws PackageManagerException {
- if (p.appId == 0) {
	- p.appId = acquireAndRegisterNewAppIdLPw(p){	//获取应用id
		- for (int i = mFirstAvailableUid; i < mAppIds.size(); i++) {
			- if (mAppIds.get(i) == null){
				- mAppIds.set(i, obj)
				- return Process.FIRST_APPLICATION_UID + i
				}			
			}
		- mAppIds.add(obj)
		- return Process.FIRST_APPLICATION_UID + size
		}
  }else{
	- createdNew = registerExistingAppIdLPw(p.appId, p, p.name)
  }
}@Settings.java

/* 
 加入应用信息
*/
scanDirLI-->addForInitLI-->commitReconciledScanResultLocked-->commitPackageSettings
@PackageManagerService.java-->insertPackageSettingLPw(PackageSetting p, PackageParser.Package pkg)-->
addPackageSettingLPw(PackageSetting p, SharedUserSetting sharedUser) {
- mPackages.put(p.name, p)
}@Settings.java

//加入package,一般是sharedUid
insertPackageSettingLPw-->
addPackageSettingLPw(PackageSetting p, SharedUserSetting sharedUser) {
- mPackages.put(p.name, p)
- 
}

/*
 加入package。sharedUid不会执行这个步骤？
*/
enableSystemPackageLPw-->
addPackageLPw(name.intern(), realName, new File(codePathStr),new File(resourcePathStr), 
	legacyNativeLibraryPathStr, primaryCpuAbiString ....){
- p = new PackageSetting(name, realName, codePath, resourcePath,legacyNativeLibraryPathString, primaryCpuAbiString,....)
- addUserIdLPw(uid, p, name)
- registerExistingAppIdLPw(uid, p, name){		//注册app,判断是否有冲突userId
	- if (appId >= Process.FIRST_APPLICATION_UID) {	//普通应用id(10000+id) mAppIds
		- index = appId - Process.FIRST_APPLICATION_UID
		- mAppIds.set(index, obj)
	  }else{					//系统id
		- if (mOtherAppIds.get(appId) != null) return false
		- mOtherAppIds.put(appId, obj)
	  }
	- return true
	}
- mPackages.put(name, p)
}@Settings.java


/*********
 加载配置。所有用户

*/
readLPw(List<UserInfo> users) {
- FileInputStream str = null
  //首先读取备份配置"/data/system/packages-backup.xml"
- if (mBackupSettingsFilename.exists()) {
	- str = new FileInputStream(mBackupSettingsFilename)
	- if (mSettingsFilename.exists()) mSettingsFilename.delete()
	}
  //没有备份
- if (str == null) {
	- if (!mSettingsFilename.exists()) {
		- return //配置文件不存在，返回		
		}
	- str = new FileInputStream(mSettingsFilename)
	}
  //读取并解析xml文件
- XmlPullParser parser = Xml.newPullParser()
- parser.setInput(str, StandardCharsets.UTF_8.name())
- while ((type = parser.next()) != XmlPullParser.END_DOCUMENT){
	- "package" readPackageLPw(parser)
	- "permissions" readPermissionsLPw(mPermissions, parser)
	- "permission-trees" readPermissionsLPw(mPermissionTrees, parser)
	- "shared-user" readSharedUserLPw(parser)
	- "updated-package"readDisabledSysPackageLPw(parser){
		- PackageSetting ps = new PackageSetting(name, realName, new File(codePathStr)...)
		- 
		- mDisabledSysPackages.put(name, ps)
		}
	- "renamed-package"{
		- String nname = parser.getAttributeValue(null, "new")
		- String oname = parser.getAttributeValue(null, "old")
		- mRenamedPackages.put(nname, oname)
		}
	}
  //处理没有加入的package 如：shareduid
- mPendingPackages.size()
- for (int i = 0; i < N; i++) {
	- PackageSetting p = mPendingPackages.get(i)
	- Object idObj = getSettingLPr(sharedUserId)
	- if (idObj instanceof SharedUserSetting)-->addPackageSettingLPw(p, sharedUser){
		- 	
		}
	}
}@Settings.java


//读取已存在xml配置
readPackageLPw(XmlPullParser parser){
- PackageSetting packageSetting = null
  //信息
- name = parser.getAttributeValue(null, ATTR_NAME)
- idStr = parser.getAttributeValue(null, "userId")
- sharedIdStr = parser.getAttributeValue(null, "sharedUserId")
- primaryCpuAbiString = parser.getAttributeValue(null, "primaryCpuAbi")
- if (userId > 0) {
	- packageSetting = addPackageLPw(name.intern(), realName, new File(codePathStr),
 	  new File(resourcePathStr), legacyNativeLibraryPathStr, primaryCpuAbiString ....)
  }else if (sharedIdStr != null){
	- packageSetting = new PackageSetting(name.intern(), realName, new File....)
	- mPendingPackages.add(packageSetting)
  }
}@Settings.java




//运行时权限
RuntimePermissionPersistence.readStateForUserSyncLPr(int userId) {
  //runtime permission /data/system/user0/runtime-permissions.xml
- File permissionsFile = getUserRuntimePermissionsFile(userId)
- 
}@Settings.java


/*********
  保存应用信息
 
*/
writeLPr() {
- if (mSettingsFilename.exists()) {
	- if (!mBackupSettingsFilename.exists()) {//将当前信息保存到backup
		- mSettingsFilename.renameTo(mBackupSettingsFilename)
	  }else{//清除当前信息
		- mSettingsFilename.delete() 
		}
	}
  //打开packages.xml文件
- FileOutputStream fstr = new FileOutputStream(mSettingsFilename)
- BufferedOutputStream str = new BufferedOutputStream(fstr)
- mPermissions.writePermissionTrees(serializer)
  //写入package
- for (final PackageSetting pkg : mPackages.values()) {
	- writePackageLPr(serializer, pkg)
        }
  //写入不可用的应用
- for (final PackageSetting pkg : mDisabledSysPackages.values()) {
	- writeDisabledSysPackageLPr(serializer, pkg)
        }
  //写入sharedUser
- 
}@Settings.java

//保存package信息
writePackageLPr(XmlSerializer serializer, final PackageSetting pkg){
- serializer.attribute(null, ATTR_NAME, pkg.name)
  //shareduser不保存userId,不然会冲突
- if (pkg.sharedUser == null) {
	- serializer.attribute(null, "userId", Integer.toString(pkg.appId))	//userId
  }else{
	- serializer.attribute(null, "sharedUserId", Integer.toString(pkg.appId))
 	}
- writeChildPackagesLPw(serializer, pkg.childPackageNames) 
- writePermissionsLPr(serializer, pkg.getPermissionsState().getInstallPermissionStates())
}@Settings.java


isEnabledAndMatchLPr(ComponentInfo componentInfo, int flags, int userId){
- PackageSetting ps = mPackages.get(componentInfo.packageName)
- PackageUserState userState = ps.readUserState(userId)
- userState.isMatch(componentInfo, flags)
}@Settings.java





frameworks/base/services/core/java/com/android/server/pm/Settings.java
frameworks/base/services/core/java/com/android/server/pm/PackageSetting.java
frameworks/base/services/core/java/com/android/server/pm/PackageSettingBase.java
frameworks/base/core/java/android/content/pm/PackageUserState.java
