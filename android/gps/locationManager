/***********************
 locationManagerService

*/
LocationManagerService(Context context) {

}
systemReady--new Thread(null,this,"").run()@SystemServer.java-->
run-->initialize-->loadProviders-->loadProvidersLocked-->_loadProvidersLocked-->
updateProvidersLocked-->updateProviderListenersLocked@LocationManagerService.java-->
enableLocationTracking


setting中设置gps:
SettingsObserver.update(监听到设置发生改变)-->updateProvidersLocked-->updateProviderListenersLocked
@LocationManagerService.java-->enableLocationTracking(发送消息)-->ProviderHandler.handleMessage-->
handleEnableLocationTracking-->startNavigating@GpsLocationProvider.java-->native_start-->
android_location_GpsLocationProvider_start@com_android_server_location_GpsLocationProvider.cpp
-->start-->mstar_gps_start-->gps_state_start@MstarGps.c

另个打开gps流程：
requestLocationUpdatesLocked-->requestSingleShotFix-->ProviderHandler.handleMessage-->handleRequestSingleShot-->startNavigating@GpsLocationProvider.java-->native_start-->
android_location_GpsLocationProvider_start@com_android_server_location_GpsLocationProvider.cpp


//发送命令。清除aid数据
sendExtraCommand(String command, Bundle extras) {
- "delete_aiding_data".equals(command): deleteAidingData(extras){
	- flags = GPS_DELETE_ALL
	- native_delete_aiding_data(flags)
	}
- "force_time_injection".equals(command): requestUtcTime()
- "force_xtra_injection".equals(command): xtraDownloadRequest()
}@GnssLocationProvider.java


/********
 provider

 gnss
 network

*/

//加入不同类型的provider：
_loadProvidersLocked-->addProvider(加入gpsProvider)-->addProvider(加入passiveProvider)--
mEnabledProviders.add(加入passiveProvider)--addProvider(加入mNetworkLocationProvider)@
LocationManagerService.java

addProvider{//加入到容器
        mProviders
        mProvidersByName
}


//关闭打开provider：
updateProvidersLocked-->(获取provider的状态)isAllowedBySettingsLocked--updateProviderListenersLocked{
- 获取该provider记录mRecordsByProvider.get
- 获取改record中的接收者，并通知他们provider的状态更新。
- 移除已死亡的接收者receiver
- 使能或关闭provider。 p.enable(),p.enableLocationTracking
}@LocationManagerService.java-->(打开gps为例)enableLocationTracking-->sendMessage(ENABLE_TRACKING)
-->ProviderHandler.handleMessage-->handleEnableLocationTracking-->startNavigating@GpsLocationProvider.java

updateProviderListenersLocked-->p.enable@LocationManagerService.java-->enable-->
sendMessage(ENABLE)-->handleMessage-->handleEnable-->native_init@GpsLocationProvider.java


//provider初始化：
 static { class_init_native(); }-->class_init_native@GpsLocationProvider.java-->
android_location_GpsLocationProvider_class_init_native{
- 初始化本地方法
- 获取模块，hw_get_module(GPS_HARDWARE_MODULE_ID)
- 打开设备module->methods->open(module, GPS_HARDWARE_MODULE_ID, &device)
- 获取接口sGpsInterface = gps_device->get_gps_interface

}

handleEnable-->native_init@GpsLocationProvider.java-->android_location_GpsLocationProvider_init
-->(设置HAL层回调函数)sGpsInterface->init(&sGpsCallbacks)

//关闭provider：
updateProviderListenersLocked-->p.disable@LocationManagerService.java-->disable-->
sendMessage(ENABLE,0)-->handleMessage-->handleDisable-->stopNavigating-->native_stop
@GpsLocationProvider.java-->android_location_GpsLocationProvider_stop-->sGpsInterface->stop()
@com_android_server_location_GpsLocationProvider.cpp-->stop-->mstar_gps_stop-->
gps_state_stop()@MstarGps.c

//添加addGpsStatusListener：
addGpsStatusListener-->mService.addGpsStatusListener@LocationManager.java-->addGpsStatusListener
@LocationManagerService.java-->mGpsStatusProvider.addGpsStatusListener--> mListeners.add(l)
@GpsLocationProvider.java

//添加addNmeaListener：
addNmeaListener-->mService.addGpsStatusListener@LocationManager.java-->同上

//添加LocationListener：
requestLocationUpdates-->_requestLocationUpdates-->mService.requestLocationUpdates@LocationManager.java-->
requestLocationUpdates(LocationRequest request, ILocationListener listener,PendingIntent intent, String packageName) {
  //request
- LocationRequest sanitizedRequest = createSanitizedRequest(request,allowedResolutionLevel,callerHasLocationHardwarePermission)
  //创建receiver，加入到mReceivers
- getReceiverLocked(listener, pid, uid, packageName, workSource,hideFromAppOps){
	- Receiver receiver = mReceivers.get(intent)
	- if(receiver == null){
		- receiver = new Receiver(null, intent, pid, uid, packageName, workSource,hideFromAppOps)
		- mReceivers.put(intent, receiver)
		}
	}
- requestLocationUpdatesLocked(sanitizedRequest, receiver, uid, packageName){
	- LocationProvider provider = getLocationProviderLocked(name)
	- UpdateRecord record = new UpdateRecord(name, request, receiver)	//创建UpdateRecord
	- receiver.mUpdateRecords.put(name, record)
	}
}@LocationManagerService.java


jb/frameworks/base/location/java/android/location/LocationManager.java
jb/frameworks/base/services/java/com/android/server/LocationManagerService.java
jb/frameworks/base/services/java/com/android/server/location/GpsLocationProvider.java
frameworks/base/services/jni/com_android_server_location_GpsLocationProvider.cpp

/**********************

 gnss　provider
*/

//创建
static class_init_native@GnssLocationProvider.java
android_location_GnssLocationProvider_class_init_native{
 //初始化java回调函数
- method_reportLocation
- method_reportStatus
 // 获取hal接口
- gnssHal = IGnssExt::getService()
- gnssXtra = gnssHal->getExtensionXtra()
- gnssRil = gnssHal->getExtensionAGnssRilExt()
- gnssAgnss = gnssHal->getExtensionAGnss()
- gnssNavigationMessage = gnssHal->getExtensionGnssNavigationMessage()
- gnssNi = gnssHal->getExtensionGnssNi()
- gnssGeofencing = gnssHal->getExtensionGnssGeofencing()
}@com_android_server_location_GnssLocationProvider.cpp

//初始化
GnssLocationProvider-->native_init@GnssLocationProvider.java-->
android_location_GnssLocationProvider_init(JNIEnv* env, jobject obj) {
- sp<IGnssCallback> gnssCbIface = new GnssCallback()
- GnssHal->setCallback(gnssCbIface)-->Gnss::setCallback@Gnss.cpp
}@com_android_server_location_GnssLocationProvider.cpp

//开始
startNavigating-->native_start@GnssLocationProvider.java-->
android_location_GnssLocationProvider_start-->gnssHal->start()


/**********************
 定位信息上报

*/
//status回调：
nmea_reader_parse-->gps_state->callbacks.location_cb@MstarGps.c-->
location_callback-->method_reportLocation@com_android_server_location_GpsLocationProvider.cpp
-->reportLocation(onFirstFix固定地址)，reportNmea(onNmeaReceived卫星消息)，
reportStatus(onGpsStarted，onGpsStopped启动，停止)，reportSvStatus(onSvStatusChanged)
--> listener.mListener.onxxxx()@GpsLocationProvider.java

//处理Nmea回调：
onNmeaReceived-->sendMessage-->
mGpsHandler.handleMessage@GpsStatusListenerTransport@LocationManager.java-->
mNmeaListener.onNmeaReceived@LocationManager.java

//LocationListener回调:
GnssCallback::gnssLocationCb@com_android_server_location_GpsLocationProvider.cpp-->
reportLocation@GnssLocationProvider.java-->mLocationProviderManager.onReportLocation(location)
@AbstractLocationProvider.java-->LocationProvider.onReportLocation@-->
handleLocationChangedLocked(Location location, LocationProvider provider){
- ArrayList<UpdateRecord> records = mRecordsByProvider.get(provider.getName())	//获取UpdateRecord
- for (UpdateRecord r : records) {
	- 
	 //通知位置
	- Location notifyLocation						//设置位置精度
	- if (receiver.mAllowedResolutionLevel < RESOLUTION_LEVEL_FINE) {
		- notifyLocation = coarseLocation
	  }else{
		- notifyLocation = location
	  }
	- if (notifyLocation != null) {
		  //AppOpsManager判断是否有权限
		- reportLocationAccessNoThrow(receiver.mCallerIdentity.mPid,...receiver.mAllowedResolutionLevel){	
			- int op = resolutionLevelToOp(allowedResolutionLevel)
			- if (mAppOps.noteOpNoThrow(op, uid, packageName) != AppOpsManager.MODE_ALLOWED) return false
			- return getAllowedResolutionLevel(pid, uid) >= allowedResolutionLevel
			}
		- receiver.callLocationChangedLocked(notifyLocation)
		}
	}
}@LocationManagerService.java



frameworks/base/services/core/java/com/android/server/location/AbstractLocationProvider.java
frameworks/base/services/core/java/com/android/server/location/GnssLocationProvider.java
frameworks/base/services/core/jni/com_android_server_location_GnssLocationProvider.cpp
/***********************
 应用使用位置服务：

*/

LocationManager{
  //获取provider
- getProviders(Criteria criteria/*高精度,低精度*/){ 
	- LocationProvider{
		- getName()
		- requiresSatellite() 
		}
	}
  //解析 NMEA 0183
- addNmeaListener(OnNmeaMessageListener listener, Handler handler){
	- OnNmeaMessageListener()
	} 
  //测量的一次卫星信息
- registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback callback){ 
	- GnssMeasurement{
		- getSnrInDb() //获取信噪比
		}
	}
  //获取导航信息
- registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback callback){
	- onGnssNavigationMessageReceived(GnssNavigationMessage event)-->
		GnssNavigationMessage{
		- getData 
		- getMessageId() 
		- getType()//获取定位类型,bd,gps,glonass
		}
	}
  //卫星状态
- registerGnssStatusCallback(GnssStatus.Callback) {
	-  GnssStatus--GpsSatellite{
		- getSnr
		- getAzimuthDegrees //方位
		- getConstellationType //星座
		- getElevationDegrees //海拔
		}
	}
  ////位置更新
- requestLocationUpdates(String provider, LocationListener listener){ 
	- Location{ //由LocationManager生成的location都包含经纬度,时间戳...
		- 
		}
	}
}


//获取LocationProvider：
LocationManager.getBestProvider-->getProviders-->_getProvidersLocked-->mProviders.get(从mProvider获取)
@LoacationManagerService.java

mProvider添加：
run-->initialize-->loadProviders-->loadProvidersLocked-->_loadProvidersLocked(添加GPS和网络provider)
-->addProvider-->mProviders.add


gps位置provider：
_loadProvidersLocked-->new GpsLocationProvider(设置locationManager)

更新地址：
reportLocation@GpsLocatinProvider.java-->reportLocation-->mLocationHandler.sendMessageAtFrontOfQueue
-->(处理消息)LocationWorkerHandler.handleMessage@LocationManagerService.java-->updateLocation
(是否更新其他provider的地址)-->ProviderHandler.handleMessage-->handleUpdateLocation
-->native_inject_location@android_location_GpsLocationProvider_inject_location-->

LocationWorkerHandler.handleMessage-->handleLocationChangedLocked(最后位置)-->mLastKnownLocation.put

获取最后地址：
getLastKnownLocation-->_getLastKnownLocationLocked-->mLastKnownLocation.get

网络地址：
LocationProviderProxy-->reconnect



/*
 获取卫星

*/

获取状态：GpsStatus.Listener-->onGpsStatusChanged@GpsStatus.java

加入监听器：
addGpsStatusListener-->new GpsStatusListenerTransport-->mService.addGpsStatusListener
@LocationManager.java

获取卫星状态：
GpsStatusListenerTransport.onGpsStatusChanged(状态变化)-->LocationManager.getGpsStatus
-->status.setStatus(mGpsStatus)@LocationManager.java

底层上报状态：
gps_timer_thread-->(卫星状态变化sv_status_changed)sv_status_cb@bd_gps.c-->(拷贝卫星数据)
sv_status_callback-->method_reportSvStatus@com_android_server_location_GpsLocationProvider.cpp
-->reportSvStatus@GpsLocationProvider.java-->onSvStatusChanged{
- 读取卫星状态native_read_sv_status
- 设置卫星，mGpsStatus.setStatus
- mGpsHandler.sendMessage(GPS_EVENT_SATELLITE_STATUS)-->mGpsHandler.handleMessage
	-->mListener.onGpsStatusChanged
}@LocationManager.java


frameworks/base/location/java/android/location/LocationManager.java
frameworks/base/services/java/com/android/server/LocationManagerService.java
frameworks/base/services/java/com/android/server/location/GpsLocationProvider.java
frameworks/base/services/jni/com_android_server_location_GpsLocationProvider.cpp
frameworks/base/telephony/java/com/android/internal/telephony/gsm/GsmServiceStateTracker.java

