/***********************
 locationManagerService

*/
服务启动：
new LocationManagerService().systemReady--new Thread(null,this,"").run()@SystemServer.java-->
run-->initialize-->loadProviders-->loadProvidersLocked-->_loadProvidersLocked-->
updateProvidersLocked-->updateProviderListenersLocked@LocationManagerService.java-->
enableLocationTracking


setting中设置gps:
SettingsObserver.update(监听到设置发生改变)-->updateProvidersLocked-->updateProviderListenersLocked
@LocationManagerService.java-->enableLocationTracking(发送消息)-->ProviderHandler.handleMessage-->
handleEnableLocationTracking-->startNavigating@GpsLocationProvider.java-->native_start-->
android_location_GpsLocationProvider_start@com_android_server_location_GpsLocationProvider.cpp
-->start-->mstar_gps_start-->gps_state_start@MstarGps.c

另个打开gps流程：
requestLocationUpdatesLocked-->requestSingleShotFix-->ProviderHandler.handleMessage-->handleRequestSingleShot-->startNavigating@GpsLocationProvider.java-->native_start-->
android_location_GpsLocationProvider_start@com_android_server_location_GpsLocationProvider.cpp
-->start-->mstar_gps_start-->gps_state_start@MstarGps.c
_____________________
//provider:

加入不同类型的provider：
_loadProvidersLocked-->addProvider(加入gpsProvider)-->addProvider(加入passiveProvider)--
mEnabledProviders.add(加入passiveProvider)--addProvider(加入mNetworkLocationProvider)@
LocationManagerService.java

addProvider{//加入到容器
        mProviders
        mProvidersByName
}


关闭打开provider：
updateProvidersLocked-->(获取provider的状态)isAllowedBySettingsLocked--updateProviderListenersLocked{
- 获取该provider记录mRecordsByProvider.get
- 获取改record中的接收者，并通知他们provider的状态更新。
- 移除已死亡的接收者receiver
- 使能或关闭provider。 p.enable(),p.enableLocationTracking

}@LocationManagerService.java-->(打开gps为例)enableLocationTracking-->sendMessage(ENABLE_TRACKING)
-->ProviderHandler.handleMessage-->handleEnableLocationTracking-->startNavigating@GpsLocationProvider.java

updateProviderListenersLocked-->p.enable@LocationManagerService.java-->enable-->
sendMessage(ENABLE)-->handleMessage-->handleEnable-->native_init@GpsLocationProvider.java


provider初始化：
 static { class_init_native(); }-->class_init_native@GpsLocationProvider.java-->
android_location_GpsLocationProvider_class_init_native{
- 初始化本地方法
- 获取模块，hw_get_module(GPS_HARDWARE_MODULE_ID)
- 打开设备module->methods->open(module, GPS_HARDWARE_MODULE_ID, &device)
- 获取接口sGpsInterface = gps_device->get_gps_interface

}

handleEnable-->native_init@GpsLocationProvider.java-->android_location_GpsLocationProvider_init
-->(设置HAL层回调函数)sGpsInterface->init(&sGpsCallbacks)

关闭provider：
updateProviderListenersLocked-->p.disable@LocationManagerService.java-->disable-->
sendMessage(ENABLE,0)-->handleMessage-->handleDisable-->stopNavigating-->native_stop
@GpsLocationProvider.java-->android_location_GpsLocationProvider_stop-->sGpsInterface->stop()
@com_android_server_location_GpsLocationProvider.cpp-->stop-->mstar_gps_stop-->
gps_state_stop()@MstarGps.c

____________________
添加addGpsStatusListener：
addGpsStatusListener-->mService.addGpsStatusListener@LocationManager.java-->addGpsStatusListener
@LocationManagerService.java-->mGpsStatusProvider.addGpsStatusListener--> mListeners.add(l)
@GpsLocationProvider.java

添加addNmeaListener：
addNmeaListener-->mService.addGpsStatusListener@LocationManager.java-->同上

添加LocationListener：
requestLocationUpdates-->_requestLocationUpdates-->mService.requestLocationUpdates@LocationManager.java
-->requestLocationUpdate(将listener加入mReceivers)-->requestLocationUpdatesLocked(添加监听器的记录
UpdateRecord)


jb/frameworks/base/location/java/android/location/LocationManager.java
jb/frameworks/base/services/java/com/android/server/LocationManagerService.java
jb/frameworks/base/services/java/com/android/server/location/GpsLocationProvider.java
frameworks/base/services/jni/com_android_server_location_GpsLocationProvider.cpp

/***********************
  gps hal

*/
struct hw_module_t HAL_MODULE_INFO_SYM = {
  .tag = HARDWARE_MODULE_TAG,
  .id            = GPS_HARDWARE_MODULE_ID,
  .methods       = &gps_module_methods{
		     - .open = open_gps(struct hw_module_t* module,struct hw_device_t** device){
			- struct gps_device_t *dev = malloc
			- dev->get_gps_interface = get_gps_interface //返回hw_device_t 获取接口
			- _gps_state->init = 0 //Struct GpsState
			- device = dev
		}
	}
}

static const GpsInterface  GpsInterface = {
  .size  = sizeof(GpsInterface),
  .init  = gps_init,
  .start = gps_start,
  .stop  = 
  .cleanup = 
  .inject_time =
  .inject_location = 
  .delete_aiding_data =
  .set_position_mode = 
  .get_extension =
};

//设置回调接口,用于通知上层
gps_init(GpsCallbacks* callbacks){
- GpsState*  s = _gps_state
- s->callbacks = *callbacks
- load_conf
- gps_state_init(state){
	- state->fd //设置gps数据fd
	- socketpair( AF_LOCAL, SOCK_STREAM, 0, state->control )//创建socketPair用于.系统gps服务和,gps线程通信
	- state->thread = state->callbacks.create_thread_cb( "gps_state_thread", gps_state_thread) //创建读取nmea线程
	}
}@gps.c

gps_start{
- write( s->control[0], &cmd, 1 ) //开始
- s->callbacks.create_thread_cb("supl_thread", supl_thread) //创建supl线程
}@gps.c


//读取解析nmea
gps_state_thread{
- NmeaReader  reader[1]
- nmea_reader_init( reader )
 //监听gps数据(从gps模块),gps命令(从gps服务)
- epoll_fd   = epoll_create(2)
  epoll_register( epoll_fd, state->fd )
  epoll_register( epoll_fd, state->control[1] )
- 循环读取数据
{
- epoll_wait( epoll_fd, events)
- control_fd{//控制命令
	- CMD_START:{
		- nmea_reader_set_nmea_callback(nmea_cb)
		- nmea_reader_set_callback(location_cb)
		}
	- CMD_STOP:
	}
- gps_fd{//数据
	- nmea_reader_addc
	}
 }
}

//status回调：
nmea_reader_parse-->gps_state->callbacks.location_cb@MstarGps.c-->
location_callback-->method_reportLocation@com_android_server_location_GpsLocationProvider.cpp
-->reportLocation(onFirstFix固定地址)，reportNmea(onNmeaReceived卫星消息)，
reportStatus(onGpsStarted，onGpsStopped启动，停止)，reportSvStatus(onSvStatusChanged)
--> listener.mListener.onxxxx()@GpsLocationProvider.java

处理Nmea回调：
onNmeaReceived-->sendMessage-->
mGpsHandler.handleMessage@GpsStatusListenerTransport@LocationManager.java-->
mNmeaListener.onNmeaReceived@LocationManager.java

LocationListener回调:
GnssCallback::gnssLocationCb@com_android_server_location_GpsLocationProvider.cpp-->
reportLocation@GnssLocationProvider.java-->
LocationWorkerHandler(MSG_LOCATION_CHANGED)-->handleLocationChangedLocked(从记录UpdateRecord获取监听器)
-->receiver.callLocationChangedLocked(callLocationChangedLocked,callStatusChangedLocked)
-->mListener.onLocationChanged@LocationManagerService.java


SettingsObserver-->updateProvidersLocked(更新状态)-->updateProviderListenersLocked-->
record.mReceiver.callProviderEnabledLocked-->mListener.onProviderEnabled
(或disable)
____________________
jni和底层处理：
class_init_native-->android_location_GpsLocationProvider_class_init_native(设置回调函数)-->
hw_get_module(获取模块)--module->methods->open(获取设备)--sGpsInterface@jni->get_extension
-->mstar_gps_get_extension(获取接口)@MstarGps.c--(初始化各种接口)

设置回调函数：
native_init-->android_location_GpsLocationProvider_init--> sGpsInterface->init(&sGpsCallbacks)@jni-->
mstar_gps_init(设置回调函数)-->gps_state_init(初始化，打开串口..。开始接收消息)@MstarGps.c


回调：
native_init@GpsLocationProvider.java-->android_location_GpsLocationProvider_init-->
sGpsInterface->init@com_android_server_location_GpsLocationProvider.cpp-->
mstar_gps_init-->gps_state_init-->gps_state_thread(循环等待命令，gps消息串)-->
nmea_reader_addc(读取串口消息)-->nmea_reader_parse(根据消息调用回调函数callbacks)@MstarGps.c

/***********************
 应用使用位置服务：

*/

LocationManager{
  //获取provider
- getProviders(Criteria criteria/*高精度,低精度*/){ 
	- LocationProvider{
		- getName()
		- requiresSatellite() 
		}
	}
  //解析 NMEA 0183
- addNmeaListener(OnNmeaMessageListener listener, Handler handler){
	- OnNmeaMessageListener()
	} 
  //测量的一次卫星信息
- registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback callback){ 
	- GnssMeasurement{
		- getSnrInDb() //获取信噪比
		}
	}
  //获取导航信息
- registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback callback){
	- onGnssNavigationMessageReceived(GnssNavigationMessage event)-->
		GnssNavigationMessage{
		- getData 
		- getMessageId() 
		- getType()//获取定位类型,bd,gps,glonass
		}
	}
  //卫星状态
- registerGnssStatusCallback(GnssStatus.Callback) {
	-  GnssStatus--GpsSatellite{
		- getSnr
		- getAzimuthDegrees //方位
		- getConstellationType //星座
		- getElevationDegrees //海拔
		}
	}
  ////位置更新
- requestLocationUpdates(String provider, LocationListener listener){ 
	- Location{ //由LocationManager生成的location都包含经纬度,时间戳...
		- 
		}
	}
}


//获取LocationProvider：
LocationManager.getBestProvider-->getProviders-->_getProvidersLocked-->mProviders.get(从mProvider获取)
@LoacationManagerService.java

mProvider添加：
run-->initialize-->loadProviders-->loadProvidersLocked-->_loadProvidersLocked(添加GPS和网络provider)
-->addProvider-->mProviders.add


gps位置provider：
_loadProvidersLocked-->new GpsLocationProvider(设置locationManager)

更新地址：
reportLocation@GpsLocatinProvider.java-->reportLocation-->mLocationHandler.sendMessageAtFrontOfQueue
-->(处理消息)LocationWorkerHandler.handleMessage@LocationManagerService.java-->updateLocation
(是否更新其他provider的地址)-->ProviderHandler.handleMessage-->handleUpdateLocation
-->native_inject_location@android_location_GpsLocationProvider_inject_location-->

LocationWorkerHandler.handleMessage-->handleLocationChangedLocked(最后位置)-->mLastKnownLocation.put

获取最后地址：
getLastKnownLocation-->_getLastKnownLocationLocked-->mLastKnownLocation.get

网络地址：
LocationProviderProxy-->reconnect

=================
获取卫星：

获取状态：GpsStatus.Listener-->onGpsStatusChanged@GpsStatus.java

加入监听器：
addGpsStatusListener-->new GpsStatusListenerTransport-->mService.addGpsStatusListener
@LocationManager.java

获取卫星状态：
GpsStatusListenerTransport.onGpsStatusChanged(状态变化)-->LocationManager.getGpsStatus
-->status.setStatus(mGpsStatus)@LocationManager.java

底层上报状态：
gps_timer_thread-->(卫星状态变化sv_status_changed)sv_status_cb@bd_gps.c-->(拷贝卫星数据)
sv_status_callback-->method_reportSvStatus@com_android_server_location_GpsLocationProvider.cpp
-->reportSvStatus@GpsLocationProvider.java-->onSvStatusChanged{
- 读取卫星状态native_read_sv_status
- 设置卫星，mGpsStatus.setStatus
- mGpsHandler.sendMessage(GPS_EVENT_SATELLITE_STATUS)-->mGpsHandler.handleMessage
	-->mListener.onGpsStatusChanged
}@LocationManager.java


frameworks/base/location/java/android/location/LocationManager.java
frameworks/base/services/java/com/android/server/LocationManagerService.java
frameworks/base/services/java/com/android/server/location/GpsLocationProvider.java
frameworks/base/services/jni/com_android_server_location_GpsLocationProvider.cpp
frameworks/base/telephony/java/com/android/internal/telephony/gsm/GsmServiceStateTracker.java

