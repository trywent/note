/*
 init

*/
分析文件init.rc-->将分析的结果，按顺序加入到执行队列-->

SECTION:import，on和service是SECTION类型。处理init.rc中都是按每个SECTION来处理。

队列：
action_list  //所有的操作，都放入这个队列。条件满足是将该对类中的action放入action_queue
action_queue //所有将被执行的操作

queue_builtin_action//执行传入的操作


执行顺序，由action的加入顺序决定。
on early-init
    start ueventd

//处理init.rc文件：
main@init.c-->init_parse_config_file@init_parser.c-->parse_config@init_parser.c-->next_token@parser.c-->
(处理SECTION)parse_line--parse_new_section==>(处理service，on，import)
==>parse_service(构建service结构，加入到service_list)--parse_line_service(设置处理函数)@init_parser.c
   parse_line_service(处理SECTION中每行。设置该service属性，设置，socket等) 	
==>parse_action(构建action，加入到action_list)--parse_line_action(设置处理函数)@init_parser.c
   parse_line_action(将命令加入到该action的command链表)-->list_add_tail-->kw_func(kw)(设置命令相应的函数)
   -->keyword_info[kw].func-->KEYWORD-->keywords.h
==>parse_import(将要包含的文件加入到import_list链表)
--------------------------
//将操作加入到操作队列：
queue_builtin_action(func,name){
//将要执行的操作链接到action_list
- 构建action，和command
- 将action加入链表action_list中，将command加入到action的命令链表中
- 将action加入队列action_queue中，action_add_queue_tail
-
}-->action_add_queue_tail(链接到action_queue)@init_parser.c

将不同trigger(early_init,init,fs,postfs)的操作加入操作队列：
main@init.c-->action_for_each_trigger(name, action_add_queue_tail){
- 遍历action_list中的action，将名字与trigger相同的action加入队列。action_add_queue_tail
- 
}-->action_add_queue_tail(链接到action_queue)@init_parser.c

设置属性触发的操作：
queue_builtin_action(queue_property_triggers_action, "queue_property_triggers")-->
queue_property_triggers_action@main.c-->queue_all_property_triggers(将符合条件操作加入队列)
-->action_add_queue_tail@init_parser.c

property_set@property_service.c-->property_changed(属性改变)@init.c-->queue_property_triggers
(判断是否可由设置属性触发执行)-->action_add_queue_tail@init_parser.c
--------------------------
执行命令：
main-->execute_one_command-->action_remove_queue_head(从action_queue队列获取第一个action)
--get_first_command(获取action中第一个命令)--cur_command->func(执行相应的命令)-->
命令实现在do_xxx@builtins.c

/*
 服务
*/
service的启动：

on boot
    class_start core
    class_start main
启动服务：
(命令)class_start@init.rc-->do_class_start@builtins.c-->service_for_each_class@init_parser.c
(查找service_list链表中名字与classname匹配的服务)-->(名字匹配)service_start_if_not_disabled
@builtins.c-->service_start(设置环境变量，socket等)-->fork新进程，执行execve@init.c-->
notify_service_state(系统属性中设置服务状态running)

通过属性设置启动：
property_set("ctl.start", xxx)-->property_set@property_service.c-->handle_property_set_fd
@property_service.c-->handle_control_message-->(start)msg_start@init.c-->
service_start-->fork--execve@@init.c--notify_service_state-->(设置系统属性init.svc.%s)


//监听服务进程状态
main-->signal_handler_init@




//创建socket：
start_service@init.c-->create_socket@util.c
		     ----publish_socket-->add_environment@init.c	
service中的socket通过设置环境变量传递给其他需要的进程,
parse_line_service@init.parse.c处理service将信息装入service结构体。
service_start-->create_socket@init.c创建socket，service_start-->publish_socket@init.c设置环境变量
总结：
init.c就是将所有的servie和command加入到一个链表中。在main函数中执行每个初始化命令，class_start命令启动所有的服务
property_set当系统属性不存在时可以增加系统属性

---------------------------
critical服务崩溃4min内4次，进入recovery：

signal_init_action@init.c-->handle_signal-->wait_for_one_process@signal_handler.c

/*
 属性
*/
//初始化property存储区:
main{
- property_load_boot_defaults //加载default属性
- start_property_service
}@init.c

初始化property值：
property_service_init_action@init.c-->start_property_service(创建socket)-->
load_properties_from_file(加载default,build属性)-->load_properties-->property_set-->
__system_property_find(查找属性名)--若存在update_prop_info(更新值)--若不存在则创建属性
--若是永久属性write_persistent_property@property_service.c-->property_changed@init.c-->
queue_property_triggers@init_parser.c

load_persistent_properties(加载/data/property/中的属性，都是永久保存的)

加载kernel属性：
main-->process_kernel_cmdline-->export_kernel_boot_props@init.c

//属性设置 设置property：通过socket通信设置。PROP_SERVICE_NAME "property_service"

client：
set-->native_set@SystemProperties.java-->SystemProperties_set@android_os_SystemProperties.cpp-->
property_set-->(gPropFd管道connectToServer("/tmp/android-sysprop"))write(gPropFd)@propertie.c

server(init)：
main@init.c-->handle_property_set_fd-->check_perms(检查权限)--property_set@propertiy_service.c-->
handle_property_set@property_service.cpp-->handle_control_message{
- ServiceManager::GetInstance().FindServiceByName(name)
- svc->Start/stop/restart-->StopOrReset(SVC_DISABLED)@service.cpp
}@init.cpp

system/core/init/property_service.c
bionic/libc/include/sys/_system_properties.h

frameworks/base/core/java/android/os/SystemProperties.java
frameworks/base/core/jni/android_os_SystemProperties.cpp
system/core/libcutils/properties.c
bionic/libc/bionic/system_properties.c

============================================
创建设备节点：
init启动后，执行service ueventd /sbin/ueventd(init的符号链接，实际运行init)。
main@init.c-->(是运行uevent)ueventd_main@ueventd.c-->device_init-->coldboot(冷启动，自动搜文件)
-->do_coldboot-->handle_device_fd-->handle_device_event-->handle_generic_device_event ||
handle_block_device_event-->handle_device-->make_device@devices.c

处理firmware：
main@init.c-->(是运行uevent)ueventd_main@ueventd.c-->device_init-->coldboot-->do_coldboot-->
handle_device_fd-->handle_firmware_event-->process_firmware_event(传入固件)@devices.c

---------------------------------------------
读取设备节点权限：uevent*.rc
ueventd_main-->ueventd_parse_config_file("/ueventd.rc")@ueventd.c-->ueventd_parse_config_file
-->parse_config(解析文件)-->parse_line_device(解析每一行)@ueventd_parser.c-->set_device_permission
(获取权限，用户，组)@ueventd.c-->add_dev_perms-->(将权限加入链表)list_add_tail(&dev_perms, &node->plist)
@device.c

设置权限：
handle_device_fd-->handle_block_device_event-->
handle_device-->make_device(创建设备节点)-->get_device_perm(获取权限)--setegid--mknod--chown(设置用户组)
@devices.c

权限值：
权限的名字，权限的值android_ids[]{

}@android_filesystem_cofig.h

system/core/init/ueventd.c
system/core/init/ueventd_parser.c
system/core/include/private/android_filesystem_cofig.h
______________________________________________
监听进程结束：
signal_init_action@init.c-->signal_init-->handle_signal-->wait_for_one_process@signal_handler.c


system/core/init/signal_handler.c
______________________________________________
initlog.rle的设置：
main-->queue_builtin_action-->console_init_action@init.c-->load_565rle_image@logo.c



systme文件权限：
system/core/include/private/android_filesystem_config.h



============
mount_all:

do_mount_all{
- fs_mgr_read_fstab
- fs_mgr_mount_all
}

system/core/init/builtins.c
system/core/fs_mgr/fs_mgr.c

/******************************
 android 8.1
*/
AddSingleLineParser@uevent.cpp-->line_callbacks_@init_parser.cpp//line分析函数

main{
  //监听子进程状态(service)
- signal_handler_init
  //属性
- property_load_boot_defaults
- start_property_service()
   //解析init.rc
- ActionManager& am = ActionManager::GetInstance()
- ServiceManager& sm = ServiceManager::GetInstance()
- Parser& parser = Parser::GetInstance()
- parser.AddSectionParser("service",sm) //设置字符分析函数
- parser.AddSectionParser("on",am)
- parser.AddSectionParser("import",Parser)
- parser.ParseConfig("/init.rc")@init.cpp-->ParseConfig-->ParseData
  //处理action
- am.QueueEventTrigger("early-init")
- 
  //循环处理
- while (true) {
	  //处理关机/重启
	- HandlePowerctlMessage(shutdown_command)
	- am.ExecuteOneCommand()
	}
}@init.cpp


//处理子进程结束信号
signal_handler_init{
- socketpair(AF_UNIX, SOCK_STREAM | SOCK_NONBLOCK | SOCK_CLOEXEC, 0, s)
- signal_write_fd = s[0]
- signal_read_fd = s[1]
 //子进程结束信号
- sigaction(SIGCHLD, &act, 0)
- register_epoll_handler(signal_read_fd, handle_signal){
	- epoll_event ev
	- ev.data.ptr = reinterpret_cast<void*>(fn)
	- epoll_ctl(epoll_fd, EPOLL_CTL_ADD, fd, &ev)
	}@init.cpp
  -->handle_signal-->ServiceManager::GetInstance().ReapAnyOutstandingChildren()
}@signal_handler.cpp

ReapAnyOutstandingChildren-->ServiceManager::ReapOneProcess(){
  //等待结束
- TEMP_FAILURE_RETRY(waitid(P_ALL, 0, &siginfo, WEXITED | WNOHANG | WNOWAIT))
- auto pid = siginfo.si_pid
- Service* svc = FindServiceByPid(pid)
- svc->Reap(){
	  //需要重启服务
	- KillProcessGroup(SIGKILL)
	- flags_ |= SVC_RESTARTING
	- onrestart_.ExecuteAllCommands()
	}
}@service.cpp



//重启流程
HandlePowerctlMessage(const std::string& command) {
- std::vector<std::string> cmd_params = android::base::Split(command, ",")
- if (cmd_params[0] == "shutdown") {
  	- cmd = ANDROID_RB_POWEROFF
  }else if(cmd_params[0] == "reboot") {
	- cmd = ANDROID_RB_RESTART2
  }else if (command == "thermal-shutdown") {
	- cmd = ANDROID_RB_THERMOFF	
  }
- ActionManager::GetInstance().QueueEventTrigger("shutdown")
- auto shutdown_handler = [cmd, command, reboot_target,run_fsck](const std::vector<std::string>&) {
        DoReboot(cmd, command, reboot_target, run_fsck);
    }
- ActionManager::GetInstance().QueueBuiltinAction(shutdown_handler, "shutdown_done")
}@reboot.cpp

system/core/init/init.cpp
system/core/init/signal_handler.cpp
system/core/init/init_parser.cpp
system/core/init/ueventd.cpp
system/core/init/service.cpp
system/core/init/reboot.cpp
