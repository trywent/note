/****************************
 USBService
*/
startOtherServices-->mSystemServiceManager.startService(USB_SERVICE_CLASS)@SystemServer.java
-->startService("com.android.server.usb.UsbService$Lifecycle")@SystemServiceManager.java-->
onStart{
- mUsbService = new UsbService(getContext())
- publishBinderService(Context.USB_SERVICE, mUsbService)
}@UsbService.java


UsbService(Context context) {
- UsbSettingsManager mSettingsManager = new UsbSettingsManager(context)
- UsbAlsaManager mAlsaManager = new UsbAlsaManager(context)
  //host
- mHostManager mHostManager = new UsbHostManager(context, mAlsaManager, mSettingsManager)
  //device 存在"/sys/class/android_usb"
- UsbDeviceManager mDeviceManager = new UsbDeviceManager(context, mAlsaManager, mSettingsManager)
- UsbPortManager mPortManager = new UsbPortManager(context)
- onSwitchUser(UserHandle.USER_SYSTEM){
	- UsbProfileGroupSettingsManager settings = mSettingsManager.getSettingsForProfileGroup(UserHandle.of(newUserId))
	- mHostManager.setCurrentUserSettings(settings)
	- mDeviceManager.setCurrentUser(newUserId, settings)
	}
}@UsbService.java

//启动
Lifecycle.onBootPhase(SystemService.PHASE_ACTIVITY_MANAGER_READY)-->
systemReady{
- mAlsaManager.systemReady()
- mDeviceManager.systemReady()
- mHostManager.systemReady()
- mPortManager.systemReady()
}@UsbService.java

frameworks/base/services/usb/java/com/android/server/usb/UsbService.java
frameworks/base/services/usb/java/com/android/server/usb/UsbProfileGroupSettingsManager.java
/****************************
  主设备
  hostManager

*/
UsbHostManager(Context context, UsbAlsaManager alsaManager,UsbSettingsManager settingsManager) {
- mHostBlacklist = context.getResources().getStringArray(com.android.internal.R.array.config_usbHostBlacklist)
- mUsbAlsaManager = alsaManager
- mSettingsManager = settingsManager
  //usb事件处理应用。空
- String deviceConnectionHandler = context.getResources().getString(com.android.internal.R.string.config_UsbDeviceConnectionHandling_component)
- setUsbDeviceConnectionHandler(ComponentName.unflattenFromString(deviceConnectionHandler))
}@UsbHostManager.java

//开始监听设备
systemReady-->new Thread(null, this::monitorUsbHostBus, "UsbService host thread").start()@UsbHostManager.java-->
monitorUsbHostBus{
- struct usb_host_context* context = usb_host_init()
- usb_host_run(context, usb_device_added, usb_device_removed, NULL, (void *)thiz){
	- usb_host_load(context, added_cb, removed_cb, discovery_done_cb, client_data){
		  //监听/dev
		- context->wdd = inotify_add_watch(context->fd, DEV_DIR, IN_CREATE | IN_DELETE)
		  //监听USB_FS_DIR /dev/bus/usb
		- watch_existing_subdirs(context, context->wds, MAX_USBFS_WD_COUNT){
			- wds[0] = inotify_add_watch(context->fd, USB_FS_DIR, IN_CREATE | IN_DELETE)
			}
		}
	 //循环读取监听
	- usb_host_read_event(context){
		- 
		}
	}@usbhost.c
}@com_android_server_UsbHostManager.cpp

//设备加入
usb_device_added(const char *devname, void* client_data) {
 //加入
- env->CallBooleanMethod(thiz, method_beginUsbDeviceAdded,deviceName, usb_device_get_vendor_id(device), usb_device_get_product_id(device))
	-->beginUsbDeviceAdded@UsbHostManager.java
- env->CallVoidMethod(thiz, method_addUsbInterface)
- env->CallVoidMethod(thiz, method_addUsbEndpoint)
 //结束添加
- env->CallVoidMethod(thiz, method_endUsbDeviceAdded)-->endUsbDeviceAdded@UsbHostManager.java
}@com_android_server_UsbHostManager.cpp

endUsbDeviceAdded{
- mNewInterface.setEndpoints
- mNewConfiguration.setInterfaces
- mNewDevice.setConfigurations
  //设备处理
- ComponentName usbDeviceConnectionHandler = getUsbDeviceConnectionHandler()
- if (usbDeviceConnectionHandler == null) {
	- getCurrentUserSettings().deviceAttached(mNewDevice){//发送设备添加广播
		- final Intent intent = createDeviceAttachedIntent(device){
			- Intent intent = new Intent(UsbManager.ACTION_USB_DEVICE_ATTACHED)
			- intent.putExtra(UsbManager.EXTRA_DEVICE, device)
			}
		- mContext.sendBroadcastAsUser(intent, UserHandle.ALL)
		- resolveActivity
		}@UsbProfileGroupSettingsManager.java
	}
}@UsbHostManager.java




frameworks/base/services/usb/java/com/android/server/usb/UsbHostManager.java
frameworks/base/services/core/jni/com_android_server_UsbHostManager.cpp
system/core/libusbhost/usbhost.c
/****************************
 从设备
 deviceManager (Accessory附件)。设置从设备的功能function
 
*/
UsbDeviceManager(Context context, UsbAlsaManager alsaManager){
- initRndisAddress
  //加载oem usb配置
- readOemUsbOverrideConfig{
	- 读取配置com.android.internal.R.array.config_oemUsbModeOverride
	- mOemModeMap.put
	}
- mHandler = new UsbHandler(Looper looper) {
  	  //监听adb开关设置
	- mContentResolver.registerContentObserver(Settings.Global.getUriFor(Settings.Global.ADB_ENABLED))
	  //监听uevent
	- mUEventObserver.startObserving(USB_STATE_MATCH)	//"DEVPATH=/devices/virtual/android_usb/android0"
	- mUEventObserver.startObserving(ACCESSORY_START_MATCH)	//"DEVPATH=/devices/virtual/misc/usb_accessory"
	}	
}@UsbDeviceManager.java


//进入accessory功能
mUEventObserver.onUEvent{
- mHandler.updateState(state)
- startAccessoryMode{
	- mAccessoryStrings = nativeGetAccessoryStrings()
	- String functions = UsbManager.USB_FUNCTION_ACCESSORY//设置accessory
	- mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_ACCESSORY_MODE_ENTER_TIMEOUT)) //设置超时处理
	- setCurrentFunctions(functions)//设置功能
	}
}@UsbDeviceManager.java

//设置function
setCurrentFunctions-->mHandler.sendMessage(MSG_SET_CURRENT_FUNCTIONS)-->UsbHandler.handleMessage-->
setEnabledFunctions(String functions, boolean forceRestart) {
- 
}@UsbDeviceManager.java

trySetEnabledFunctions(String functions, boolean forceRestart){
- functions = applyAdbFunction(functions)
  //设置属性,init.rc监听属性设置后设置usb功能
- setUsbConfig-->SystemProperties.set(USB_CONFIG_PROPERTY, config)
}@UsbDeviceManager.java



//处理消息
UsbHandler.handleMessage{
  //连接变化
- MSG_UPDATE_STATE:{
	- 
	 //有accessory功能
	- updateCurrentAccessory
	}
  //
- MSG_ACCESSORY_MODE_ENTER_TIMEOUT{
	- notifyAccessoryModeExit
	}
}


updateCurrentAccessory{
- 
}

//打开adb调试
AdbSettingsObserver.onChange-->mHandler.sendMessage(MSG_ENABLE_ADB, enable)-->handleMessage(MSG_ENABLE_ADB)-->
setAdbEnabled(boolean enable) {
- mAdbEnabled = enable;
  //改变usb功能
- String oldFunctions = getDefaultFunctions()
- String newFunctions = applyAdbFunction(oldFunctions)-->applyAdbFunction(String functions){
	- if (mAdbEnabled) {
		- functions = UsbManager.addFunction(functions, UsbManager.USB_FUNCTION_ADB)
	  }else{
		- functions = UsbManager.removeFunction(functions, UsbManager.USB_FUNCTION_ADB)
		}
	}
- SystemProperties.set(USB_PERSISTENT_CONFIG_PROPERTY,newFunctions)
- setEnabledFunctions(mCurrentFunctions, true, mUsbDataUnlocked)
- updateAdbNotification(false)
}@UsbDeviceManager.java

frameworks/base/services/usb/java/com/android/server/usb/UsbDeviceManager.java
frameworks/base/services/core/jni/com_android_server_UsbDeviceManager.cpp
