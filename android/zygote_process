/*
 进程开始       c库实现：bionic  java实现：libcore/luni

*/
//android 6.0 zygote开始:
service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server

app_process编译时链接的库包含libandroid_runtime.so，

service zygote /system/bin/app_proces@init.rc-->main-->runtime.start("com.android.internal.os.ZygoteInit")
@app_main.cpp-->AndroidRuntime::start{//开始虚拟机，注册函数
- startVm //启动虚拟机
- 初始启动startClass //com.android.internal.os.ZygoteInit
- 查找mian方法并执行，env->CallStaticVoidMethod-->
	mian{
	- registerZygoteSocket(socketName)//注册socket "zygote" 用于监听命令启动进程
	- startSystemServer-->handleSystemServerProcess-->Zygote.forkAndSpecialize//启动系统服务
	- runSelectLoop{//接收命令并执行,等待启动app进程
		- acceptCommandPeer
		- runOnce{
			- readArgumentList//参数
			- pid==0,Zygote.forkAndSpecialize //fork进程
			- handleChildProc-->RuntimeInit.zygoteInit
			}@ZygoneConnction.java
		} 
	}@ZygoteInit.java
}@AndroidRuntime.cpp

//fork进程
forkAndSpecialize-->nativeForkAndSpecialize@Zygote.java-->com_android_internal_os_Zygote_nativeForkAndSpecialize
-->ForkAndSpecializeCommon{
  //设置子进程退出信号处理
- SetSignalHandlers{
	- sig_chld.sa_handler = SigChldHandler
	- sigaction(SIGCHLD, &sig_chld, NULL)	
	}
- pid_t pid = fork{}
- if(pid==0){

  }else{//父进程

  }
}@com_android_internal_os_Zygote.cpp

//进程初始化
RuntimeInit.zygoteInit{
- commonInit{
	- Thread.setDefaultUncaughtExceptionHandler(UncaughtHandler)//设置未捕获异常处理
	- TimeZone.setDefault
	}
- nativeZygoteInit
- applicationInit(com.android.server.SystemServer)-->invokeStaticMain(className){//执行main函数
	- Class.forName(className)//class
	- throw new ZygoteInit.MethodAndArgsCaller-->MethodAndArgsCaller.run-->mMethod.invoke
	}@ZygoteInit.java	
}@RuntimeInit.java


//子进程退出处理（systemServer）
SigChldHandler{
- while ((pid = waitpid(-1, &status, WNOHANG)) > 0) {
	- if (pid == gSystemServerPid) {//systemServier退出
		- kill(getpid(), SIGKILL) //杀掉zygote
		}
	}
}


//加载"libandroid_servers.so":包含服务的jni，其他应用不能调用
main-->System.loadLibrary("android_servers")@SystemServer.java-->loadLibrary@System.java-->
loadLibrary-->nativeLoad@Runtime.java-->nativeLoad@InternalNative.cpp-->dvm_java_lang_Runtime-->
Dalvik_java_lang_Runtime_nativeLoad@java_lang_Runtime.cpp-->dvmLoadNativeCode-->dlsym@Native.cpp

//加载"android_runtime.so":运行时的jni,所有程序可用
AndroidRuntime::start-->startReg-->register_jni_procs-->array[i].mProc(env)
@AndroidRuntime.cpp-->register_android_xxxxx(env)-->
registerNativeMethods@AndroidRuntime.cpp-->jniRegisterNativeMethods@JNIHelp.cpp



/*
 android8.1
*/
//启动进程。创建socket zygote
service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote
socket zygote stream 660 root system
@init.rc-->main{
- AppRuntime runtime(argv[0], computeArgBlockSize(argc, argv)) //AndroidRuntime
  //遍历参数
- runtime.addOption(strdup(argv[i]))
- zygote = true 	   //"--zygote"
- startSystemServer = true //"--start-system-server"
  //设置参数
- Vector<String8> args
- if (!className.isEmpty()) {

  }else{
	- args.add(String8("start-system-server"))
	- 
  }
- if(zygote){
	- runtime.start("com.android.internal.os.ZygoteInit", args, zygote)
  }else if(className){
	- runtime.start("com.android.internal.os.RuntimeInit", args, zygote)
  }
}@app_main.cpp 




AndroidRuntime::start(const char* className, const Vector<String8>& options, bool zygote){
- const char* rootDir = getenv("ANDROID_ROOT") //"/system"
- jni_invocation.Init(NULL)
- JNIEnv* env
  //启动虚拟机
- startVm(&mJavaVM, &env, zygote){
	- parseCompilerRuntimeOption("dalvik.vm.image-dex2oat-Xms"...)
	- parseCompilerRuntimeOption("dalvik.vm.image-dex2oat-Xmx"...)
	- addOption("--image-classes=/system/etc/preloaded-classes") //预加载的类
	  //设置语言persist.sys.locale persist.sys.language
	- const std::string locale = readLocale()
	- strncat(localeOption, locale.c_str(), PROPERTY_VALUE_MAX),addOption(localeOption)
	- JNI_CreateJavaVM(pJavaVM, pEnv, &initArgs)
	}
- onVmCreated(env)
  //注册android JNI
- startReg(env)
  //调用类中main方法
- char* slashClassName = toSlashClassName(className != NULL ? className : "")
- jclass startClass = env->FindClass(slashClassName)
- jmethodID startMeth = env->GetStaticMethodID(startClass, "main","([Ljava/lang/String;)V")
- env->CallStaticVoidMethod(startClass, startMeth, strArray)
}@AndroidRuntime.cpp




//java层zygote启动
main(String argv[]){
- ZygoteServer zygoteServer = new ZygoteServer()
}@ZygoteInit.java


frameworks/base/cmds/app_process/app_main.cpp
frameworks/base/core/jni/AndroidRuntime.cpp
frameworks/base/core/java/com/android/internal/os/ZygoteInit.java 
frameworks/base/core/java/com/android/internal/os/RuntimeInit.java
frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java
frameworks/base/core/jni/com_android_internal_os_Zygote.cpp
libcore/dalvik/src/main/java/dalvik/system/ZygoteHooks.java
dalvik/vm/Native.cpp
libnativehelper/JNIHelp.cpp
frameworks/base/services/jni/Android.mk

/*************************
 开始应用进程：

*/
//android6.0

开始应用进程：
startProcessLocked-->Process.start("android.app.ActivityThread")@ActivityManagerService.java-->
start-->startViaZygote-->zygoteSendArgsAndGetResult{
- openZygoteSocketIfNeeded{//打开socket"zygote"
       - primaryZygoteState = ZygoteState.connect(ZYGOTE_SOCKET)
       }
 //写入启动命令
- sZygoteWriter.flush
 //读取启动结果
- ProcessStartResult
- inputStream.readInt //启动进程id
}@Process.java




//android 8.1
ZygoteProcess zygoteProcess =new ZygoteProcess(ZYGOTE_SOCKET, SECONDARY_ZYGOTE_SOCKET)@Process.java
ZygoteProcess{
- mSocket = primarySocket             //"zygote"
- mSecondarySocket = secondarySocket  //"zygote_secondary"
}@ZygoteProcess.java


startProcessLocked-->Process.start("android.app.ActivityThread")@ActivityManagerService.java-->
start(final String processClass,final String niceName,int uid, int gid, int[] gids....)@Process.java-->
zygoteProcess.start-->startViaZygote(String processClass,String niceName,final int uid,int gid...){
- argsForZygote.add("--runtime-args")
- argsForZygote.add("--setuid=" + uid)
- argsForZygote.add("--setgid=" + gid)
- argsForZygote.add("--app-data-dir=" + appDataDir)
- zygoteSendArgsAndGetResult(openZygoteSocketIfNeeded(abi), argsForZygote)
  //连接socket.  zygote
- ZygoteState openZygoteSocketIfNeeded{
	- primaryZygoteState = ZygoteState.connect(mSocket){//zygote
		- LocalSocket zygoteSocket = new LocalSocket()
		- zygoteSocket.connect(new LocalSocketAddress(socketAddress,LocalSocketAddress.Namespace.RESERVED))\
		- zygoteInputStream = new DataInputStream(zygoteSocket.getInputStream())
		- getAbiList(BufferedWriter writer, DataInputStream inputStream){
			- 	
			}
		}
	- secondaryZygoteState = ZygoteState.connect(mSecondarySocket)//zygote_secondary
 	}
  //写入参数，等待结果
- zygoteSendArgsAndGetResult
}@ZygoteProcess.java




frameworks/base/core/java/android/os/Process.java
frameworks/base/core/java/android/os/ZygoteProcess.java
===============
//uncatchException Thread.setDefaultUncaughtExceptionHandler
UncaughtHandler.uncaughtException-->ActivityManagerNative.getDefault().handleApplicationCrash
@RunttimeInit.java-->handleApplicationCrash-->handleApplicationCrashInner-->
crashApplication{
- makeAppCrashingLocked
- createAppErrorIntentLocked
- startActivityAsUser //弹框？
}@ActivityManagerService.java


makeAppCrashingLocked-->handleAppCrashLocked

===============
//sginal
android4.4中处理信号signal：
start-->startVm@AndroidRuntime.cpp-->JNI_CreateJavaVM@Jni.cpp-->dvmStartup-->
dvmInitAfterZygote@Init.cpp-->dvmSignalCatcherStartup-->dvmCreateInternalThread
-->signalCatcherThreadStart(等待并处理信号)-->(收到SIGQUIT)handleSigQuit@SignalCatcher.cpp

dalvik/vm/Jni.cpp
dalvik/vm/Init.cpp
dalvik/vm/SignalCatcher.cpp
fameworks/base/core/jni/AndroidRuntime.cpp

____________
android5.1以上


//查看进程信息，group
 cat proc/pid/status 

