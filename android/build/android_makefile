/*******************************************************
  android build
*/

//编译选项
{
add_lunch_combo aosp_arm-eng	//默认combo
add_lunch_combo aosp_arm64-eng

//查找device目录下的vendorsetup.sh。可以手动添加eng,user，userdebug版本
for f in `test -d device && find -L device -maxdepth 4 -name 'vendorsetup.sh' 2> /dev/null | sort` \
         `test -d vendor && find -L vendor -maxdepth 4 -name 'vendorsetup.sh' 2> /dev/null | sort` \
         `test -d product && find -L product -maxdepth 4 -name 'vendorsetup.sh' 2> /dev/null | sort`
do
    echo "including $f"
    . $f
done
}@envsetup.sh

//lunche的功能
lunch{
- selection 				//选择的编译项 sp7731e_1h10_native-userdebug
- product=${selection%%-*}  		//根据编译项，获取产品名 sp7731e_1h10_native
- variant_and_version=${selection#*-} 	//根据编译项，获取编译类型 userdebug
- TARGET_PRODUCT=$product
- TARGET_BUILD_VARIANT=$variant
- export TARGET_PRODUCT
- export TARGET_BUILD_VARIANT
  //设置变量。从makefile文件中获取配置的变量
- build_build_var_cache{
	- build/core/config.mk
	}
  //设置环境
- set_stuff_for_environment{
	- settitle{
		- export PROMPT_COMMAND
		}
	- setpath{
		- 
		}
	}
}@envsetup.sh

//android8.1编译工具路径设置
TARGET_GCC_VERSION := 4.9@make/core/config.mk //设置编译器版本

{
- toolchaindir=x86/x86_64-linux-android-$targetgccversion/bin 	//x86
- toolchaindir=arm/arm-linux-androideabi-$targetgccversion/bin	//arm
- export ANDROID_TOOLCHAIN=$gccprebuiltdir/$toolchaindir
- export ANDROID_BUILD_PATHS=$(get_build_var ANDROID_BUILD_PATHS):$ANDROID_TOOLCHAIN:$ANDROID_TOOLCHAIN_2ND_ARCH:$ANDROID_DEV_SCRIPTS: //设置android编译器变量
- export PATH=$ANDROID_BUILD_PATHS$PATH 			//设置路径
}@envsetup.sh


/*******************************************************
 android makefile的结构
*/

include build/make/core/main.mk
@Makefile

{
- BUILD_SYSTEM := $(TOPDIR)build/core
- include $(BUILD_SYSTEM)/config.mk{
	  //工具
	- BUILD_SHARED_LIBRARY:= $(BUILD_SYSTEM)/shared_library.mk
	- BUILD_EXECUTABLE:= $(BUILD_SYSTEM)/executable.mk
	- BUILD_HOST_EXECUTABLE:= $(BUILD_SYSTEM)/host_executable.mk
	- BUILD_PACKAGE:= $(BUILD_SYSTEM)/package.mk
	  ....
	- include $(BUILD_SYSTEM)/envsetup.mk{
		- include $(SRC_TARGET_DIR)/board/$(TARGET_DEVICE)/BoardConfig.mk	//板配置
		- include $(BUILD_SYSTEM)/product_config.mk				//产品配置
		}envsetup.mk
	}@config.mk
  //BUILD_SYSTEM :=$= build/make/core @config.mk
- include $(BUILD_SYSTEM)/Makefile							//systemimg recoveryimage bootimage...
}build/make/core/main.mk

//product设置。查找device下的AndroidProducts.mk
{
- include $(BUILD_SYSTEM)/product.mk
- include $(BUILD_SYSTEM)/device.mk{
	- get-all-product-makefiles-->_find-android-products-files
	}
  //获取device,vendor目录所有中AndroidProducts.mk
- all_product_configs := $(get-all-product-makefiles)
- current_product_makefile
- $(call import-products, $(current_product_makefile))
}product_config.mk

//AndroidProducts.mk
{
- PRODUCT_MAKEFILES += (LOCAL_DIR)/sp7731e_1h10_native.mk{
	- device/sprd/pike2/common/DeviceCommon.mk
	}
}@AndroidProducts.mk

//BoardConfig.mk
{
- include device/sprd/pike2/common/BoardCommon.mk
}@BoardConfig.mk

//自定义的编译目标
AndroidBoard.mk{
- bootloader
- chipram
- device/sprd/pike2/common/AndroidKernel.mk
}



/*******************************************************
 编译镜像文件：systme，recovery，boot, odm, oem
*/

//第一个目标
.PHONY: droid
DEFAULT_GOAL := droid
$(DEFAULT_GOAL): droid_targets
@main.mk	

ifneq ($(TARGET_BUILD_APPS),)
 droid_targets: apps_only
else # TARGET_BUILD_APPS
 droid_targets: droidcore dist_files
endif

.PHONY: droidcore
droidcore: $(filter $(HOST_OUT_ROOT)/%,$(modules_to_install)) \
    $(INSTALLED_SYSTEMIMAGE_TARGET) \
    $(INSTALLED_RAMDISK_TARGET) \
    $(INSTALLED_CHIPRAM_TARGET) \
    $(INSTALLED_UBOOT_TARGET) \
    $(INSTALLED_SML_TARGET) \
    $(INSTALLED_TEECFG_TARGET) \
    $(INSTALLED_TRUSTY_TARGET) \
    $(INSTALLED_BOOTIMAGE_TARGET) \
    $(INSTALLED_DTBOIMAGE_TARGET) \
    $(INSTALLED_DEBUG_RAMDISK_TARGET) \
    $(INSTALLED_DEBUG_BOOTIMAGE_TARGET) \
    $(INSTALLED_RECOVERYIMAGE_TARGET) \
    $(INSTALLED_VBMETAIMAGE_TARGET) \
    $(INSTALLED_USERDATAIMAGE_TARGET) \
    $(INSTALLED_CACHEIMAGE_TARGET) \
    $(INSTALLED_PRODNVIMAGE_TARGET) \
    $(INSTALLED_BPTIMAGE_TARGET) \
    $(INSTALLED_VENDORIMAGE_TARGET) \
    $(INSTALLED_ODMIMAGE_TARGET) \
    $(INSTALLED_SUPERIMAGE_EMPTY_TARGET) \
    $(INSTALLED_PRODUCTIMAGE_TARGET) \
    $(INSTALLED_SYSTEMOTHERIMAGE_TARGET) 

//生成镜像信息
/*
# $(1): the path of the output dictionary file
# $(2): a subset of "system vendor cache userdata product product_services oem odm"
# $(3): additional "key=value" pairs to append to the dictionary file.
*/
define generate-image-prop-dictionary




/*******************************************************
 编译system:
*/
systemimage: $(INSTALLED_SYSTEMIMAGE_TARGET)			
INSTALLED_SYSTEMIMAGE_TARGET := $(PRODUCT_OUT)/system.img
INSTALLED_SYSTEMIMAGE := $(INSTALLED_SYSTEMIMAGE_TARGET)
$(INSTALLED_SYSTEMIMAGE_TARGET): $(BUILT_SYSTEMIMAGE) $(RECOVERY_FROM_BOOT_PATCH)
	@echo "Install system fs image: $@"
	$(copy-file-to-target)
	$(hide) $(call assert-max-image-size,$@ $(RECOVERY_FROM_BOOT_PATCH),$(BOARD_SYSTEMIMAGE_PARTITION_SIZE))



BUILT_SYSTEMIMAGE := $(systemimage_intermediates)/system.img	//依赖的文件。生成的system.img
FULL_SYSTEMIMAGE_DEPS := $(INTERNAL_SYSTEMIMAGE_FILES) $(INTERNAL_USERIMAGES_DEPS) $(SELINUX_DEPENDS)
INTERNAL_SYSTEMIMAGE_FILES := $(filter $(TARGET_OUT)/%, \
    $(ALL_PREBUILT) \
    $(ALL_COPIED_HEADERS) \
    $(ALL_GENERATED_SOURCES) \
    $(ALL_DEFAULT_INSTALLED_MODULES)\
    $(ALL_PDK_FUSION_FILES))

$(BUILT_SYSTEMIMAGE): $(FULL_SYSTEMIMAGE_DEPS) $(INSTALLED_FILES_FILE) $(BUILD_IMAGE_SRCS)
	$(call build-systemimage-target,$@)

define build-systemimage-target
  $(call generate-image-prop-dictionary, $(systemimage_intermediates)/system_image_info.txt,system,skip_fsck=true)
  $(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH build/make/tools/releasetools/build_image.py \
      $(TARGET_OUT) $(systemimage_intermediates)/system_image_info.txt $(1) $(TARGET_OUT) \
      || ( mkdir -p $${DIST_DIR}; cp $(INSTALLED_FILES_FILE) $${DIST_DIR}/installed-files-rescued.txt; exit 1 )
endef


@build/core/Makefile
/*******************************************************
 recovery:
*/
@build/core/Makefile

INSTALLED_RECOVERYIMAGE_TARGET := $(PRODUCT_OUT)/recovery.img

droidcore: INSTALLED_RECOVERYIMAGE_TARGET
$(INSTALLED_RECOVERYIMAGE_TARGET): $(MKBOOTFS) $(MKIMAGE) $(MINIGZIP) \
		$(INSTALLED_RAMDISK_TARGET) \
		$(INSTALLED_BOOTIMAGE_TARGET) \
		$(recovery_binary) \
		$(recovery_initrc) $(recovery_kernel) \
		$(INSTALLED_2NDBOOTLOADER_TARGET) \
		$(recovery_build_prop) $(recovery_resource_deps) \
		$(recovery_fstab) \
		$(busybox_binary) \
		$(RECOVERY_INSTALL_OTA_KEYS)
		$(call build-recoveryimage-target, $@)

recoveryimage: $(INSTALLED_RECOVERYIMAGE_TARGET)

define build-recoveryimage-target	//创建image命令
	$(hide) $(foreach item,$(recovery_fstab), \
		cp -f $(item) $(TARGET_RECOVERY_ROOT_OUT)/system/etc/recovery.fstab)
	$(hide) $(MKBOOTFS) -d $(TARGET_OUT) $(TARGET_RECOVERY_ROOT_OUT) | $(MINIGZIP) > $(recovery_ramdisk)

endef
------------------------------------
签名密钥：
@build/core/Makefile
OTA_PUBLIC_KEYS := $(DEFAULT_SYSTEM_DEV_CERTIFICATE).x509.pem

@build/core/config.mk
ifdef PRODUCT_DEFAULT_DEV_CERTIFICATE
  DEFAULT_SYSTEM_DEV_CERTIFICATE := $(PRODUCT_DEFAULT_DEV_CERTIFICATE)
else
  DEFAULT_SYSTEM_DEV_CERTIFICATE := build/target/product/security/testkey
endif 

@build/core/product_config.mk
PRODUCT_DEFAULT_DEV_CERTIFICATE := \
    $(strip $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_DEFAULT_DEV_CERTIFICATE))


如果定义使用PRODUCT_EXTRA_RECOVERY_KEYS，会将该密钥的位置写入OTA升级包的/META/misc_info.txt文件中

@build/core/Makefile
/*******************************************************
 root目录TARGET_ROOT_OUT
*/
//创建root下目录
LOCAL_POST_INSTALL_CMD := mkdir -p $(addprefix $(TARGET_ROOT_OUT)/, \
    sbin dev proc sys system data odm oem acct config storage mnt apex debug_ramdisk $(BOARD_ROOT_EXTRA_FOLDERS)); 
@system/core/rootdir/Android.mk




/*******************************************************
 ramdisk.img:(root目录TARGET_ROOT_OUT)
*/
BUILT_RAMDISK_TARGET := $(PRODUCT_OUT)/ramdisk.img

INSTALLED_RAMDISK_TARGET := $(BUILT_RAMDISK_TARGET)
$(INSTALLED_RAMDISK_TARGET): $(MKBOOTFS) $(INTERNAL_RAMDISK_FILES) $(INSTALLED_FILES_FILE_RAMDISK) | $(MINIGZIP)
	$(call pretty,"Target ram disk: $@")
	$(hide) $(MKBOOTFS) -d $(TARGET_OUT) $(TARGET_RAMDISK_OUT) | $(MINIGZIP) > $@

@build/core/Makefile
/*******************************************************
 boot.img:bootimage
*/
INSTALLED_KERNEL_TARGET := $(PRODUCT_OUT)/kernel
INSTALLED_RAMDISK_TARGET := $(BUILT_RAMDISK_TARGET):=$(PRODUCT_OUT)/ramdisk.img

INSTALLED_BOOTIMAGE_TARGET := $(PRODUCT_OUT)/boot.img
bootimage:$(INSTALLED_BOOTIMAGE_TARGET)
boot.img:kernel ramdisk.img


//kernel编译 sprd
{
TARGET_PREBUILT_KERNEL :=  $(KERNEL_OUT)/arch/$(TARGET_KERNEL_ARCH)/boot/Image

$(TARGET_PREBUILT_KERNEL) : $(KERNEL_OUT) $(USER_CONFIG)
	$(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=$(TARGET_KERNEL_ARCH) CROSS_COMPILE=$(KERNEL_CROSS_COMPILE) headers_install
	$(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=$(TARGET_KERNEL_ARCH) CROSS_COMPILE=$(KERNEL_CROSS_COMPILE) -j${JOBS}
	$(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=$(TARGET_KERNEL_ARCH) CROSS_COMPILE=$(KERNEL_CROSS_COMPILE) modules
	@-mkdir -p $(KERNEL_MODULES_OUT)
	@-find $(TARGET_OUT_INTERMEDIATES) -name *.ko | xargs -I{} cp {} $(KERNEL_MODULES_OUT)
}@device/sprd/pike2/common/AndroidKernel.mk


//编译out目录下 kernel 和dtb.img
{
// Compile Linux Kernel 
ifneq ($(strip $(TARGET_NO_KERNEL)),true)
-include device/sprd/pike2/common/AndroidKernel.mk
file := $(PRODUCT_OUT)/kernel
#ALL_PREBUILT += $(file)
$(file) : $(TARGET_PREBUILT_KERNEL) | $(ACP) $(transform-prebuilt-to-target)
endif 
// End of Kernel

// Compile dtb
ifeq ($(strip $(BOARD_KERNEL_SEPARATED_DT)),true)
include device/sprd/pike2/common/generate_dt_image.mk
endif 
// End of dtb
}@AndroidBoard.mk


/*******************************************************
 userdata:

*/
BUILT_USERDATAIMAGE_TARGET := $(PRODUCT_OUT)/userdata.img
INSTALLED_USERDATAIMAGE_TARGET := $(BUILT_USERDATAIMAGE_TARGET)
INSTALLED_USERDATAIMAGE_TARGET_DEPS :=  $(INTERNAL_USERIMAGES_DEPS)  $(INTERNAL_USERDATAIMAGE_FILES) $(BUILD_IMAGE_SRCS)
$(INSTALLED_USERDATAIMAGE_TARGET): $(INSTALLED_USERDATAIMAGE_TARGET_DEPS)
	$(build-userdataimage-target)

define build-userdataimage-target
  $(call generate-image-prop-dictionary, $(userdataimage_intermediates)/userdata_image_info.txt,userdata,skip_fsck=true)
  $(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH \
      build/make/tools/releasetools/build_image.py \
      $(TARGET_OUT_DATA) $(userdataimage_intermediates)/userdata_image_info.txt $(INSTALLED_USERDATAIMAGE_TARGET) $(TARGET_OUT)
endef

/*******************************************************
 cache
*/

BUILT_CACHEIMAGE_TARGET := $(PRODUCT_OUT)/cache.img
INSTALLED_CACHEIMAGE_TARGET := $(BUILT_CACHEIMAGE_TARGET)
$(INSTALLED_CACHEIMAGE_TARGET): $(INTERNAL_USERIMAGES_DEPS) $(INTERNAL_CACHEIMAGE_FILES) $(BUILD_IMAGE_SRCS)
	$(build-cacheimage-target)

define build-cacheimage-target
  $(call generate-image-prop-dictionary, $(cacheimage_intermediates)/cache_image_info.txt,cache,skip_fsck=true)
  $(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH \
      build/make/tools/releasetools/build_image.py \
      $(TARGET_OUT_CACHE) $(cacheimage_intermediates)/cache_image_info.txt $(INSTALLED_CACHEIMAGE_TARGET) $(TARGET_OUT)
  $(hide) $(call assert-max-image-size,$(INSTALLED_CACHEIMAGE_TARGET),$(BOARD_CACHEIMAGE_PARTITION_SIZE))
endef

/*******************************************************
 编译sdk：
*/
ALL_SDK_TARGETS := $(INTERNAL_SDK_TARGET)
sdk: $(ALL_SDK_TARGETS)
@main

INTERNAL_SDK_TARGET := $(sdk_dir)/$(sdk_name).zip@Makefile

1:
. build/envsetup.sh
lunch xx
make sdk

2:
make -j8 PRODUCT-sdk-sdk showcommands dist


//编译packages
user_MODULES：=user_PACKAGES：=$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_PACKAGES)


//生成密钥：
development/tools/make_key testkey  '/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'


查看密钥：
openssl x509 -noout -subject -issuer -in media.x509.pem
//属性文件生成：
# default.prop
一般在root/下，基本由build/core/main.mk设置ADDITIONAL_DEFAULT_PROPERTIES

# build.prop
- 由build/tools/buildinfo.sh 生成
- (mstar中加入的system.prop)
- ADDITIONAL_BUILD_PROPERTIES(core/main.mk设置)
//默认语言设置：
ro.product.locale.language@system.prop

# Whether there is default locale set in PRODUCT_PROPERTY_OVERRIDES(build/target/product/基本都不设置)
product_property_override_locale_language := $(strip \
    $(patsubst ro.product.locale.language=%,%,\
    $(filter ro.product.locale.language=%,$(PRODUCT_PROPERTY_OVERRIDES))))
product_property_overrides_locale_region := $(strip \
    $(patsubst ro.product.locale.region=%,%,\
    $(filter ro.product.locale.region=%,$(PRODUCT_PROPERTY_OVERRIDES))))

#将1中第一个字串的"_"替换成空格
define default-locale
$(subst _, , $(firstword $(1)))
endef

#如果product_property_override_locale_language为空则，返回参数“$1”中的第一个字串
define default-locale-language
$(if $(product_property_override_locale_language),,$(word 1, $(call default-locale, $(1))))
endef
define default-locale-region
$(if $(product_property_overrides_locale_region),,$(word 2, $(call default-locale, $(1))))
endef

PRODUCT_DEFAULT_LANGUAGE="$(call default-locale-language,$(PRODUCT_LOCALES))" 
PRODUCT_DEFAULT_REGION="$(call default-locale-region,$(PRODUCT_LOCALES))" 

设置系统属性@/tools/buildinfo.sh:
 echo "ro.product.locale.language=$PRODUCT_DEFAULT_LANGUA


//编译使用overlay：
　　PRODUCT_PACKAGE_OVERLAYS: used by a particular product
　　DEVICE_PACKAGE_OVERLAYS: used several products that share a common device model


/*******************************************************
 android soong  android.bp

*/

mk和bp装换工具out/soong/host/linux-x86/bin/androidmk


/*******************************************************
 预置apk
*/

priv-app //有特权的app PRIVATE_FLAG_PRIVILEGED

//px5 将当前目录下preinstall中apk,编译到目标app
python auto_generator.py ./ preinstall app

# Prebuild apps
ifeq ($(fytpp),y)
    $(shell python $(LOCAL_PATH)/auto_generator.py $(LOCAL_PATH) preinstall bundled_persist-app)
    $(shell python $(LOCAL_PATH)/auto_generator.py $(TARGET_DEVICE_DIR) preinstall_del bundled_uninstall_back-app)
    $(shell python $(LOCAL_PATH)/auto_generator.py $(TARGET_DEVICE_DIR) preinstall_del_forever bundled_uninstall_gone-app)
    -include $(TARGET_DEVICE_DIR)/preinstall/preinstall.mk
    -include $(TARGET_DEVICE_DIR)/preinstall_del/preinstall.mk
    -include $(TARGET_DEVICE_DIR)/preinstall_del_forever/preinstall.mk
endif

