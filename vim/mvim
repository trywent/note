/*****************************
 打开文件
*/
:e filepath
:find filename
//标签中打开文件
:tabe <filepath> //在tab中打开新文件
:tabn 		//切换窗口
:tabp
:tabfind filename

//窗口中打开文件
:sp <filepath>. //横分打开文件
:vs <filepath>  //竖分打开文件
:sf filename
Ctrl+W j/k//切换窗口

//窗口最大最小化
ctrl+super+上
ctrl+super+下

绝对值调整如下：
:resize num "将窗口的高度调整为num行
:res num "resize的缩写模式 与resize实现同样的功能 　　
:vertical resize num "将窗口的宽度调整为num列
:verticalres num "verticalresize的缩写模式 与verticalresize实现同样的功能
增量式调整如下：
:resize+num "将窗口的高度增加num行
:resize-num "将窗口的高度减少num行
:vertical resize+num "将窗口的宽度增加num列
:vertical resize-num "将窗口的宽度减少num列 

==================
//格式化
(1) 按两下小写g，即gg，定位光标到第一行。
(2) 按住Shift+v，即大写V，进入可视化编辑的列编辑模式。
(3) Shift+g，即大写G，选中整个代码。
(4) 按下等号=，格式化所有代码。

(1) gg=G 是一个自动缩进的命令 (在命令状态下直接输入，不需要输入冒号)，gg是文件首，G是文件尾，所以 gg=G 是整理全部代码。
(2) == 整理当行，加行数整理多行。
(3) ={ 或者 =i{ 整理一个代码块。
(4) mG=nG 当 m 不等于 n 的时候能完成从 m 行到 n 行的局部的缩进。例如，从80行缩进直到100行，你可以用 80G=100G，在命令状态下

====================
//vimrc
"----------------------------------设置对齐和缩进--------
"设置自动对齐，（和上一行）
set autoindent

"智能对齐
set smartindent

"使用c/c++语言的自动缩进方式
set cindent

"设置c/c++语言的具体缩进方式
set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s 

"空格代替制表符
set expandtab

"在行和段开始处使用制表符
set smarttab
set tabstop=4        " 设置制表符(tab键)的宽度
set softtabstop=4     " 设置软制表符的宽度    
set shiftwidth=4    " (自动) 缩进使用的4个空格

"自动补齐括号
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap { {}<ESC>i
inoremap < <><ESC>i

/*****************************
sudo apt install csope
sudo apt install ctags
*/

//ctags:
ctags -R *
ts
tp
tn

c++:
ctags -R --c++-kinds=+p --fields=+iaS --extra=+q

 

每个参数解释如下：

-R:ctags循环生成子目录的tags

--c++-kinds=+px :ctags记录c++文件中的函数声明和各种外部和前向声明

--fields=+iaS :ctags要求描述的信息，其中i表示如果有继承，则标识出父类；a表示如果元素是类成员的话，要标明其调用权限（即是public还是private）；S表示如果是函数，则标识函数的signature。

--extra=+q:强制要求ctags做如下操作—如果某个语法元素是类的一个成员，ctags默认会给其记录一行，可以要求ctags对同一个语法元斯屹记一行，这样可以保证在VIM中多个同名函数可以通过路径不同来区分。



ctrl ] //跳转到定义
ctrl t //跳转回来

//cscop:
cscope -Rbkq
- R 表示把所有子目录里的文件也建立索引
- b 表示cscope不启动自带的用户界面，而仅仅建立符号数据库
- q 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度
- k 在生成索引文件时，不搜索/usr/include目录


使用cs find 查找[3]  （也可以简化写成 cs f）后面添加需要得字符串类型：
c:Find functions calling this function//查找调用本函数的函数
d:Find functions called by this function //查找本函数调用的函数
e:Find this egrep pattern//查找egrep模式，相当于egrep功能，但查找速度快多了
f:Find this file //查找并打开文件，类似vim的find功能
g:Find this definition//查找函数、宏、枚举等定义的位置，类似ctags的功能
i:Find files #including this file //查找包含本文件的文件
s:Find this C symbol //查找C语言符号，即查找函数名、宏、枚举值等出现的地方
t:Find assignments to //查找指定的字符串
例如：使用cscope查找do_fork函数的定义,在vim命令行下执行 :cs f g do_fork
