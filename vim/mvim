/*
 打开文件
*/
:e filepath
//标签中打开文件
:tabe <filepath> //在tab中打开新文件
:tabn 		//切换窗口
:tabp

//窗口中打开文件
:sp <filepath>. //横分打开文件
:vs <filepath>  //竖分打开文件
Ctrl+W j/k//切换窗口

//窗口最大最小化
ctrl+super+上
ctrl+super+下

绝对值调整如下：
:resize num "将窗口的高度调整为num行
:res num "resize的缩写模式 与resize实现同样的功能 　　
:vertical resize num "将窗口的宽度调整为num列
:verticalres num "verticalresize的缩写模式 与verticalresize实现同样的功能
增量式调整如下：
:resize+num "将窗口的高度增加num行
:resize-num "将窗口的高度减少num行
:vertical resize+num "将窗口的宽度增加num列
:vertical resize-num "将窗口的宽度减少num列 

==================
//格式化
(1) 按两下小写g，即gg，定位光标到第一行。
(2) 按住Shift+v，即大写V，进入可视化编辑的列编辑模式。
(3) Shift+g，即大写G，选中整个代码。
(4) 按下等号=，格式化所有代码。

(1) gg=G 是一个自动缩进的命令 (在命令状态下直接输入，不需要输入冒号)，gg是文件首，G是文件尾，所以 gg=G 是整理全部代码。
(2) == 整理当行，加行数整理多行。
(3) ={ 或者 =i{ 整理一个代码块。
(4) mG=nG 当 m 不等于 n 的时候能完成从 m 行到 n 行的局部的缩进。例如，从80行缩进直到100行，你可以用 80G=100G，在命令状态下
==================
//光标
:gg //第一行

:G  //最后一行

:^ //行尾
:$ //行首

2w表示向后移动2个word；
2b表示向前移动2个word；
2e表示向后移动2个word，但是会移动到word字符之后。

==================
//需要系统复制可能要安装vim-gtk
y:  yank 复制

//复制一行
:yy

//复制3行
:3yy

//将6-9行的内容复制到12行
:6,9 co 12


//使用标记
:ma  //标记a
:mb
:mc
:'a,'b co 'c //复制ab内容到c。  co 改成m就是剪切

//系统剪贴板
:"+y //复制
:"+p //粘帖
====================
删除：
:dd

:2dd //删除2行

:d$  //删除到行首
:d^  //删除到行尾

====================
查找：
:* //查找光标所在单词

n //下一个
# //上一个
 
//搜索 / 下输入下面命令，粘贴复制的内容
/<ctrl+r> 0  
====================
撤销：
u

====================
//vimrc
"----------------------------------设置对齐和缩进--------
"设置自动对齐，（和上一行）
set autoindent

"智能对齐
set smartindent

"使用c/c++语言的自动缩进方式
set cindent

"设置c/c++语言的具体缩进方式
set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s 

"空格代替制表符
set expandtab

"在行和段开始处使用制表符
set smarttab
set tabstop=4        " 设置制表符(tab键)的宽度
set softtabstop=4     " 设置软制表符的宽度    
set shiftwidth=4    " (自动) 缩进使用的4个空格

"自动补齐括号
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap { {}<ESC>i
inoremap < <><ESC>i
