/**********************
 时钟，延时，延时队列

*/
<linux/jiffies.h>
/*
 Measuring time lapses and comparing times
 测量时间，比较时间
 */
kernel中使用硬件的时钟中断周期一般是 100-1000 hz。时钟有个计时器变量jiffies_64保存时钟出现中断的次数，系统启动时初始值为0。
<linux/param.h>
 HZ 	    //时钟每秒中断的次数。用户空间通过/proc/interrupts 和/proc/uptime可以计算
 
<linux/jiffies.h>
 jiffies_64 //中断计数变量。初始值为0
 jiffies    //程序访问的变量，jiffies_64的低有效位。原子快速的访问
 u64 get_jiffies_64(void); //获取64位计数器的值
int time_after(unsigned long a, unsigned long b);
int time_before(unsigned long a, unsigned long b);
int time_after_eq(unsigned long a, unsigned long b);
int time_before_eq(unsigned long a, unsigned long b);
 
 
#include <linux/time.h>
unsigned long timespec_to_jiffies(struct timespec *value);
void jiffies_to_timespec(unsigned long jiffies, struct timespec *value);
unsigned long timeval_to_jiffies(struct timeval *value);
void jiffies_to_timeval(unsigned long jiffies, struct timeval *value);

//更精确的计时TSC (timestamp counter),，从cpu寄存器读取。cpu的时钟周期“machine-specific registers”
<asm/msr.h>
rdtsc(low32,high32);
rdtscl(low32);
rdtscll(var64);

#include <linux/timex.h>
cycles_t get_cycles(void);
 
/*
 Knowing the current time
 获取当前现实时间
 */
#include <linux/time.h>
unsigned long mktime (unsigned int year, unsigned int mon,unsigned int day, unsigned int hour,
		unsigned int min, unsigned int sec);

#include <linux/time.h>
void do_gettimeofday(struct timeval *tv);

#include <linux/time.h>
struct timespec current_kernel_time(void);
/*
 Delaying operation for a specified amount of time
 
 延迟一段时间后操作
 */
//忙等待
while (time_before(jiffies, j1))
	cpu_relax( ); //可抢占内核中将cpu让出。不可抢占内核会一直执行。不建议使用


//让出cpu。但还是在可执行队列中。cpu的负载一直是最少有一个任务（当前的任务）
<linux/sched.h>
while (time_before(jiffies, j1)) {
 schedule( ); //释放cpu给其它可执行任务
}

//timeout。
#include <linux/wait.h>
wait_queue_head_t wait;
init_waitqueue_head (&wait);
wait_event_interruptible_timeout(wait, 0, delay);
long wait_event_timeout(wait_queue_head_t q, condition, long timeout);//加入等待队列的时延。由事件或者超时唤醒
long wait_event_interruptible_timeout(wait_queue_head_t q, condition, long timeout);


#include <linux/sched.h>
set_current_state(TASK_INTERRUPTIBLE);            //将进程状态设置为TASK_INTERRUPTIBLE (非RUNNING不会被再次执行）
signed long schedule_timeout(signed long timeout);//不加入队列的时延。参数jiffies。也是由timer实现

//短时延。纳秒，微秒，毫秒。都是忙等待
#include <linux/delay.h>
void ndelay(unsigned long nsecs);
void udelay(unsigned long usecs);
void mdelay(unsigned long msecs);

 //睡眠延迟（非忙等待）
void msleep(unsigned int millisecs);
unsigned long msleep_interruptible(unsigned int millisecs);
void ssleep(unsigned int seconds)

/*
 Kernel Timers 定时器。类似软中断
 timer运行在，与注册timer的进程相同cpu上。
*/
<linux/timer.h>
#include <linux/timer.h>
struct timer_list {
	/* ... */
	unsigned long expires;
	void (*function)(unsigned long);
	unsigned long data;
};
void init_timer(struct timer_list *timer);
struct timer_list TIMER_INITIALIZER(_function, _expires, _data);
void add_timer(struct timer_list * timer);
int del_timer(struct timer_list * timer);


//非进程上下文（中断上下文）
1 不能访问用户空间
2 current指针不能使用，没有关联到进程
3 不能sleep，不能schedule,不能调用导致睡眠的函数

<asm/hardirq.h>
in_interrupt()//返回一个非零值，说明是硬件中断，还是软中断
in_atomic()   //是否在中断上下文，是否有spinlock

//timer的实现
struct timer_list {
	struct hlist_node	entry;
	unsigned long		expires;
	void			(*function)(unsigned long);
	unsigned long		data;
}

 //每个cpu维护的变量。双向链表，保存不同时间段的timer
struct tvec {
	struct hlist_head vec[TVN_SIZE];//TVN_SIZE (1 << 6) 64
}
struct tvec_root {
	struct hlist_head vec[TVR_SIZE];//TVR_SIZE (1 << 8) 256
}
struct tvec_base {
	bool nohz_active;
	struct tvec_root tv1;//0-255 jiffies到期的timer 0-7位值有1
	struct tvec tv2;     //timer中expires 8-13位值有1
	struct tvec tv3;     //timer中expires 14-19位值有1
	struct tvec tv4;     //timer中expires 20-25位值有1
	struct tvec tv5;     //timer中expires 26-31位值有1
}

/*
 tasklet(软中断上下文，允许中断发生)
 通常在处理中断时使用(中断处理必须快速，其他工作可以放入tasklet中在将来某个时候执行)。
 运行在中断时间，运行在调度它们的cpu上，能够接收一个无符号长整形参数。
*/

#include <linux/interrupt.h>
struct tasklet_struct {
	void (*func)(unsigned long);
	unsigned long data;
};
void tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long), unsigned long data);
DECLARE_TASKLET(name, func, data);
DECLARE_TASKLET_DISABLED(name, func, data);

执行：
void tasklet_schedule(struct tasklet_struct *t);
void tasklet_hi_schedule(struct tasklet_struct *t) //高优先级执行，减少延时

void tasklet_disable(struct tasklet_struct *t);
void tasklet_disable_nosync(struct tasklet_struct *t);
void tasklet_enable(struct tasklet_struct *t);
void tasklet_schedule(struct tasklet_struct *t);
void tasklet_hi_schedule(struct tasklet_struct *t);
void tasklet_kill(struct tasklet_struct *t);


/*
 workqueue 进程上下文(工作进程)
 不同于tasklet是:tasklet快速，但必须是原子执行。workqueue延时较长，但不必原子。

 不能和用户空间交互数据（不能访问其它进程的地址）
*/
类似tasklet使工作在将来某个时刻执行。但有些不同：
-tasklet运行在软中段上下文，原子执行的。workqueue运行在内核进程中，可以睡眠。
-tasklet只能运行在提交它的cpu上。workqueue默认工作方式也是这样(应该可以改变)
-tasklet不能延迟指定时间执行。workqueue可以指定在某个间隔后执行


创建工作队列：
#include <linux/workqueue.h>
struct workqueue_struct *create_workqueue(const char *name); 	//每个处理器一个工作线程
struct workqueue_struct *create_singlethread_workqueue(const char *name); //只一个工作线程
DECLARE_WORK(name, void (*function)(void *), void *data); 	//创建工作：工作结构中包含要执行的函数，要传入的参数
INIT_WORK(struct work_struct *work, void (*function)(void *), void *data);
PREPARE_WORK(struct work_struct *work, void (*function)(void *), void *data);

int queue_work(struct workqueue_struct *queue, struct work_struct *work);//创建工作：工作结构中包含要执行的函数，要传入的参数
int queue_delayed_work(struct workqueue_struct *queue,struct work_struct *work, unsigned long delay);
int cancel_delayed_work(struct work_struct *work);		//取消工作
void flush_workqueue(struct workqueue_struct *queue);		//保证上面函数执行后工作不会在其它处理器被执行
void destroy_workqueue(struct workqueue_struct *queue);		//销毁workqueue

//共享队列(内核提供)：
INIT_WORK(struct work_struct *work, void (*function)(void *), void *data);
schedule_work(&work);
schedule();

int cancel_delayed_work(struct work_struct *work);
int schedule_delayed_work(struct work_struct *work, unsigned long delay);


__________________________________
异步进程的执行上下文，用来执行异步工作。将工作项加入到一个队列，一个独立线程执行队列中的工作。
工作队列中的工作项都被完成，工作线程进入空状态。一旦工作项被加入队列，工作线程开始执行。

多线程工作队列：每个cpu有一个工作线程
单线程工作队列：系统中只有一个工作线程

Concurrency Managed Workqueue (cmwq)
1，与原来的接口兼容
2，每个cpu的工作池由所有工作队列共享
3，自动调整工作池和并行

cmwq的组成：工作项，工作线程。
用户将子系统和驱动的工作加入到工作队列。(gcwq)后端结构管理线程池，处理队列中的工作

处理并行数(concurrency level)

————————————————————————————————————
api:
alloc_workqueue(name,flags,max_active)分配一个工作队列
max_active参数定义cpu最多同时执行的工作项个数。

