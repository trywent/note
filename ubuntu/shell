/***********************
 shell脚本

*/
#!/bin/bash          #表该脚本中的命令，用哪个shell执行

//执行scripts：
/path/to/script 	# 脚本中指定shell
/bin/sh /path/to/script # 命令在自己的shell中执行，当前shell的环境不受命令影响
. script        	# 类似将script中的命令拷贝到当前窗口执行。命令执行后的变量都在这个窗口中可用
source script   	# 与"."的作用相同

//if 判断：
if [ cmp ];then	
elif [ cmp ];then
else	
fi

comparison    Evaluated to true when	//数据比较
$a -lt $b    $a < $b
$a -gt $b    $a > $b
$a -le $b    $a <= $b
$a -ge $b    $a >= $b
$a -eq $b    $a is equal to $b
$a -ne $b    $a is not equal to $b

comparison    Evaluated to true when	//字符串比较
"$a" = "$b"     $a is the same as $b
"$a" == "$b"    $a is the same as $b
"$a" != "$b"    $a is different from $b
-z "$a"         $a is empty

-e filepath				//文件是否存在
-d dirpath				//文件夹是否存在
-r filepath				//文件是否可读


case "$variable" in			//switch
    "$condition1" )
        command...
    ;;
    "$condition2" )
        command...
    ;;
esac


//循环语句
for arg in [list]	//for
do
 command(s)...
done


while [ condition ]	//while
do
 command(s)...
done

//正则表达式：用来定义匹配模式

正则表达式包含以下:
字符集，保持字面意思的字符。

anchor(锚，如：^,$..),指定在文本中的某一行，正则表达式(RE)用来匹配字串
Modifiers. 用来扩展或缩小RE的匹配范围。包括星号(asterisk), 括号(brackets), 反斜杠(backslash)
星号 -- * -- 匹配任意数的重复字符。"1133*" 匹配: 113, 1133, 1133333
句号 -- . -- 匹配至少一个字符除了换行符。"13." : 1133, 11333, 不包括13
取反符 -- ^ -- 表示一行开头，或字串的取反
货币符 -- $ -- 在表达式的末尾，表示一行末尾。at the end of an RE matches the end of a line
方括号 -- [...] -- 包含要匹配的一个字符
"[xyz]" 匹配x, y, z其中之一
"[c-n]" 匹配从c到n范围的字符
"[B-Pk-y]" 匹配从B 到 P 和k 到 y的字符
"[a-z0-9]" 匹配小写字母或数字
"[^b-d]" 匹配不在 b到 d范围内的其他字符
The backslash -- \ -- 转义字符，是使字符不再是转义，而是表示字面意思
转义"尖括号" -- \<...\> -- 表示字串边界
问号 -- ? -- 匹配RE的0个或一个字符 
加号 -- + -- 匹配RE的一个或多个字符.与*类似，但不匹配0个
转义花括号 -- \{ \} -- 指明匹配数字的个数。[0-9]\{5\}匹配5个数字
小括号 -- ( ) -- 限定RE范围
或符号 -- | -- 匹配任一可选的匹配字符

//变量：
var="xxx"   //变量名紧接=，值也紧随=，中间没有空格
var=${x,,}  //输出小写字符串，使用一个","只转换首字符
var=${x^^}  //输出大写字符串，使用一个"^"只转换首字符

//特殊变量：
$0：当前脚本的文件名
$num：num为从1开始的数字，$1是第一个参数，$2是第二个参数，${10}是第十个参数
$#：传入脚本的参数的个数
$*：所有的位置参数(作为单个字符串) 
$@：所有的位置参数(每个都作为独立的字符串)。
$?：当前shell进程中，上一个命令的返回值，如果上一个命令成功执行则$?的值为0，否则为其他非零值，常用做if语句条件
$$：当前shell进程的pid
$!：后台运行的最后一个进程的pid
$-：显示shell使用的当前选项
$_：之前命令的最后一个参数
