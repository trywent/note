/*******************
 git4种协议：本地(/path/to/dir/)，ssh，Git，HTTP

*/

git clone git://user@server/gitrepo
git clone ssh://user@server/gitrepo
git clone http://user@server/gitrepo
git clone file://user@server/gitrepo

//服务器端：
$ cd /srv/git
$ mkdir project.git
$ cd project.git
$ git init --bare	//--bare 无工作目录
Initialized empty Git repository in /srv/git/project.git/


//用户端：
# on John's computer
$ cd myproject
$ git init
$ git add .
$ git commit -m 'initial commit'
$ git remote add origin git@gitserver:/srv/git/project.git
$ git push origin master

//配置
git config core.autocrlf false
git config --global user.name "Your Name"
git config --global user.email you@example.com

//拷贝已有的仓库
git clone git:地址  mProject


/*******************
   管理文件
   三种状态：modified，staged，committed，
*/

//查看，加入，删除文件
git status           		//文件状态
git diff              		//查看未暂存的被修改文件
git diff --cached    		//查看已暂存的被修改文件
git diff --name-only  		//只查看名字
git diff hash1 hash1 --stat  	//查看两个提交间的差异
git add <file>          	//跟踪新文件
git add -f            		//强制加入ignore文件
git add <modifiedfile>  	//暂存文件
git rm   <file>            	//移除文件，
git rm --cached  <file>    	//只从仓库中移除文件，不跟踪。不删除文件     
git mv  <filesrc>  <filedst> 	//移动文件

//提交文件  可以加-m “说明” 。加 -a 跳过暂存直接提交
git commit            		


//查看提交历史
git log               
git log -p  -num      		//-p查看提交的差异，-num查看最近几次的差异
git log --pretty=oneline  file  //列出文件的修改
git log --stat         		//列出修改的文件名
git log --stat=num         	//列出修改的文件名，指定文件名长度
git log -p filename   		//内容
git log --all --grep="xxx" 	//查看修改的标记
git config log.date iso   //显示时间格式
git log --before="Fri Mar 24"
git log --author=""

//撤销修改：
git reset --hard commit_id 	//撤销提交
git commit --amend    		//修改最后一次的提交，(前面的提交，不需要再取出来)
git reset HEAD <file>  		//取消对文件的暂存
git checkout -- <file> 		//撤销对文件的修改(返回到原来的版本)
git reset xxxxxxxxxxx <file> 	//恢复到特定版本
git checkout xxxhashnum  file
git revert <commit log string> 	//撤销某次提交



//撤销add：
git rm -r --cached <added_file_to_undo>

/*
 git补丁
*/
git format-patch -n <sha> 			//生成从<sha>开始的n个提交的补丁
git diff old_commit new_commit dir > xx.patch   //生成new 和 old之间的dir文件夹的补丁
git apply xx.patch				//打入补丁
git apply -p2 xx
git apply --whiteSpace=fix xx.patch
patch -p1 <xx.patch 				//git apply 不行就用patch 


/*
 合并
*/
git checkout master
git pull origin master
git merge test
git push origin master

//合并某次提交
git cherry-pick commitd 

//合并部分文件：
git checkout B_branch
git checkout A_branch files
git add files
//合并冲突
git checkout --ours   //保留本地的
git checkout --theirs //保留远程的

/* 
 储藏当前分支的修改
*/
git stash		//将当前的修改文件储存
git stash --all 	//将所有文件储存，包括untracked file
git stash list 		//查看储存
git stash apply		//应用上一个储存
git stash apply stash@{num} //应用某一个储存
git stash drop 		//移除储存 
git stash pop 		//应用并移除 
git stach    		//save uncommitted changes
git stash pop  		//apply last stash and remove it from the list


/*******************
 仓库和分支
 
*/
//远程仓库
git remote     				//查看远程仓库名
git remote -v  				//查看远程仓库名子，地址
git remote add [shortname] [url]	//添加远程仓库
git remote set-url xxxx name
git fetch [remote-name]  		//从远程仓库获取本地没有的数据(更新)
git push [remote-name] [branch-name]	//推送数据到远程仓库
git remote show [remote-name] 		//查看远程仓库信息
git remote rename <name> <toname>	//重命名
git remote rm <file> 			//删除仓库
git ls-remote --heads <remote-name>  	//列出远程分支

//获取所有分支
git fetch origin
git fetch --all
git pull --all  //更新所有分支

//分支branch
git branch testing           		//创建分支
git branch -a                		//列出所有分支
git branch -r  				//列出远程分支
git checkout testing         		//切换分支
git branch -d xxx            		//删除local分支
git push origin --delete <branch_name>  //删除remote分支

//获取远程(origin)分支
git checkout --track  origin/branch_name
git checkout -b test  origin/test

//标签(TAG)可以定位，某一时间的代码版本。管理多次修改的代码
git tag              			//列出标签
git tag -l "pattern" 			//列出指定(pattern)的标签
git tag -a v1.4 -m 'my version 1.4'	//打包含附注的标签
git tag v1.4-lw          		//打轻量级标签
git show <tag>          		//列出指定标签的版本信息


git reset --hard origin/master

/* git多个远程仓库：

*/
//有以下远程分支
[remote "GitHub"]
    url = git@github.com:elliottcable/Paws.o.git
    fetch = +refs/heads/ *:refs/remotes/GitHub/ *
[branch "Master"]
    remote = GitHub
    merge = refs/heads/Master
[remote "Codaset"]
    url = git@codaset.com:elliottcable/paws-o.git
    fetch = +refs/heads/ *:refs/remotes/Codaset/ *
[remote "Paws"]
    url = git@github.com:Paws/Paws.o.git
    fetch = +refs/heads/ *:refs/remotes/Paws/ *
… to create a merged‐remote for "Paws" and "Codaset", I can add the following after all of those:
//将远程分支合并。执行 git push Origin时会同时更新github,codaset
[remote "Origin"]
    url = git@github.com:Paws/Paws.o.git
    url = git@codaset.com:elliottcable/paws-o.git


