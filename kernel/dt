/****************** 
 DTS(device tree source)
 DTB(Device tree blob/binary)
 DTC (Device Tree Compiler) 
 https://elinux.org/Device_Tree_Usage

 手动创建一个dtb
 $ dtc -O dtb -o filename.dtb -I dts filename.dts 

*/
Linux uses DT data for three major purposes:
1) platform identification,
2) runtime configuration, and
3) device population.


//编译


/* 
 deviceTree 书写规则
*/

/ {
    node1 {
        a-string-property = "A string";
        a-string-list-property = "first string", "second string";
        // hex is implied in byte arrays. no '0x' prefix is required
        a-byte-data-property = [01 23 34 56];
        child-node1 {
            first-child-property;
            second-child-property = <1>;
            a-string-property = "Hello, world";
        };
        child-node2 {
        };
    };
    node2 {
        an-empty-property;
        a-cell-property = <1 2 3 4>; /* each number (cell) is a uint32 */
        child-node1 {
        };
    };
};

根节点："/"  
子节点："node1" "node20"
属性：
 string-property = "a string"            //字符属性
 cell-property = <0xbeef 123 0xabcd1234> //32bit unsigend int 属性组
 binary-property = [0x01 0x23 0x45 0x67] //二进制属性组
 mixed-property = "a string", [0x01 0x23 0x45 0x67], <0x12345678> //混合属性
 string-list = "red fish", "blue fish"   //字符属性表

//一个dt的配置
compatible = "xxx,xxx"   //该属性用于区分一个节点，一个设备。驱动根据这个匹配
节点名                   //节点格式名字+地址 <name>[@<unit-address>] 。地址一般会写在节点的reg属性中
设备                     //

//地址
reg  = <address1 length1 [address2 length2] [address3 length3] ... >
#address-cells          //reg中地址的个数。如总线中设备号 + 地址
#size-cells             //reg地址的大小个数

Ranges (Address Translation):
	ranges = <0 0  0x10100000   0x10000     // Chipselect 1, Ethernet
        	  1 0  0x10160000   0x10000     // Chipselect 2, i2c controller
        	  2 0  0x30000000   0x1000000>; // Chipselect 3, NOR Flash

//中断
interrupt-controller    //中断控制器？
#interrupt-cells = <2>  //interrupt specifiers中的个数
interrupt-parent
interrupts = <1 0>      //<interrupt specifiers>   1标示中断号 0中断触发电平
//aliases节点：
- 

//chosen节点
- 不代表设备,用于传递数据

//保留内存
/memreserve/


/****************** 
 kernel匹配dts
*/
setup_arch@setup.c-->setup_machine_fdt@devtree.c-->for_each_machine_desc(寻找合适的dts)
__arch_info_begin@arch.h-->/*spreadtrum*/DT_MACHINE_START(SCPHONE, "sc8830")@mach-scx35-dt.c


arch/arm/kernel/setup.c
arch/arm/kernel/devtree.c
arch/arm/include/asm/mach/arch.h



//compatible "<manufacturer>,<model>"
系统用来匹配对应的驱动
===========


setup_arch{
- setup_machine_fdt@devtree.c //获取machine，bootcmd，meminfo信息
- 
- unflatten_device_tree-->unflatten_dt_node
- 
- machine_desc                //返回machine的指针
}@setup.c

//从dtb中生成platform_device
arch_initcall(customize_machine)-->__define_initcall("3")-->
customize_machine-->machine_desc->init_machine@setup.c-->of_platform_populate@platform.c

arch/arm/kernel/setup.c
drivers/of/fdt.c
/*
 获取信息接口
*/

//根据名字获取子节点
struct device_node *of_get_child_by_name(const struct device_node *node,const char *name)


//获取np中子节点list_name中包含的，cells_name的节点。返回值在out_args
int of_parse_phandle_with_args(const struct device_node *np, const char *list_name,
	const char *cells_name, int index,struct of_phandle_args *out_args)

drivers/of/base.c




