/***********************************
 gadget  usb作为从设备时的驱动集合

*/
udc(usb device controller)管理和设置设备功能

struct usb_udc {
	struct usb_gadget_driver	*driver;
	struct usb_gadget		*gadget;
	struct device			dev;
	struct list_head		list;
	bool				vbus;
}

//加入udc
usb_add_gadget_udc(struct device *parent, struct usb_gadget *gadget)-->
usb_add_gadget_udc_release(struct device *parent, struct usb_gadget *gadget,void (*release)(struct device *dev)){

}@core.c

//关联udc
usb_gadget_probe_driver(struct usb_gadget_driver *driver){
- struct usb_udc		*udc = NULL
- list_for_each_entry(udc, &udc_list, list) {	//udc_list中查找
	- ret = strcmp(driver->udc_name, dev_name(&udc->dev));
	- if (!ret)break;
	}
- udc_bind_to_driver(udc, driver){
	- udc->driver = driver
	- driver->bind(udc->gadget, driver)
	- usb_gadget_udc_start(udc)
	- usb_udc_connect_control(udc)
	- kobject_uevent(&udc->dev.kobj, KOBJ_CHANGE)
	}
}@core.c


drivers/usb/gadget/udc/core.c
/******
 function 

*/
usb_add_function(struct usb_configuration *config,struct usb_function *function){
-
- 
}@composite.c


drivers/usb/gadget/composite.c

