/*
 otg
*/

usb2: usb2@e2500000 {
 compatible  = "sprd,usb-v2.0"
}@sc9853i.dts

//driver
module_init(dwc_otg_driver_init)-->dwc_otg_driver_init{
- platform_driver_probe(&dwc_otg_driver, dwc_otg_driver_probe)//"sprd,usb-v2.0"
- driver_create_file(&dwc_otg_driver.driver, &driver_attr_version)
}@dwc_otg_driver.c


//检测到设备
dwc_otg_driver_probe(struct platform_device *_dev){
- dwc_otg_device_t *dwc_otg_device = dwc_alloc(sizeof(dwc_otg_device_t))
- platform_set_drvdata(_dev, dwc_otg_device)
  //dwc_otg_core_if_t
- dwc_otg_device->core_if = dwc_otg_cil_init(dwc_otg_device->os_dep.base){
	- dwc_otg_core_if_t *core_if = DWC_ALLOC(sizeof(dwc_otg_core_if_t))
	- core_if->core_global_regs = (dwc_otg_core_global_regs_t *) reg_base
	- dwc_otg_dev_if_t *dev_if = DWC_ALLOC(sizeof(dwc_otg_dev_if_t))
	- dwc_otg_host_if_t *host_if = DWC_ALLOC(sizeof(dwc_otg_host_if_t))
	  //工作队列
	- core_if->wq_otg = DWC_WORKQ_ALLOC("dwc_otg")
	- core_if->wkp_timer = DWC_TIMER_ALLOC("Wake Up Timer", w_wakeup_detected, core_if)
	}@dwc_otg_cil.c
- dwc_otg_attr_create(_dev)
  //中断处理
- request_irq(irq, dwc_otg_common_irq)
- dwc_otg_core_init(dwc_otg_device->core_if)
  //PCD
- pcd_init(_dev)
- udc_disable
  //HCD
- udc_enable(USB_DR_MODE_HOST)
- hcd_init(_dev)
}@dwc_otg_driver.c



//中断处理
dwc_otg_common_irq(int irq, void *dev)-->dwc_otg_handle_common_intr(otg_dev->core_if)@dwc_otg_driver.c
dwc_otg_handle_common_intr(dwc_otg_core_if_t *core_if){
- 
- if (gintsts.b.wkupintr) {
	- retval |= dwc_otg_handle_wakeup_detected_intr(core_if);
	}
}@dwc_otg_cil_intr.c

dwc_otg_handle_wakeup_detected_intr{
- if (dwc_otg_is_device_mode(core_if)) {//device
 	- 	
  }else{//host
	- pcgcctl.b.stoppclk = 1
	- DWC_TIMER_SCHEDULE(core_if->wkp_timer, 71)-->w_wakeup_detected
  }
}@dwc_otg_cil_intr.c

w_wakeup_detected(void *p){
- dwc_otg_core_if_t *core_if = (dwc_otg_core_if_t *) p
  //读取端口状态
- hprt0_data_t hprt0 = {.d32 = 0 }
- hprt0.d32 = dwc_otg_read_hprt0(core_if)
- cil_hcd_resume(core_if){
	- core_if->hcd_cb->resume_wakeup
	}
- core_if->lx_state = DWC_OTG_L0;
}@dwc_otg_cil_intr.c


/*
 Peripheral Controller Driver (PCD).usb外围

 
*/
pcd_init(struct platform_device *_dev){
- dwc_otg_device_t *otg_dev = platform_get_drvdata(_dev)
- otg_dev->pcd = dwc_otg_pcd_init(otg_dev->core_if){
	- dwc_otg_pcd_t *pcd = DWC_ALLOC(sizeof(dwc_otg_pcd_t))
	}@dwc_otg_pcd.c
  //gadget Wrapper
- gadget_wrapper = alloc_wrapper(_dev){
	- struct gadget_wrapper *d = dwc_alloc(sizeof(*d))
	- d->gadget.name = "dwc_otg"
	- d->gadget.ops = &dwc_otg_pcd_ops
	}
  //初始化endpoint
- gadget_add_eps(gadget_wrapper){
	- ep->name
	- ep->ops = (struct usb_ep_ops *)&dwc_otg_pcd_ep_ops
	}
  //cable,usb线
- INIT_DELAYED_WORK(&gadget_wrapper->cable2pc, cable2pc_detect_works)
- gadget_wrapper->cable2pc_wq = create_singlethread_workqueue("USB2pcWq")
  //
- INIT_WORK(&gadget_wrapper->detect_work, usb_detect_works)
- gadget_wrapper->detect_wq = create_singlethread_workqueue("USBDetectWq")
- dwc_otg_pcd_start(gadget_wrapper->pcd, &fops)
}@dwc_otg_pcd_linux.c


//gadget warpper
struct gadget_wrapper {
	dwc_otg_pcd_t *pcd;

	struct usb_gadget gadget;
	struct usb_gadget_driver *driver;

	struct usb_ep ep0;
	struct usb_ep in_ep[16];
	struct usb_ep out_ep[16];
}

//udcpower
DRIVER_ATTR(udcpower,dbg_udc_power_set)


pullup(

__udc_shutdown

/*
 HCD (Host Controller Device).usb主控
*/
hcd_init(struct platform_device *_dev){
- dwc_otg_device_t *otg_dev = platform_get_drvdata(_dev)
- struct usb_hcd * hcd = usb_create_hcd(&dwc_otg_hc_driver, &_dev->dev, dev_name(&_dev->dev))
- dwc_otg_hcd_t *dwc_otg_hcd = dwc_otg_hcd_alloc_hcd()
  //初始化dwc_otg_hcd_t，设置回调处理函数
- dwc_otg_hcd_init(dwc_otg_hcd, otg_dev->core_if){
	- hcd->core_if = core_if
	- dwc_otg_cil_register_hcd_callbacks(hcd->core_if,&hcd_cil_callbacks, hcd)-->core_if->hcd_cb = cb//回调
	  //定时器，任务
	- hcd->conn_timer = DWC_TIMER_ALLOC("Connection timer",dwc_otg_hcd_connect_timeout, 0)
	- hcd->reset_tasklet = DWC_TASK_ALLOC("reset_tasklet", reset_tasklet_func, hcd)
	}@dwc_otg_hcd.c
- usb_add_hcd(hcd, irq, IRQF_SHARED | IRQF_NO_SUSPEND)
  //检测连接
- DWC_WORKQ_SCHEDULE_DELAYED(otg_dev->core_if->wq_otg, usb_otg_cable_detect_work, otg_dev, 500, "OTG cable connect state change")
}@dwc_otg_hcd_linux.c

//回调
static dwc_otg_cil_callbacks_t hcd_cil_callbacks = {
	.start = dwc_otg_hcd_start_cb,
	.stop = dwc_otg_hcd_stop_cb,
	.disconnect = dwc_otg_hcd_disconnect_cb,
	.session_start = dwc_otg_hcd_session_start_cb,
	.resume_wakeup = dwc_otg_hcd_rem_wakeup_cb,
}@dwc_otg_hcd.c


kernel/drivers/staging/sprd_usb/dwc_otg_hcd_linux.c
kernel/drivers/staging/sprd_usb/dwc_otg_hcd.c
/*
 UDC (USB Device Controller).usb设备
*/




/*
 power
*/
rpm_idle@runtime.c-->usb_device_pm_ops.runtime_idle@usb.c-->usb_runtime_idle@driver.c
-->pm_runtime_autosuspend@pm_runtime.h-->__pm_runtime_suspend@runtime.c-->usb_runtime_suspend
-->usb_suspend_both{
- usb_suspend_device
- suspend失败，usb_resume_interface
}@driver.c



kick_hub_wq-->queue_work(hub_wq, &hub->events)-->hub_event@hub.c

kernel/drivers/staging/sprd_usb/dwc_otg_driver.c
kernel/drivers/staging/sprd_usb/dwc_otg_cil_intr.c
kernel/drivers/staging/sprd_usb/dwc_otg_pcd_linux.c
kernel/drivers/staging/sprd_usb/dwc_otg_pcd.c
kernel/drivers/staging/sprd_usb/dwc_otg_hcd_linux.c
kernel/drivers/staging/sprd_usb/usb_hw.c

