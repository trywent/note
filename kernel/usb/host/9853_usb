/*
 usb设备
*/

usb2: usb2@e2500000 {
 compatible  = "sprd,usb-v2.0"
}@sc9853i.dts

//driver
dwc_otg_driver_init{
- platform_driver_probe(&dwc_otg_driver, dwc_otg_driver_probe)//"sprd,usb-v2.0"
- driver_create_file(&dwc_otg_driver.driver, &driver_attr_version)
}@dwc_otg_driver.c

dwc_otg_driver_probe(struct platform_device *_dev){
- dwc_otg_device_t *dwc_otg_device = dwc_alloc(sizeof(dwc_otg_device_t))
- platform_set_drvdata(_dev, dwc_otg_device)
- dwc_otg_attr_create(_dev)
- request_irq(irq, dwc_otg_common_irq)
- dwc_otg_core_init(dwc_otg_device->core_if)
  //PCD
- pcd_init(_dev)
- udc_disable
  //HCD
- udc_enable(USB_DR_MODE_HOST)
- hcd_init(_dev)
}@dwc_otg_driver.c


/*
 Peripheral Controller Driver (PCD).usb外围

 
*/
pcd_init(struct platform_device *_dev){
- dwc_otg_device_t *otg_dev = platform_get_drvdata(_dev)
- otg_dev->pcd = dwc_otg_pcd_init(otg_dev->core_if){
	- dwc_otg_pcd_t *pcd = DWC_ALLOC(sizeof(dwc_otg_pcd_t))
	}@dwc_otg_pcd.c
  //gadget Wrapper
- gadget_wrapper = alloc_wrapper(_dev){
	- struct gadget_wrapper *d = dwc_alloc(sizeof(*d))
	- d->gadget.name = "dwc_otg"
	- d->gadget.ops = &dwc_otg_pcd_ops
	}
  //初始化endpoint
- gadget_add_eps(gadget_wrapper){
	- ep->name
	- ep->ops = (struct usb_ep_ops *)&dwc_otg_pcd_ep_ops
	}
  //cable,usb线
- INIT_DELAYED_WORK(&gadget_wrapper->cable2pc, cable2pc_detect_works)
- gadget_wrapper->cable2pc_wq = create_singlethread_workqueue("USB2pcWq")
  //
- INIT_WORK(&gadget_wrapper->detect_work, usb_detect_works)
- gadget_wrapper->detect_wq = create_singlethread_workqueue("USBDetectWq")
- dwc_otg_pcd_start(gadget_wrapper->pcd, &fops)
}@dwc_otg_pcd_linux.c


//gadget warpper
struct gadget_wrapper {
	dwc_otg_pcd_t *pcd;

	struct usb_gadget gadget;
	struct usb_gadget_driver *driver;

	struct usb_ep ep0;
	struct usb_ep in_ep[16];
	struct usb_ep out_ep[16];
}

//udcpower
DRIVER_ATTR(udcpower,dbg_udc_power_set)


pullup(

__udc_shutdown

/*
 HCD (Host Controller Device).usb主控
*/

kernel/drivers/staging/sprd_usb/dwc_otg_driver.c
kernel/drivers/staging/sprd_usb/dwc_otg_pcd_linux.c
kernel/drivers/staging/sprd_usb/dwc_otg_pcd.c
kernel/drivers/staging/sprd_usb/dwc_otg_hcd_linux.c
kernel/drivers/staging/sprd_usb/usb_hw.c

/*
 UDC (USB Device Controller).usb设备
*/

/*
 power
*/
rpm_idle@runtime.c-->usb_device_pm_ops.runtime_idle@usb.c-->usb_runtime_idle@driver.c
-->pm_runtime_autosuspend@pm_runtime.h-->__pm_runtime_suspend@runtime.c-->usb_runtime_suspend
-->usb_suspend_both{
- usb_suspend_device
- suspend失败，usb_resume_interface
}@driver.c



kick_hub_wq-->queue_work(hub_wq, &hub->events)-->hub_event@hub.c

kernel/drivers/base/power/runtime.c
kernel/drivers/usb/core/usb.c
kernel/drivers/usb/core/driver.c
kernel/drivers/usb/core/hub.c

kernel/drivers/power/sprd_2731_charge.c
