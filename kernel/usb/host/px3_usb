/*
 usb host
*/
//host驱动注册:
dwc_otg_driver_init{
- platform_driver_register(&dwc_otg_driver)		//"usb20_otg"
- 若是2.0，platform_driver_register(&host20_driver) //"usb20_host"
- 若是1.1，platform_driver_register(&host11_driver) 
}@dwc_otg_driver.c

//host设备注册：
arch_initcall(usbdev_init_devices){
- platform_device_register(&device_usb20_otg) //"usb20_otg" 
- platform_device_register(&device_usb20_host) //"usb20_host"
}@usbdev_rk30.c

/* 
 otg设备初始化：创建otg设备dwc_otg_device_t * dwc_otg_device
 
 otg可以设置为主，从

*/
dwc_otg_driver_probe(struct platform_device *pdev){
- struct device *dev = &pdev->dev
- struct dwc_otg_platform_data *pldata = dev->platform_data
  //
- pldata->hw_init()@dwc_otg_driver.c-->usb20otg_pdata.hw_init
	usb20otg_hw_init-->gpio_direction_output(RK3066B_OTG_DRV_VBUS)@usbdev_rk30.c
  //创建并初始化主控设备
- dwc_otg_device_t * dwc_otg_device = kmalloc(sizeof(dwc_otg_device_t), GFP_KERNEL)
- res_base = platform_get_resource(pdev, IORESOURCE_MEM, 0)
- dwc_otg_device->base =  ioremap(res_base->start,res_base->end-res_base->start+1) //寄存器地址
  //设置控制器接口结构体。寄存器
- dwc_otg_device->core_if = dwc_otg_cil_init( dwc_otg_device->base, &dwc_otg_module_params){
	- dwc_otg_core_if_t *core_if = kmalloc( sizeof(dwc_otg_core_if_t), GFP_KERNEL)
	  //设备模式接口
	- dwc_otg_dev_if_t *dev_if =kmalloc( sizeof(dwc_otg_dev_if_t), GFP_KERNEL)
	  //主模式接口
	- dwc_otg_host_if_t *host_if = kmalloc( sizeof(dwc_otg_host_if_t), GFP_KERNEL)
	}@dwc_otg_cil.c
- dwc_otg_attr_create(dev)
  //注册中断处理
- irq = platform_get_irq(to_platform_device(dev),0)
- request_irq(irq, dwc_otg_common_irq... )
  //初始化主控
- dwc_otg_hcd_init
  //初始化从设备
- dwc_otg_pcd_init
- dwc_otg_enable_global_interrupts( dwc_otg_device->core_if )
}@dwc_otg_driver.c

//创建主控设备struct usb_hcd *hcd。dwc_otg_hcd_t *dwc_otg_hcd
dwc_otg_hcd_init(struct device *dev){
- dwc_otg_device_t *otg_dev = (dwc_otg_device_t *)(*((uint32_t *)dev->platform_data))
- struct usb_hcd *hcd = usb_create_hcd(&dwc_otg_hc_driver, dev, dev_name(dev))
- dwc_otg_hcd_t *dwc_otg_hcd = hcd_to_dwc_otg_hcd(hcd)
- dwc_otg_cil_register_hcd_callbacks(otg_dev->core_if,&hcd_cil_callbacks, hcd)
  //创建channel
- num_channels = dwc_otg_hcd->core_if->core_params->host_channels
- for (i = 0; i < num_channels; i++) {
	- channel = kmalloc(sizeof(dwc_hc_t), GFP_ATOMIC)
	- dwc_otg_hcd->hc_ptr_array[i] = channel
	}
  //加入hcd
- usb_add_hcd(hcd, platform_get_irq(to_platform_device(dev), 0),IRQF_SHARED)
}@dwc_otg_hcd.c

//从设备初始化
dwc_otg_pcd_init(struct device *dev){
- 
}@dwc_otg_pcd.c

kernel/drivers/usb/dwc_otg/dwc_otg_pcd.c
/* 
 host20设备初始化：
*/
host20_driver_probe(struct platform_device *pdev){
- struct device *dev = &pdev->dev
- struct dwc_otg_platform_data *pldata = dev->platform_data
- dwc_otg_device_t *dwc_otg_device = kmalloc(sizeof(dwc_otg_device_t), GFP_KERNEL)
- res_base = platform_get_resource(pdev, IORESOURCE_MEM, 0)
- dwc_otg_device->base = ioremap(res_base->start,res_base->end-res_base->start+1)
- dwc_otg_device->core_if = dwc_otg_cil_init( dwc_otg_device->base,&host20_module_params)
  //创建文件
- dwc_otg_attr_create(dev)
- device_create_file(dev, &dev_attr_enable)
- irq = platform_get_irq(to_platform_device(dev),0)
- request_irq(irq, dwc_otg_common_irq,IRQF_SHARED, "dwc_otg", dwc_otg_device )
  //初始化，设置寄存器值
- dwc_otg_core_init( dwc_otg_device->core_if )
- host20_hcd_init(dev)
}@dwc_otg_driver.c


//主设备初始化
host20_hcd_init(struct device *dev){
- dwc_otg_device_t *otg_dev = (dwc_otg_device_t *)(*((uint32_t *)dev->platform_data))
- struct usb_hcd *hcd = usb_create_hcd(&host20_hc_driver, dev, dev_name(dev))
  //
- dwc_otg_hcd_t * dwc_otg_hcd = hcd_to_dwc_otg_hcd(hcd)
- dwc_otg_cil_register_hcd_callbacks(otg_dev->core_if,&host20_cil_callbacks, hcd)
  //注册设备
- usb_add_hcd(hcd, platform_get_irq(to_platform_device(dev), 0),IRQF_SHARED)
}@dwc_otg_hcd.c

//中断处理：
dwc_otg_common_irq{
- 处理函数，dwc_otg_handle_common_intr{
	
	}@dwc_otg_cil_intr.c
}@dwc_otg_driver.c

kernel/drivers/usb/dwc_otg/usbdev_rk30.c
kernel/drivers/usb/dwc_otg/dwc_otg_hcd.c
kernel/drivers/usb/dwc_otg/dwc_otg_driver.c
kernel/drivers/usb/dwc_otg/dwc_otg_cil.c
===============
//sleep
usb_suspend_both-->usb_suspend_device-->udriver->suspend(@driver.c-->usb_generic_driver.suspend-->
generic_suspend@generic.c-->hcd_bus_suspend-->hcd->driver->bus_suspend@hcd.c-->dwc_otg_hcd_suspend


pldata->phy_suspend-->usb20host_phy_suspend@usbdev_rk30.c



host20_hcd_init-->mod_timer(&dwc_otg_hcd->connect_detect_timer-->dwc_otg_hcd_connect_detect-->
schedule_delayed_work(&dwc_otg_hcd->host_enable_work)-->dwc_otg_hcd_enable@dwc_otg_hcd.c








