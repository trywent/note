/***********************
 asoc数据结构
 dai_link(接口信息)将codec_dai,cpu_dai关联起来。

 dirver developer设置:
	struct snd_soc_dai_link     cpu,codec连接关系
	struct snd_soc_codec_driver codec驱动
	struct snd_soc_dai_driver   dai驱动
*/
struct snd_soc_dai_link{   //dai_link定义了一些dai的对应关系
	const char *name;			
	const char *cpu_name;
	struct device_node *cpu_of_node;
	const char *cpu_dai_name;//cpu_dai名字
	const char *codec_name;
	struct device_node *codec_of_node;
	const char *codec_dai_name; //codec_dai名字
	struct snd_soc_dai_link_component *codecs
	const struct snd_soc_ops *ops;
	const struct snd_soc_compr_ops *compr_ops;
}
struct snd_soc_codec {
	struct device *dev;
	const struct snd_soc_codec_driver *driver
	struct snd_soc_component component
}@soc.h

struct snd_soc_codec_driver {
	int (*probe)(struct snd_soc_codec *);
	struct snd_soc_component_driver component_driver;
	const struct snd_kcontrol_new *controls;
	const struct snd_soc_dapm_widget *dapm_widgets  //小部件,control中的控制值接口
	const struct snd_soc_dapm_route *dapm_routes
}@soc.h


struct snd_soc_dai {
	const char *name;
	struct snd_soc_dai_driver *driver;
	struct snd_soc_platform *platform;
	struct snd_soc_codec *codec;
	struct snd_soc_card *card;
}@soc.h
struct snd_soc_dai_driver{ //cpu_dai cpu侧提供给上层接口//codec_dai codec模块接口
	const char *name;
	const struct snd_soc_dai_ops *ops;
	struct snd_soc_pcm_stream capture; //采集
	struct snd_soc_pcm_stream playback; //播放
}@soc.h


struct snd_soc_dai_ops {
	//时钟设置
	int (*set_sysclk)(struct snd_soc_dai *dai,
		int clk_id, unsigned int freq, int dir);
	int (*set_pll)(struct snd_soc_dai *dai, int pll_id, int source,
		unsigned int freq_in, unsigned int freq_out);
	int (*set_clkdiv)(struct snd_soc_dai *dai, int div_id, int div);
	int (*set_bclk_ratio)(struct snd_soc_dai *dai, unsigned int ratio);

	//格式配置
	int (*set_fmt)(struct snd_soc_dai *dai, unsigned int fmt);
	int (*xlate_tdm_slot_mask)(unsigned int slots,
		unsigned int *tx_mask, unsigned int *rx_mask);
	//pcm操作函数
	int (*startup)(struct snd_pcm_substream *,
		struct snd_soc_dai *);
	void (*shutdown)(struct snd_pcm_substream *,
		struct snd_soc_dai *);
	int (*hw_params)(struct snd_pcm_substream *,
		struct snd_pcm_hw_params *, struct snd_soc_dai *);
	int (*hw_free)(struct snd_pcm_substream *,
		struct snd_soc_dai *);
	int (*prepare)(struct snd_pcm_substream *,
		struct snd_soc_dai *);
};


struct snd_soc_component {
	const char *name;
	struct snd_soc_dai_driver *dai_drv;
	const struct snd_soc_component_driver *driver
	int (*read)(struct snd_soc_component *, unsigned int, unsigned int *);
	int (*write)(struct snd_soc_component *, unsigned int, unsigned int);
}

struct snd_soc_component_driver {
	const char *name;
	struct snd_soc_dai_driver *dai_drv
	const struct snd_soc_component_driver *driver
	struct snd_soc_dapm_context dapm;
	const struct snd_kcontrol_new *controls;
	const struct snd_soc_dapm_widget *dapm_widgets;
	const struct snd_soc_dapm_route *dapm_routes;
	int (*probe)(struct snd_soc_component *)
}

struct soc_mixer_control {
	int min, max, platform_max;
	int reg, rreg;
	unsigned int shift, rshift;
	unsigned int sign_bit;
	unsigned int invert:1;
	unsigned int autodisable:1;
}

//运行时数据
struct snd_soc_pcm_runtime {
	struct snd_soc_card *card;
	struct snd_soc_dai_link *dai_link;

	/* runtime devices */
	struct snd_pcm *pcm;   		//创建的pcm
	struct snd_compr *compr;
	struct snd_soc_codec *codec;
	struct snd_soc_platform *platform;
	struct snd_soc_dai *codec_dai;
	struct snd_soc_dai *cpu_dai;
	struct snd_soc_component *component; /* Only valid for AUX dev rtds */
	struct snd_soc_dai **codec_dais;
}


/***********************
 ALSA SoC Dynamic Audio Power Management(dapm)

*/
struct snd_soc_dapm_route {
	const char *sink;
	const char *control;
	const char *source;
	int (*connected)(struct snd_soc_dapm_widget *source,
			 struct snd_soc_dapm_widget *sink);
}

struct snd_soc_dapm_path {
	const char *name;
	union {
		struct {
			struct snd_soc_dapm_widget *source;
			struct snd_soc_dapm_widget *sink;
		};
		struct snd_soc_dapm_widget *node[2];
	};

	int (*connected)(struct snd_soc_dapm_widget *source,
			 struct snd_soc_dapm_widget *sink);
}

struct snd_soc_dapm_widget {
	enum snd_soc_dapm_type id; //类型
	const char *name;		/* widget name */
	struct snd_soc_dapm_context *dapm;
	struct regulator *regulator;		/* attached regulator */
	const struct snd_soc_pcm_stream *params; /* params for dai links */
	int reg; //寄存器
	int (*event)(struct snd_soc_dapm_widget*, struct snd_kcontrol *, int);//
	const struct snd_kcontrol_new *kcontrol_news
	struct snd_kcontrol **kcontrols
}
struct snd_soc_dapm_context {
	enum snd_soc_bias_level bias_level;
	void (*seq_notifier)(struct snd_soc_dapm_context *,
			     enum snd_soc_dapm_type, int);
	struct snd_soc_component *component; /* parent component */
	struct snd_soc_card *card; /* parent card */
}





/***********************
  注册驱动codec_drv.创建struct snd_soc_codec *codec,
  创建component(对应一个物理设备codec),初始化component操作函数
  创建struct snd_soc_dai dai加入到dai_list

  struct snd_soc_codec{
	.component
	}

*/
snd_soc_register_codec(struct device *dev,
			   const struct snd_soc_codec_driver *codec_drv,
			   struct snd_soc_dai_driver *dai_drv,int num_dai){
- struct snd_soc_codec *codec= kzalloc(sizeof(struct snd_soc_codec)
 //设置,初始化component
- snd_soc_component_initialize(&codec->component,&codec_drv->component_driver, dev){
	- component->driver = driver //component中driver指针指向codec_drv->component_driver...为NULL
	- struct snd_soc_dapm_context *dapm = &component->dapm
	- dapm->component = component
	- component->controls = driver->controls
	}
- controls,{//设置component的controls
	- codec->component.controls = codec_drv->controls
	}
- dapm_widgets{
	- codec->component.dapm_widgets = codec_drv->dapm_widgets
	}
- dapm_routes{
	- codec->component.dapm_routes = codec_drv->dapm_routes
	}
- codec->component.probe = snd_soc_codec_drv_probe
  codec->component.write = snd_soc_codec_drv_write
  codec->component.read = snd_soc_codec_drv_read
  //初始化component->dapm
- struct snd_soc_dapm_context *dapm =snd_soc_codec_get_dapm(codec){
	- snd_soc_component_get_dapm(&codec->component)-->return &component->dapm //返回component中dapm
	}  
- codec->driver = codec_drv //设置驱动
  //创建struct snd_soc_dai
- snd_soc_register_dais(struct snd_soc_component *component,struct snd_soc_dai_driver *dai_drv, size_t count){
	- component->dai_drv = dai_drv
	  //创建count个数dai
	- struct snd_soc_dai *dai = kzalloc(sizeof(struct snd_soc_dai)
	- dai->component = component
	- dai->driver = &dai_drv[i] //设置对应的struct snd_soc_dai_driver
	- list_add(&dai->list, &dai_list)//加入到dai_list
	}
- list_add(&codec->list, &codec_list) //加入链表codec_list
}@soc-core.c

//component
static int soc_probe_component(struct snd_soc_card *card,
	struct snd_soc_component *component)
{

}

//注册component
snd_soc_register_component(struct device *dev,
			 const struct snd_soc_component_driver *cmpnt_drv,
			 struct snd_soc_dai_driver *dai_drv,
			 int num_dai){
- 创建snd_soc_component *cmpnt
- cmpnt->driver	= cmpnt_drv
- list_add(&cmpnt->list, &component_list)
  //创建dai 加入链表
- snd_soc_register_dais(struct device *dev,struct snd_soc_dai_driver *dai_drv, size_t count){
	- component->dai_drv = dai_drv
	  //创建count个数dai
	- struct snd_soc_dai *dai = kzalloc(sizeof(struct snd_soc_dai)
	- dai->component = component
	- dai->driver = &dai_drv[i]
	- list_add(&dai->list, &dai_list)//加入到dai_list
	}
}@soc-core.c

//注册platfrom
snd_soc_register_platform(struct device *dev,
		const struct snd_soc_platform_driver *platform_drv){
- struct snd_soc_platform *platform =kzalloc(sizeof(struct snd_soc_platform))
- snd_soc_add_platform(dev, platform, platform_drv){
	- platform->driver = platform_drv
	- list_add(&platform->list, &platform_list)
	}
}

/***********************
 注册soc驱动.注册声卡,并注册所有子设备
 struct snd_soc_card
 struct snd_card
 struct snd_device     //control,pcm
 struct snd_soc_pcm_runtime *rtd
*/
static LIST_HEAD(dai_list)       //注册dai,加入该链表..codec,component都是struct snd_soc_dai dai
static LIST_HEAD(platform_list)  //
static LIST_HEAD(codec_list)     //注册codec,加入该链表
static LIST_HEAD(component_list) //注册component,加入该链表
//soc device
"soc-audio"

//soc driver
static struct platform_driver soc_driver = {
	.driver		= {
		.name		= "soc-audio",
		.pm		= &snd_soc_pm_ops,
	},
	.probe		= soc_probe,
}

snd_soc_init{
- snd_soc_util_init
- platform_driver_register(&soc_driver) //soc_driver.driver.name= "soc-audio"
}@soc-core.c

soc_probe(struct platform_device *pdev){
- struct snd_soc_card *card = platform_get_drvdata
- 注册声卡，snd_soc_register_card(card){
	- snd_soc_initialize_card_lists(card) //初始化链表
	- card->rtd = devm_kzalloc //struct snd_soc_pcm_runtime 
	- 遍历dai_link,card->rtd[i].dai_link = &card->dai_link[i]
	- 初始化soc_card，snd_soc_instantiate_card  1->
	}
}@soc-core.c

//初始化所有soc_card.rtd
1-> snd_soc_instantiate_card(struct snd_soc_card *card){
  //遍历card->dai_link,设置card->rtd中cpu_dai,codec,platform
- soc_bind_dai_link(struct snd_soc_card *card,int num){
	- struct snd_soc_dai_link *dai_link = &card->dai_link[num]
	  //初始化.dai_link和rtd对应
	- struct snd_soc_pcm_runtime *rtd = &card->rtd[num]	  
	- list_for_each_entry(cpu_dai,dai_list){//dai_list中有和dai_link匹配的cpu_dai，设置rtd.cpu_dai
		- rtd->cpu_dai = cpu_dai		
	  }	  
	- list_for_each_entry(codec,codec_list){//codec_list中和dail_link匹配的codec ,设置rtd.codec
		- rtd->codec = codec
		- list_for_each_entry(codec_dai, &dai_list ){//dai_list中有和dai_link匹配的codec_dai，设置rtd.codec_dai
			- rtd->codec_dai = codec_dai
			}
	  }
	- list_for_each_entry(platform,platform_list){//platform_list中和dail_link匹配的platform ,设置rtd.platform
		- rtd->platform = platform
		}
	}
- soc_check_aux_dev //aux
- list_for_each_entry(codec, &codec_list){
	- snd_soc_init_codec_cache
	}
  //创建struct snd_card
- snd_card_new(&card->snd_card)
- card->probe(card)
 //遍历card->dai_link,设置component
- 初始dai，soc_probe_link_components(struct snd_soc_card *card, int num, int order){
	- struct snd_soc_pcm_runtime *rtd = &card->rtd[num]
	- struct snd_soc_platform *platform = rtd->platform
	  //cpudai中的component..order==0时probe
	- struct snd_soc_component *component = rtd->cpu_dai->component
	- soc_probe_component(card, component){
		- struct snd_soc_dapm_context *dapm = snd_soc_component_get_dapm(component)
		- component->card = card
		- snd_soc_dapm_new_controls(dapm, component->dapm_widgets) //damp_widgets
	  	  //遍历dai_list,
		- snd_soc_dapm_new_dai_widgets(dapm, dai) //
		- component->probe(component)
		- snd_soc_add_component_controls(component, component->controls)//controls
		- snd_soc_dapm_add_routes(dapm, component->dapm_routes) //dapm_routes
		- list_add(&component->codec->card_list, &card->codec_dev_list)
		}
	  //codecdai中的component
	- component = rtd->codec_dais[i]->component
	- soc_probe_component(card, component)
	  //platform中的component
	- component = rtd->codec_dais[i]->component
	- soc_probe_component(card, component)
	}

  //遍历card->dai_link,设置dai,创建pcm
- soc_probe_link_dais{
	- struct snd_soc_dai_link *dai_link = &card->dai_link[num]
	- struct snd_soc_pcm_runtime *rtd = &card->rtd[num]
	- struct snd_soc_dai *cpu_dai = rtd->cpu_dai
	- soc_probe_dai(cpu_dai){
		- dai->driver->probe(dai)
		}
	- soc_probe_dai(rtd->codec_dais[i])
	- dai_link->init(rtd)		
	- !dai_link->params,soc_new_pcm(rtd, num)//创建pcm
	- else,soc_link_dai_widgets(card, dai_link, rtd)
	}
  //
- snd_soc_dapm_link_dai_widgets(card)
- snd_soc_dapm_connect_dai_link_widgets(card)
  //card->controls
- card->controls!=NULL,snd_soc_add_card_controls(card, card->controls, card->num_controls)-->
	snd_soc_add_controls(struct snd_card *card, struct device *dev,const struct snd_kcontrol_new *controls)	{
	 //遍历controls
	- struct snd_kcontrol_new *control = &controls[i]
	- snd_ctl_add(card,snd_soc_cnew(control, data, control->name))
	}
- snd_soc_dapm_add_routes
  //注册声卡snd_card,注册snd_device.创建pcm文件节点
- snd_card_register(struct snd_card *card)
}@soc-core.c



/***********************
 soc ctl设备对应snd_card

 snd_device保存在链表card->device中

*/
struct snd_kcontrol *snd_soc_cnew(const struct snd_kcontrol_new *_template,
				  void *data, const char *long_name,
				  const char *prefix){
- struct snd_kcontrol_new template
- template.name //设置名字
- struct snd_kcontrol *kcontrol = snd_ctl_new1(&template, data)
}@soc-core.c

//加入control
snd_soc_add_component_controls-->snd_soc_add_controls-->snd_ctl_add(card, snd_soc_cnew)


/***********************
 soc pcm设备 对应dai_link

*/

int soc_new_pcm(struct snd_soc_pcm_runtime *rtd, int num)
{
- struct snd_soc_dai *codec_dai = rtd->codec_dai
- struct snd_soc_dai *cpu_dai = rtd->cpu_dai
- struct snd_pcm *pcm
- 根据cpu_dai,设置playback,capture
- snd_pcm_new(rtd->card->snd_card, new_name, num, playback,capture, &pcm)
- rtd->pcm = pcm
- 初始化rtd->ops
- snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_PLAYBACK, &rtd->ops) //根据playback或者capture设置
}@soc-pcm.c



sound/soc/soc-core.c
sound/core/init.c
sound/core/control.c
sound/core/info.c
sound/core/device.c
sound/core/pcm.c
sound/core/pcm_lib.c
sound/core/sound.c
/***********************
 节点操作函数
  open 
  ioctl
*/

snd_pcm_f_ops.open(capture)-->snd_pcm_capture_open(snd_lookup_minor_data/*获取snd_pcm pcm*/)-->snd_pcm_open-->
snd_pcm_open_file(file,pcm,stream/*录制，或播放*/){
- 创建snd_pcm_substream，snd_pcm_open_substream{
	- snd_pcm_attach_substream{
		- 若是半双工则返回（只能capture和play单独工作）
		- snd_pcm_runtime *runtime//创建runtime	
		- runtime->status //status初始值设置为0
		- runtime->control //control初始值设置为0
		}
	- snd_pcm_hw_constraints_init
	}
- 创建snd_pcm_file *pcm_file。设置substream
- 设置为file->private_data = pcm_file
}@pcm_native.c


/*
 数据流程:codec-->dma-->driver read to userbuffer

 codec到dma。。prt以boundary为界
 boundary 能够整除buffer_size的最大数(long 类型)
 runtime->status->hw_ptr      初始值为0 snd_pcm_attach_substream
 runtime->hw_ptr_base         codec写到dma的有效数据(未读)起始位置，初始值为0，以boundary为界
 runtime->hw_ptr_interrupt    初始值0
*/
snd_pcm_period_elapsed(dma中断中调用)/snd_pcm_update_hw_ptr(读写数据时主动调用)
-->snd_pcm_update_hw_ptr0{
- old_hw_ptr = runtime->status->hw_ptr//记录老位置
- 获取dma内存中有效数据位置末尾偏移值，pos = substream->ops->pointer
- hw_base = runtime->hw_ptr_base
- new_hw_ptr = runtime->hw_ptr_base + pos //偏移位置。runtime->hw_ptr_base有效数据的起始位置
- 处理多个中断情况{
	- hw_base += runtime->buffer_size
	}
- new_hw_ptr < old_hw_ptr{ //超出buffer
	- hw_base += runtime->buffer_size
	- new_hw_ptr = hw_base + pos
	}
//时间检查
- 计算获取数据的时间，这些数据需要的时间大于当前时间{//一段时间内获取的数据多了。采样率下固定数据量

	}
//更新位置值
- runtime->hw_ptr_interrupt //中断后获取的数据位置(boundary为界)，period_size的整数倍
- runtime->hw_ptr_base = hw_base //新数据的起始位置
- runtime->status->hw_ptr = new_hw_ptr //新数据的结束位置
- runtime->status->audio_tstamp//时间
- snd_pcm_update_state //唤醒等待的进程
}@pcm_lib.c

/* 读取数据


- 目标地址：用户空间传入的buffer
- 源地址：dma的位置+偏移值
源：
 runtime->dma_area dma的虚拟地址
当前dma有效数据指针：
 runtime->control->appl_ptr 
dma总大小：frame个数，
 runtime->buffer_size = params_buffer_size(params)
偏移位置：
 runtime->control->appl_ptr % runtime->buffer_size 
*/
snd_pcm_f_ops.unlocked_ioctl-->snd_pcm_capture_ioctl{
- 获取snd_pcm_file *pcm_file = file->private_data //是一个snd_pcm_file pcm
- snd_pcm_capture_ioctl1(pcm_file->substream)
}@pcm_native.c

snd_pcm_capture_ioctl1(SNDRV_PCM_IOCTL_READI_FRAMES)@pcm_native.c-->snd_pcm_lib_read
-->snd_pcm_lib_read1(buffer,frames,snd_pcm_lib_read_transfer){
- snd_pcm_update_hw_ptr
- snd_pcm_capture_avail{ //获取有效数据
	- runtime->status->hw_ptr - runtime->control->appl_ptr不为0
	}
- 若当前没有数据则等待，wait_for_avail{
	- add_wait_queue(&runtime->tsleep, &wait) //初始化并设置可中断等待
	- schedule_timeout(wait_time)
	}
- frames //要读取的帧数
- tarnsfer(stream,appl_ofs, data, offset,frames)-->
  snd_pcm_lib_read_transfer(stream,hwoff/*dma的偏移*/,buffer,offset/*已经读取的frames*/，frames/*本次需读取的frame*/){
	- 根据buffer和offset，计算目标保存地址位置
	- substream->ops->copy
	- 没有copy函数{
		- 计算源地址的位置，runtime->dma_area + frames_to_bytes(runtime, hwoff)
		- unalign_copy_to_user
		}
	}
- runtime->control->appl_ptr +=frames //更新读取后的buffer位置
}@pcm_lib.c

//stream的操作函数在此设置，snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_PLAYBACK, &rtd->ops)@soc-pcm.c
snd_pcm_lib_read1-->snd_pcm_update_hw_ptr-->snd_pcm_update_hw_ptr0-->substream->ops->pointer@pcm_lib.c
rtd->ops.pointer-->soc_pcm_pointer{
- 获取offset，platform->driver->ops->pointer
- 计算各个驱动的delay{
	- cpu_dai->driver->ops->delay
	- codec_dai->driver->ops->delay
	- platform->driver->delay
	}
- 
}@soc-pcm.c


//设置hw_params
snd_pcm_common_ioctl1(SNDRV_PCM_IOCTL_HW_PARAMS)-->snd_pcm_common_ioctl1
-->snd_pcm_hw_params_user-->snd_pcm_hw_params{
- 调整参数，snd_pcm_hw_refine
- substream->ops->hw_params//设置参数
- 设置substream->runtime{
	- format
	- channel
	- rate //采样率
	- period_size = params_period_size(params)
	- periods = params_periods(params)
	- buffer_size= params_buffer_size(params)
	- boundary= buffer_size
	}
}@pcm_navite.c


substream.hw_params-->rtd->ops.hw_params-->soc_pcm_hw_params{
- rtd->dai_link->ops->hw_params
- codec_dai->driver->ops->hw_params
- cpu_dai->driver->ops->hw_params
- platform->driver->ops->hw_params{
	- 
	- snd_pcm_set_runtime_buffer(bufp/*substream->dma_buffer*/){
		runtime->dma_buffer_p = bufp
		runtime->dma_area = bufp->area
		runtime->dma_addr = bufp->addr
		runtime->dma_bytes = bufp->bytes
		}
	}
}@soc-pcm.c

//mmap 应用层传入的参数构造了vm_area_struct
snd_pcm_f_ops.mmap(file,vm_area_struct)-->snd_pcm_mmap{
- snd_pcm_mmap_status //状态
- snd_pcm_mmap_control //control
- snd_pcm_mmap_data-->substream->ops->mmap()-->platform->driver->mmap
}@pcm_native.c

/***********************
 dapm ALSA SoC Dynamic Audio Power Management
*/


