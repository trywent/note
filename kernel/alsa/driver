/***********************

*/
dai_link(接口信息)将codec_dai(codec的驱动),cpu_dai(驱动)关联起来。
codec和dai基本同时注册（同一个dev上的codec和dai）

//操作流程
substream-->rtd{
- platform
- cpu_dai
- codec_dai	
}


static LIST_HEAD(dai_list)       //注册dai,加入该链表..codec,component都是dai
static LIST_HEAD(platform_list)  //
static LIST_HEAD(codec_list)     //注册codec,加入该链表
static LIST_HEAD(component_list) //注册component,加入该链表

//注册codec,创建dai
snd_soc_register_codec(struct device *dev,
			   const struct snd_soc_codec_driver *codec_drv,
			   struct snd_soc_dai_driver *dai_drv,int num_dai){
- 创建snd_soc_codec *codec= kzalloc(sizeof(struct snd_soc_codec)
- codec->driver = codec_drv //设置驱动
- 加入到链表，list_add(&codec->list, &codec_list) //加入链表codec_list
- snd_soc_register_dais(struct device *dev,struct snd_soc_dai_driver *dai_drv, size_t count){
	  //创建count个数dai
	- snd_soc_dai *dai = kzalloc(sizeof(struct snd_soc_dai)
	- dai->driver = &dai_drv[i]
	- 查找codec_list中匹配的codec,dai->codec = codec
	- list_add(&dai->list, &dai_list)//加入到dai_list
	}
}@soc-core.c

//注册component
snd_soc_register_component(struct device *dev,
			 const struct snd_soc_component_driver *cmpnt_drv,
			 struct snd_soc_dai_driver *dai_drv,
			 int num_dai){
- 创建snd_soc_component *cmpnt
- cmpnt->driver	= cmpnt_drv
- list_add(&cmpnt->list, &component_list)
  //创建dai 加入链表
- snd_soc_register_dais(struct device *dev,struct snd_soc_dai_driver *dai_drv, size_t count){
	  //创建count个数dai
	- snd_soc_dai *dai = kzalloc(sizeof(struct snd_soc_dai)
	- dai->driver = &dai_drv[i]
	- 查找codec_list中匹配的codec,dai->codec = codec
	- list_add(&dai->list, &dai_list)//加入到dai_list
	}
}@soc-core.c

//注册platfrom
snd_soc_register_platform(struct device *dev,
		const struct snd_soc_platform_driver *platform_drv){
- struct snd_soc_platform *platform =kzalloc(sizeof(struct snd_soc_platform))
- snd_soc_add_platform(dev, platform, platform_drv){
	- platform->driver = platform_drv
	- list_add(&platform->list, &platform_list)
	}
}

/***********************
 注册soc驱动
*/
audio_card_init{
- 创建，platform_device_alloc("soc-audio", -1)
- 设置设备数据(用于注册声卡设备)，platform_set_drvdata(snd_soc_card)
- 注册，platform_device_add
}

//driver
snd_soc_init{
- 
- platform_driver_register(&soc_driver) //soc_driver.driver.name= "soc-audio"
}@soc-core.c

soc_probe(struct platform_device *pdev){
- struct snd_soc_card *card = platform_get_drvdata
- 注册声卡，snd_soc_register_card(card){
	- snd_soc_initialize_card_lists(card) //初始化链表
	- card->rtd = devm_kzalloc //struct snd_soc_pcm_runtime 
	- 遍历dai_link,card->rtd[i].dai_link = &card->dai_link[i]
	- 初始化soc_card，snd_soc_instantiate_card  1->
	}
}@soc-core.c

//初始化所有soc_card.rtd
1-> snd_soc_instantiate_card(card){
  //遍历card->dai_link,设置card->rtd中cpu_dai,codec,platform
- soc_bind_dai_link(struct snd_soc_card *card,int num){
	- struct snd_soc_dai_link *dai_link = &card->dai_link[num]
	- struct snd_soc_pcm_runtime *rtd = &card->rtd[num]	  
	- list_for_each_entry(cpu_dai,dai_list){//dai_list中有和dai_link匹配的cpu_dai，设置rtd.cpu_dai
		- rtd->cpu_dai = cpu_dai		
	  }	  
	- list_for_each_entry(codec,codec_list){//codec_list中和dail_link匹配的codec ,设置rtd.codec
		- rtd->codec = codec
		- list_for_each_entry(codec_dai, &dai_list ){//dai_list中有和dai_link匹配的codec_dai，设置rtd.codec_dai
			- rtd->codec_dai = codec_dai
			}
	  }
	- list_for_each_entry(platform,platform_list){//platform_list中和dail_link匹配的platform ,设置rtd.platform
		- rtd->platform = platform
		}
	}
- soc_check_aux_dev //aux
- list_for_each_entry(codec, &codec_list){
	- snd_soc_init_codec_cache
	}
  //创建card
- 创建card，snd_card_create{
	- 创建ctl设备，snd_ctl_create@control.c
	- snd_info_card_create
	}@init.c
- card->probe(card)
 //遍历card->dai_link,设置component
- 初始dai，soc_probe_link_components(num){
	- struct snd_soc_pcm_runtime *rtd = &card->rtd[num]
	- struct snd_soc_dai *cpu_dai = rtd->cpu_dai
	- struct snd_soc_dai *codec_dai = rtd->codec_dai
	- struct snd_soc_platform *platform = rtd->platform	
	- soc_probe_codec(card, cpu_dai->codec){//probe cpudai中的codec
		- const struct snd_soc_codec_driver *driver = codec->driver
		- codec->card = card
		- snd_soc_dapm_new_controls
		- 遍历dai_list,snd_soc_dapm_new_dai_widgets //
		- driver->probe(codec)
		- 加入到list_add(card->codec_dev_list)
		}	
	- soc_probe_codec(card, codec_dai->codec){//probe codecdai中的codec
	- soc_probe_platform{
		- const struct snd_soc_platform_driver *driver = platform->driver
		- driver->probe(codec)
		}
	}

  //遍历card->dai_link,设置dai,pcm
- soc_probe_link_dais{
	- cpu_dai{
		- 若不带codec则创建，snd_soc_dapm_new_dai_widgets//rtd中cpu_dai
		- cpu_dai->driver->probe
		- list_add(card->dai_dev_list)
		}
	- codec_dai{
		- cpu_dai->driver->probe
		- list_add(card->dai_dev_list)
		}		
	- dai_link不带params创建pcm。soc_new_pcm
	- 否则关联dai widget
	}
//
- snd_soc_add_card_controls{

	}
  //注册声卡snd_card,创建pcm文件节点
- snd_card_register(&card->snd_card){
	- 创建card0/1，device_create(sound_class)
	  //创建pcm节点
	- 注册声卡上的设备，snd_device_register_all(遍历card->devices){
		- 遍历card->devices
		- dev->ops->dev_register-->snd_pcm_dev_register@pcm.c-->
			snd_register_device_for_dev(创建文件节点)-->device_create@sound.c
		}
	}@device.c
}@soc-core.c



/***********************
 component

*/
//ctl设备
snd_ctl_create-->snd_ctl_dev_register@control.c


//pcm设备
soc_new_pcm(rtd,num){
- snd_pcm_new-->_snd_pcm_new{
	- 设置snd_device_ops //注册创建pcm文件节点操作函数
	- 创建struct snd_pcm pcm
	- snd_pcm_new_stream{ //创建stream(录制，播放的操作函数)
		- 初始化pcm->streams
		- 创建snd_pcm_substream substream
		- 
		}@pcm.c
	- snd_device_new{
		- 创建snd_device
		- 加入到list_add(&card->devices)
		}@device.c
	}@pcm.c
- rtd->pcm = pcm //设置rtd (runtime device)
- 初始化rtd{//设置操作函数
	- soc_pcm_open,soc_pcm_hw_params
	- 设置copy,mmap为platform.ops  //数据传输平台相关？
	}
- 设置stream.substeam的操作函数，snd_pcm_set_ops(&rtd->ops)
- 平台驱动不为空，platform->driver->pcm_new(rtd)
}@soc-pcm.c

//创建pcm节点。注册声卡时调用
snd_device_register/snd_device_register_all(card->device/*card中的设备，snd_pcm_new加入*/)-->
ops.dev_register-->snd_device_ops.dev_register@device.c-->snd_pcm_dev_register(device){
- 
- 创建名字pcmC%iD%ip（card->number,device）
- snd_register_device_for_dev(snd_pcm_f_ops,pcm){
	- 设置操作函数f_ops，snd_pcm_f_ops //pcm节点操作函数
	- device_create(pcm/*作为private_data*/)@sound.c
	- 
	}
- 
}@pcm.c


sound/soc/soc-core.c
sound/core/init.c
sound/core/control.c
sound/core/info.c
sound/core/device.c
sound/core/pcm.c
sound/core/pcm_lib.c
/***********************
 节点操作函数
*/
open:
snd_pcm_f_ops.open(capture)-->snd_pcm_capture_open(snd_lookup_minor_data/*获取snd_pcm pcm*/)-->snd_pcm_open-->
snd_pcm_open_file(file,pcm,stream/*录制，或播放*/){
- 创建snd_pcm_substream，snd_pcm_open_substream{
	- snd_pcm_attach_substream{
		- 若是半双工则返回（只能capture和play单独工作）
		- snd_pcm_runtime *runtime//创建runtime	
		- runtime->status //status初始值设置为0
		- runtime->control //control初始值设置为0
		}
	- snd_pcm_hw_constraints_init
	}
- 创建snd_pcm_file *pcm_file。设置substream
- 设置为file->private_data = pcm_file
}@pcm_native.c


/*
 数据流程:codec-->dma-->driver read to userbuffer

 codec到dma。。prt以boundary为界
 boundary 能够整除buffer_size的最大数(long 类型)
 runtime->status->hw_ptr      初始值为0 snd_pcm_attach_substream
 runtime->hw_ptr_base         codec写到dma的有效数据(未读)起始位置，初始值为0，以boundary为界
 runtime->hw_ptr_interrupt    初始值0
*/
snd_pcm_period_elapsed(dma中断中调用)/snd_pcm_update_hw_ptr(读写数据时主动调用)
-->snd_pcm_update_hw_ptr0{
- old_hw_ptr = runtime->status->hw_ptr//记录老位置
- 获取dma内存中有效数据位置末尾偏移值，pos = substream->ops->pointer
- hw_base = runtime->hw_ptr_base
- new_hw_ptr = runtime->hw_ptr_base + pos //偏移位置。runtime->hw_ptr_base有效数据的起始位置
- 处理多个中断情况{
	- hw_base += runtime->buffer_size
	}
- new_hw_ptr < old_hw_ptr{ //超出buffer
	- hw_base += runtime->buffer_size
	- new_hw_ptr = hw_base + pos
	}
//时间检查
- 计算获取数据的时间，这些数据需要的时间大于当前时间{//一段时间内获取的数据多了。采样率下固定数据量

	}
//更新位置值
- runtime->hw_ptr_interrupt //中断后获取的数据位置(boundary为界)，period_size的整数倍
- runtime->hw_ptr_base = hw_base //新数据的起始位置
- runtime->status->hw_ptr = new_hw_ptr //新数据的结束位置
- runtime->status->audio_tstamp//时间
- snd_pcm_update_state //唤醒等待的进程
}@pcm_lib.c
//读取数据
/*
- 目标地址：用户空间传入的buffer
- 源地址：dma的位置+偏移值
源：
 runtime->dma_area dma的虚拟地址
当前dma有效数据指针：
 runtime->control->appl_ptr 
dma总大小：frame个数，
 runtime->buffer_size = params_buffer_size(params)
偏移位置：
 runtime->control->appl_ptr % runtime->buffer_size 
*/
ioctl:
snd_pcm_f_ops.unlocked_ioctl-->snd_pcm_capture_ioctl{
- 获取snd_pcm_file *pcm_file = file->private_data //是一个snd_pcm_file pcm
- snd_pcm_capture_ioctl1(pcm_file->substream)
}@pcm_native.c

snd_pcm_capture_ioctl1(SNDRV_PCM_IOCTL_READI_FRAMES)@pcm_native.c-->snd_pcm_lib_read
-->snd_pcm_lib_read1(buffer,frames,snd_pcm_lib_read_transfer){
- snd_pcm_update_hw_ptr
- snd_pcm_capture_avail{ //获取有效数据
	- runtime->status->hw_ptr - runtime->control->appl_ptr不为0
	}
- 若当前没有数据则等待，wait_for_avail{
	- add_wait_queue(&runtime->tsleep, &wait) //初始化并设置可中断等待
	- schedule_timeout(wait_time)
	}
- frames //要读取的帧数
- tarnsfer(stream,appl_ofs, data, offset,frames)-->
  snd_pcm_lib_read_transfer(stream,hwoff/*dma的偏移*/,buffer,offset/*已经读取的frames*/，frames/*本次需读取的frame*/){
	- 根据buffer和offset，计算目标保存地址位置
	- 若stream又copy函数，substream->ops->copy
	- 没有copy函数{
		- 计算源地址的位置，runtime->dma_area + frames_to_bytes(runtime, hwoff)
		- unalign_copy_to_user
		}
	}
- runtime->control->appl_ptr +=frames //更新读取后的buffer位置
}@pcm_lib.c

//stream的操作函数在此设置，snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_PLAYBACK, &rtd->ops)@soc-pcm.c
snd_pcm_lib_read1-->snd_pcm_update_hw_ptr-->snd_pcm_update_hw_ptr0-->substream->ops->pointer@pcm_lib.c
rtd->ops.pointer-->soc_pcm_pointer{
- 获取offset，platform->driver->ops->pointer
- 计算各个驱动的delay{
	- cpu_dai->driver->ops->delay
	- codec_dai->driver->ops->delay
	- platform->driver->delay
	}
- 
}@soc-pcm.c


//设置hw_params
snd_pcm_common_ioctl1(SNDRV_PCM_IOCTL_HW_PARAMS)-->snd_pcm_common_ioctl1
-->snd_pcm_hw_params_user-->snd_pcm_hw_params{
- 调整参数，snd_pcm_hw_refine
- substream->ops->hw_params//设置参数
- 设置substream->runtime{
	- format
	- channel
	- rate //采样率
	- period_size = params_period_size(params)
	- periods = params_periods(params)
	- buffer_size= params_buffer_size(params)
	- boundary= buffer_size
	}
}@pcm_navite.c


substream.hw_params-->rtd->ops.hw_params-->soc_pcm_hw_params{
- rtd->dai_link->ops->hw_params
- codec_dai->driver->ops->hw_params
- cpu_dai->driver->ops->hw_params
- platform->driver->ops->hw_params{
	- 
	- snd_pcm_set_runtime_buffer(bufp/*substream->dma_buffer*/){
		runtime->dma_buffer_p = bufp
		runtime->dma_area = bufp->area
		runtime->dma_addr = bufp->addr
		runtime->dma_bytes = bufp->bytes
		}
	}
}@soc-pcm.c

//mmap 应用层传入的参数构造了vm_area_struct
snd_pcm_f_ops.mmap(file,vm_area_struct)-->snd_pcm_mmap{
- snd_pcm_mmap_status //状态
- snd_pcm_mmap_control //control
- snd_pcm_mmap_data-->substream->ops->mmap()-->platform->driver->mmap
}@pcm_native.c

/***********************
 dapm ALSA SoC Dynamic Audio Power Management
*/


