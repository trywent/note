/***********************
  一个声卡对应一个control
  struct snd_card
  struct snd_device:pcm,mixer,MIDI

 信息节点:/proc/asound/card0/pcm0p/sub0

*/
struct snd_device_ops {
	int (*dev_free)(struct snd_device *dev);
	int (*dev_register)(struct snd_device *dev);
	int (*dev_disconnect)(struct snd_device *dev);
};

struct snd_device {
	struct snd_card *card;		/* card which holds this device */
	snd_device_type_t type;		/* device type */
	void *device_data;		/* device structure */
	struct snd_device_ops *ops;	/* operations */
}

struct snd_card {
	char driver[16];		/* driver name */
	char mixername[80];		/* mixer name */
	char components[128];		/* card components delimited with space */
	struct list_head devices;	/* 保存struct snd_device*/
	struct device ctl_dev;		/* control字符设备节点*/

}

struct snd_minor {
	int type;			/* SNDRV_DEVICE_TYPE_XXX */
	int card;			/* card number */
	int device;			/* device number */
	const struct file_operations *f_ops;	// pcm设备的操作函数保存在这个位置 
	struct device *dev;		/* device for sysfs */
}

static const struct file_operations snd_fops =
{
.owner =THIS_MODULE,
.open =	snd_open(struct inode *inode, struct file *file){
	- unsigned int minor = iminor(inode) //获取设备号minor
	- struct snd_minor *mptr = snd_minors[minor] //获取对应的子设备
	- file->f_op = fops_get(mptr->f_ops) //设置为子设备的操作函数
	- file->f_op->open(inode, file)
	}
}

//alsa子系统初始.设置所有的字符设备操作
subsys_initcall(alsa_sound_init)-->alsa_sound_init
{
- struct snd_minor = major =CONFIG_SND_MAJOR	116
- register_chrdev(major, "alsa", &snd_fops) //设置所有alsa字符设备的操作函数
- snd_info_init
- 
}@sound.c


//创建struct snd_card.创建control
int snd_card_create/snd_card_new(struct device *parent, int idx, const char *xid,
		    struct module *module, int extra_size,
		    struct snd_card **card_ret){
- struct snd_card *card = kzalloc(sizeof(*card) + extra_size)
 //初始化snd_card->card_dev sysfs中使用
- device_initialize(&card->card_dev)
- card->card_dev.class = sound_class
- snd_ctl_create(card)@control.c //每个声卡一个control设备
- snd_info_card_create(card)
}@init.c

//struct snd_card注册
snd_card_register(struct snd_card *card){
- device_add(&card->card_dev)
- snd_device_register_all(struct snd_card *card)-->
	//遍历&card->devices
	- __snd_device_register(struct snd_device *dev){
	- dev->ops->dev_register-->snd_pcm_dev_register@pcm.c-->
		snd_register_device_for_dev-->device_create@sound.c //创建字符设备节点
	}
- init_info_for_card(card)
}@init.c


//struct snd_device设备创建
snd_device_new(struct snd_card *card, enum snd_device_type type,
		   void *device_data, struct snd_device_ops *ops){
- struct snd_device *dev = kzalloc(sizeof(*dev))
 //初始化struct snd_device
- dev->device_data = device_data //设置为pcm或card
- dev->ops = ops 
  //查找适合位置,设备加入到card->devices
- list_for_each_prev(p, &card->devices)
- list_add(&dev->list, p) 
}@device.c

//struct snd_device设备注册
snd_register_device(pcm->card, pcm->device,struct file_operations *f_ops,pcm,struct device *device){
- struct snd_minor *preg = kmalloc(sizeof *preg)
- preg->f_ops = f_ops
- device->devt = MKDEV(major, minor)
- device_add(device)
}@sound.c

kernel/sound/core/sound.c
kernel/include/sound/core.h
kernel/sound/core/init.c
kernel/sound/core/device.c
/***********************
 control接口.每个snd_card对应一个control
*/
struct snd_kcontrol {
	struct list_head list;		/* list of controls */
	unsigned int count;		/* count of same elements */
	snd_kcontrol_info_t *info;
	snd_kcontrol_get_t *get;
	snd_kcontrol_put_t *put;
}@control.c

struct snd_kcontrol_new {
	snd_ctl_elem_iface_t iface;	/* interface identifier */
	unsigned int device;		/* device/client number */
	const unsigned char *name;	/* ASCII name of item */
	snd_kcontrol_info_t *info;
	snd_kcontrol_get_t *get;
	snd_kcontrol_put_t *put;
}


//创建control
struct snd_kcontrol *snd_ctl_new1(const struct snd_kcontrol_new *ncontrol){
- struct snd_kcontrol *kctl
- snd_ctl_new(&kctl, count
- 设置kctl
}

int snd_ctl_add(struct snd_card *card, struct snd_kcontrol *kcontrol){
- snd_ctl_find_id(card, &id) //判断是否已经加入
- list_add_tail(&kcontrol->list, &card->controls) //加入到card->controls
- snd_ctl_notify
}

_______________________
//默认操作函数
static const struct file_operations snd_ctl_f_ops =
{
	.read =		snd_ctl_read,
	.open =		snd_ctl_open,
	.unlocked_ioctl = snd_ctl_ioctl
	.compat_ioctl =	snd_ctl_ioctl_compat,
}@control.c

//control字符设备
int snd_ctl_create(struct snd_card *card){
- static struct snd_device_ops ops = {
	.dev_register =	snd_ctl_dev_register,
	};
- snd_device_initialize(&card->ctl_dev, card){
	- device_initialize(dev)
	- dev->class = sound_class
	}@init.c
- dev_set_name(&card->ctl_dev, "controlC%d", card->number) //设置struce device 名controlCX
- snd_device_new(card, SNDRV_DEV_CONTROL, card, &ops)//创建struct snd_device
}@control.c

snd_device->ops->dev_register-->snd_ctl_dev_register{
- struct snd_card *card = device->device_data
- snd_register_device(SNDRV_DEVICE_TYPE_CONTROL, &snd_ctl_f_ops, card, &card->ctl_dev)@control.c
}
//创建control
#define SOC_SINGLE_EXT(xname, xreg, xshift, xmax, xinvert,\
	 xhandler_get, xhandler_put) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
	.info = snd_soc_info_volsw, \
	.get = xhandler_get, .put = xhandler_put, \
	.private_value = SOC_SINGLE_VALUE(xreg, xshift, xmax, xinvert, 0) }

SOC_SINGLE_EXT(xname, FUN_REG(xreg), 0, 1, 0, mixer_get, mixer_set)


kernel/include/sound/control.h
kernel/sound/core/control.c
/***********************
 PCM接口：
*/
struct snd_pcm_substream {
	struct snd_pcm *pcm;
	struct snd_pcm_str *pstr;
	char name[32];			/* substream name */
	int stream;			/* stream (direction) */
	/* -- hardware operations -- */
	const struct snd_pcm_ops *ops;
	/* -- runtime information -- */
	struct snd_pcm_runtime *runtime;
}

struct snd_pcm_str {
	int stream;				/* stream (direction) */
	struct snd_pcm *pcm;
	/* -- substreams -- */
	unsigned int substream_count;
	unsigned int substream_opened;
	struct snd_pcm_substream *substream;
}

struct snd_pcm {
	int device; /* device number */
	char id[64];
	char name[80];
	struct snd_pcm_str streams[2];
}@pcm.h

_______________________
//pcm字符设备操作函数
const struct file_operations snd_pcm_f_ops[2] = {
	{//play
		.write =		snd_pcm_write,
		.open =			snd_pcm_playback_open,
		.compat_ioctl = 	snd_pcm_ioctl_compat,
		.mmap =			snd_pcm_mmap,
	{//capture
		.owner =		THIS_MODULE,
		.read =			snd_pcm_read,
		.open =			snd_pcm_capture_open,
		.compat_ioctl = 	snd_pcm_ioctl_compat,
		.mmap =			snd_pcm_mmap,
	}
}@pcm_native.c

//创建pcm字符设备
int snd_pcm_new(struct snd_card *card,struct snd_pcm ** rpcm){ //创建
- static struct snd_device_ops ops ={//默认操作函数
	.dev_register =	snd_pcm_dev_register	
	}
- struct snd_pcm *pcm = kzalloc(sizeof(*pcm), GFP_KERNEL)
- pcm->device = device
- snd_pcm_new_stream(pcm, SNDRV_PCM_STREAM_PLAYBACK, playback_count))
- snd_pcm_new_stream(pcm, SNDRV_PCM_STREAM_CAPTURE, capture_count)){ //创建录制，播放pcm的stream
	- struct snd_pcm_str *pstr = &pcm->streams[stream]
	- snd_device_initialize(&pstr->dev, pcm->card){
		- device_initialize(dev) //初始化struct device
		- dev->class = sound_class //设置class,创建字符文件
		}@init.c
	- dev_set_name(&pstr->dev, "pcmC%iD%i%c")//设置pcm->device名字
	- struct snd_pcm_substream *substream = kzalloc(sizeof(*substream)
	}@pcm.c
- snd_device_new(card, SNDRV_DEV_PCM, pcm, &ops)//创建struct snd_device
}@pcm.c

//注册创建字符设备
snd_device->ops->dev_register(struct snd_device *dev)-->
snd_pcm_dev_register{
- snd_pcm_add(pcm)
 //创建字符设备
- sprintf(str, "pcmC%iD%ip", pcm->card->number, pcm->device) //设置名字
- snd_register_device(devtype, pcm->card, pcm->device,&snd_pcm_f_ops[cidx], pcm, &pcm->streams[cidx].dev)
}@pcm.c

kernel/include/sound/pcm.h
kernel/sound/core/pcm.c
kernel/sound/core/pcm_native.c
kernel/sound/core/pcm_lib.c


/***********************
 ASoC Machine Driver:(平台驱动和codec的粘合剂)

 dai_link(接口信息)将codec_dai,cpu_dai关联起来。

 dirver developer设置:
	struct snd_soc_dai_link     cpu,codec连接关系
	struct snd_soc_codec_driver codec驱动
	struct snd_soc_dai_driver   dai驱动

*/


struct snd_soc_card {
	struct snd_soc_dai_link *dai_link;
}


int snd_soc_register_card(struct snd_soc_card *card)
int snd_soc_unregister_card(struct snd_soc_card *card)

//注册codec_driver
snd_soc_register_codec(struct device *dev,const struct snd_soc_codec_driver *codec_drv,
		  struct snd_soc_dai_driver *dai_drv,int num_dai)

//注册component
snd_soc_register_component(struct device *dev,const struct snd_soc_component_driver *cmpnt_drv,
		struct snd_soc_dai_driver *dai_drv,int num_dai)

//platform
snd_soc_register_platform(struct device *dev,const struct snd_soc_platform_driver *platform_drv)

____________________
Machine DAI Configuration:将cpu的ADI接口与codec粘合

/* snd_soc_dai_link用来设置设备上每个DAI接口
 * corgi digital audio interface glue - connects codec <--> CPU 
 */
static struct snd_soc_dai_link corgi_dai = {
	.name = "WM8731",
	.stream_name = "WM8731",
	.cpu_dai_name = "pxa-is2-dai",
	.codec_dai_name = "wm8731-hifi",
	.platform_name = "pxa-pcm-audio",
	.codec_name = "wm8713-codec.0-001a",
	.init = corgi_wm8731_init,
	.ops = &corgi_ops,
};

struct snd_soc_card then sets up the machine with its DAIs. e.g.

/* snd_soc_card关联设备和DAIs接口
 * corgi audio machine driver 
 */
static struct snd_soc_card snd_soc_corgi = {
	.name = "Corgi",
	.dai_link = &corgi_dai,
	.num_links = 1,
};

====================
codec:
硬件无关的。代码中没有平台相关的处理

codec驱动实现功能：
 1) Codec DAI and PCM configuration
 2) Codec control IO - using I2C, 3 Wire(SPI) or both APIs
 3) Mixers and audio controls
 4) Codec audio operations
可选的功能:
 5) DAPM description.//电源管理
 6) DAPM event handler.
 7) DAC Digital mute control.


1 - Codec DAI and PCM configuration
-----------------------------------
Each codec driver must have a struct snd_soc_dai_driver to define its DAI and
PCM capabilities and operations. This struct is exported so that it can be
registered with the core by your machine driver.

e.g.

static struct snd_soc_dai_ops wm8731_dai_ops = {
	.prepare	= wm8731_pcm_prepare,
	.hw_params	= wm8731_hw_params,
	.shutdown	= wm8731_shutdown,
	.digital_mute	= wm8731_mute,
	.set_sysclk	= wm8731_set_dai_sysclk,
	.set_fmt	= wm8731_set_dai_fmt,
};

struct snd_soc_dai_driver wm8731_dai = {
	.name = "wm8731-hifi",
	.playback = {
		.stream_name = "Playback",
		.channels_min = 1,
		.channels_max = 2,
		.rates = WM8731_RATES,
		.formats = WM8731_FORMATS,},
	.capture = {
		.stream_name = "Capture",
		.channels_min = 1,
		.channels_max = 2,
		.rates = WM8731_RATES,
		.formats = WM8731_FORMATS,},
	.ops = &wm8731_dai_ops,
	.symmetric_rates = 1,
};


2 - Codec control IO
--------------------
codec通常通过i2c或spi接口控制(AC97控制和数据传输都通过DAI)

codec通过缓存寄存器数据，提供寄存器数据的读写。
	/* IO control data and register cache */
	void *control_data; /* codec control (i2c/3wire) data */
	void *reg_cache;

读写函数:-
    unsigned int (*read)(struct snd_soc_codec *, unsigned int);
    int (*write)(struct snd_soc_codec *, unsigned int, unsigned int);

硬件读写函数(通常指向I2C, SPI or AC97的读写函数):-
	hw_write_t hw_write;
	hw_read_t hw_read;


3 - Mixers and audio controls
-----------------------------
所有的codec mixers和audio controls可使用以下宏定义@soc.h.

    #define SOC_SINGLE(xname, reg, shift, mask, invert)

定义了一个控制:-
  xname = Control name e.g. "Playback Volume"
  reg = codec register
  shift = control bit(s) offset in register
  mask = control bit size(s) e.g. mask of 7 = 3 bits
  invert = the control is inverted

Other macros include:-

    #define SOC_DOUBLE(xname, reg, shift_left, shift_right, mask, invert)

A stereo control

    #define SOC_DOUBLE_R(xname, reg_left, reg_right, shift, mask, invert)

A stereo control spanning 2 registers

    #define SOC_ENUM_SINGLE(xreg, xshift, xmask, xtexts)

Defines an single enumerated control as follows:-

   xreg = register
   xshift = control bit(s) offset in register
   xmask = control bit(s) size
   xtexts = pointer to array of strings that describe each setting

   #define SOC_ENUM_DOUBLE(xreg, xshift_l, xshift_r, xmask, xtexts)

Defines a stereo enumerated control


4 - Codec Audio Operations
--------------------------
ALSA 操作:-

/* SoC audio ops */
struct snd_soc_ops {
	int (*startup)(struct snd_pcm_substream *);
	void (*shutdown)(struct snd_pcm_substream *);
	int (*hw_params)(struct snd_pcm_substream *, struct snd_pcm_hw_params *);
	int (*hw_free)(struct snd_pcm_substream *);
	int (*prepare)(struct snd_pcm_substream *);
};

5 - DAPM description.
---------------------
睡眠

6 - DAPM event handler
----------------------

Power states:-

	SNDRV_CTL_POWER_D0: /* full On */
	/* vref/mid, clk and osc on, active */

	SNDRV_CTL_POWER_D1: /* partial On */
	SNDRV_CTL_POWER_D2: /* partial On */

	SNDRV_CTL_POWER_D3hot: /* Off, with power */
	/* everything off except vref/vmid, inactive */

	SNDRV_CTL_POWER_D3cold: /* Everything Off, without power */


7 - Codec DAC digital mute control
----------------------------------
静音，停止向DAC写数据
i.e.

static int wm8974_mute(struct snd_soc_dai *dai, int mute)
{
	struct snd_soc_codec *codec = dai->codec;
	u16 mute_reg = snd_soc_read(codec, WM8974_DAC) & 0xffbf;

	if (mute)
		snd_soc_write(codec, WM8974_DAC, mute_reg | 0x40);
	else
		snd_soc_write(codec, WM8974_DAC, mute_reg);
	return 0;
}
/***********************
ASoC Platform Driver:
可分为：音频数据访问(audio DMA)，数字音频配置(SoC DAI(digit audio interface) configuration),控制(control)
 pcm处理函数,读取写入
*/


/* 音频处理函数SoC audio ops */
struct snd_soc_ops {
	int (*startup)(struct snd_pcm_substream *);
	void (*shutdown)(struct snd_pcm_substream *);
	int (*hw_params)(struct snd_pcm_substream *, struct snd_pcm_hw_params *);
	int (*hw_free)(struct snd_pcm_substream *);
	int (*prepare)(struct snd_pcm_substream *);
	int (*trigger)(struct snd_pcm_substream *, int);
};

snd_soc_platform_driver包含以上操作函数:
struct snd_soc_platform_driver {
	char *name;

	int (*probe)(struct platform_device *pdev);
	int (*remove)(struct platform_device *pdev);
	int (*suspend)(struct platform_device *pdev, struct snd_soc_cpu_dai *cpu_dai);
	int (*resume)(struct platform_device *pdev, struct snd_soc_cpu_dai *cpu_dai);

	/* pcm creation and destruction */
	int (*pcm_new)(struct snd_card *, struct snd_soc_codec_dai *, struct snd_pcm *);
	void (*pcm_free)(struct snd_pcm *);

	/*
	 * For platform caused delay reporting.
	 * Optional.
	 */
	snd_pcm_sframes_t (*delay)(struct snd_pcm_substream *,
		struct snd_soc_dai *);

	/* platform stream ops */
	struct snd_pcm_ops *pcm_ops;
};
__________________
SoC DAI Drivers:

Each SoC DAI driver must provide the following features:-

 1) Digital audio interface (DAI) description
 2) Digital audio interface configuration
 3) PCM's description
 4) SYSCLK configuration
 5) Suspend and resume (optional)


====================
DAI(digital audio interface):有三种接口ac97,i2s,pcm

ac97：
i2s：4线
Tx 			  发送数据
Rx 			  接收数据
bit clock (BCLK) 	  位时钟
left/right clock (LRC)    左右通道同步时钟(区分数据来自哪个通道)

pcm：和i2s类似

