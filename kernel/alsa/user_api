/***********************
 接口ioctl命令定义:uapi/sound/asound.h
*/
//pcm
SNDRV_PCM_IOCTL_PVERSION     
SNDRV_PCM_IOCTL_INFO         
SNDRV_PCM_IOCTL_TSTAMP       
SNDRV_PCM_IOCTL_TTSTAMP      
SNDRV_PCM_IOCTL_HW_REFINE    
SNDRV_PCM_IOCTL_HW_PARAMS    
SNDRV_PCM_IOCTL_HW_FREE      
SNDRV_PCM_IOCTL_SW_PARAMS    
SNDRV_PCM_IOCTL_STATUS
//midi
NDRV_RAWMIDI_IOCTL_PVERSION
NDRV_RAWMIDI_IOCTL_INFO    
NDRV_RAWMIDI_IOCTL_PARAMS  
NDRV_RAWMIDI_IOCTL_STATUS  
NDRV_RAWMIDI_IOCTL_DROP    
NDRV_RAWMIDI_IOCTL_DRAIN   

SNDRV_TIMER_IOCTL_PVERSION   
SNDRV_TIMER_IOCTL_NEXT_DEVICE
SNDRV_TIMER_IOCTL_TREAD      
SNDRV_TIMER_IOCTL_GINFO      
SNDRV_TIMER_IOCTL_GPARAMS    
SNDRV_TIMER_IOCTL_GSTATUS    
SNDRV_TIMER_IOCTL_SELECT     
SNDRV_TIMER_IOCTL_INFO       
SNDRV_TIMER_IOCTL_PARAMS     
SNDRV_TIMER_IOCTL_STATUS     

//control
SNDRV_CTL_IOCTL_PVERSION       
SNDRV_CTL_IOCTL_CARD_INFO       
SNDRV_CTL_IOCTL_ELEM_LIST       
SNDRV_CTL_IOCTL_ELEM_INFO       
SNDRV_CTL_IOCTL_ELEM_READ       
SNDRV_CTL_IOCTL_ELEM_WRITE      
SNDRV_CTL_IOCTL_ELEM_LOCK

/***********************
 mixer操作
 "/dev/snd/controlC%u"
 
*/

//获取所有控制的信息
mixer_open{ 
- struct snd_ctl_elem_list elist
- struct mixer *mixer
- fd = open"/dev/snd/controlC%u")
 //获取控制项数目,并初始化
- ioctl(fd, SNDRV_CTL_IOCTL_ELEM_LIST, &elist) 
- mixer->ctl = calloc(elist.count, sizeof(struct mixer_ctl))
- mixer->elem_info = calloc(elist.count, sizeof(struct snd_ctl_elem_info)
- elist.pids = calloc(elist.count, sizeof(struct snd_ctl_elem_id))
  //再次获取
- ioctl(fd, SNDRV_CTL_IOCTL_ELEM_LIST, &elist) 
 //遍历mixer->elem_info
- ioctl(fd, SNDRV_CTL_IOCTL_ELEM_INFO, ei) //获取info
 //若elem是枚举类型.获取所有枚举类型的名字
- ioctl(fd, SNDRV_CTL_IOCTL_ELEM_INFO, &tmp)
}


//设置值
mixer_ctl_set_value(struct mixer_ctl *ctl, unsigned int id, int value){
- struct snd_ctl_elem_value ev
- ioctl(ctl->mixer->fd, SNDRV_CTL_IOCTL_ELEM_READ, &ev) //读取
- ev.value.integer.value[id] = value			//设置
- ioctl(ctl->mixer->fd, SNDRV_CTL_IOCTL_ELEM_WRITE, &ev)//写入
}

/***********************
 pcm操作
 "/dev/snd/pcmC%uD%u%c"
 
*/
pcm_open(card,device,flags,config){
- 创建struct pcm，打开"/dev/snd/pcmC%uD%u%c"
- ioctl(SNDRV_PCM_IOCTL_INFO)//获取snd_pcm_info,
- 初始化并设置hw参数{// struct snd_pcm_hw_params params
	- param_init(&params)
	- 设置采样率，格式，声道数，period size,period count
	- 设置ioctl( SNDRV_PCM_IOCTL_HW_PARAMS, &params)
	}
- 获取kernel适配的period_size，period_count。计算buffer
- mmap_buffer=mmap(pcm->fd)
- 设置software参数{
	- ioctl(pcm->fd, SNDRV_PCM_IOCTL_SW_PARAMS)
	}
- pcm_hw_mmap_status
}

pcm_prepare(struct pcm *pcm){
- ioctl(pcm->fd, SNDRV_PCM_IOCTL_PREPARE)
}

pcm_start(struct pcm *pcm){
- ioctl(pcm->fd, SNDRV_PCM_IOCTL_START)
}

pcm_stop(struct pcm *pcm){
- ioctl(pcm->fd, SNDRV_PCM_IOCTL_DROP)
}

//write
pcm_write(struct pcm *pcm, const void *data, unsigned int count){
- struct snd_xferi x
- x.buf = (void*)data
- pcm_prepare(pcm)
- ioctl(pcm->fd, SNDRV_PCM_IOCTL_WRITEI_FRAMES, &x)
}

//read
pcm_read(struct pcm *pcm, const void *data, unsigned int count){
- struct snd_xferi x
- x.buf = (void*)data
- pcm_start(pcm)
- ioctl(pcm->fd, SNDRV_PCM_IOCTL_READI_FRAMES, &x)
}



android/external/tinyalsa/pcm.c


/***********************
 kernel:
 
*/



确认runtime的buffer，frame
runtime->buffer_size - runtime->control->appl_ptr % runtime->buffer_size


appl_ptr = runtime->control->appl_ptr //指针
appl_ofs = appl_ptr % runtime->buffer_size //偏移

//reset
snd_pcm_f_ops.unlocked_ioctl-->snd_pcm_playback_ioctl/snd_pcm_capture_ioctl-->
snd_pcm_playback_ioctl1/snd_pcm_capture_ioctl1-->snd_pcm_common_ioctl1(SNDRV_PCM_IOCTL_RESET)
-->snd_pcm_reset-->snd_pcm_action_nonatomic-->snd_pcm_action_reset@pcm_native.c


//read
snd_pcm_capture_ioctl1-->
snd_pcm_lib_read1(buffer,frames,snd_pcm_lib_read_transfer){
- snd_pcm_update_hw_ptr
- snd_pcm_capture_avail{ //获取有效数据

	}
- 若当前没有数据则等待，wait_for_avail{
	- add_wait_queue(&runtime->tsleep, &wait) //初始化并设置可中断等待
	- schedule_timeout(wait_time)
	}
- tarnsfer-->
  snd_pcm_lib_read_transfer(stream,hwoff/*dma的偏移*/,buffer,offset/*已经读取的frames*/，frames/*本次需读取的frame*/){
	- 根据buffer和offset，计算目标保存地址位置
	- 若stream又copy函数，substream->ops->copy
	- 没有copy函数{
		- 计算源地址的位置，runtime->dma_area + frames_to_bytes(runtime, hwoff)
		- unalign_copy_to_user
		}
	}
}@pcm_lib.c

snd_pcm_common_ioctl1(SNDRV_PCM_IOCTL_HW_PARAMS)-->snd_pcm_common_ioctl1
-->snd_pcm_hw_params_user-->snd_pcm_hw_params{
- 调整参数，snd_pcm_hw_refine
- 设置substream->runtime{
	- format
	- channel
	- rate //采样率
	- period_size，periods,buffer_size
	}
}@pcm_navite.c

kernel/sound/cor/pcm_native.c
