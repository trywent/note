/*
DVB - Digital Video Broadcasting 数字视频广播
VBI - Vertical Blanking Interval 场消隐期(利用视频的场消隐期发送文字信息)
*/
结构:
    device instances                //v4l2_device
      |
      +-sub-device instances        //v4l2_subdev
      |
      \-V4L2 device nodes           //video_device
	  |
	  \-filehandle instances


- v4l2_device  //设备结构，用来存放设备状态
- v4l2_subdev  //初始化子设备的命令和方法
- video_device //创建V4L2设备节点，并维护设备数据/dev/videoX, /dev/vbiX and /dev/radioX
- Filehandle-specific structs//文件操作结构，包含每个文件操作的数据
- videobuf     //视频缓冲处理

//v4l2 framework功能
1
2


/*
 video_device 真正的设备节点通过video_device创建

*/
动态创建：
struct video_device *vdev = video_device_alloc();
vdev->release = video_device_release; //必须设置,最后一个使用者退出时调用

struct video_device{
- struct device dev
- struct cdev *cdev
- struct v4l2_device *v4l2_dev: //设置为v4l2_device.
- struct device *dev_parent://当v4l2_device为空时设置。如：多个PCI devices共用一个v4l2_device 
- char name[32]: 设置为唯一标识.
- const struct v4l2_file_operations fops: //设置为v4l2_file_operations.
- const struct v4l2_ioctl_ops *ioctl_ops:// 建议使用v4l2_ioctl_ops，精简ioctl操作
- struct v4l2_prio_state *prio: 权限管理指向一个v4l2_prio_state结构，用来实现VIDIOC_G/S_PRIORITY.可以实现自己的v4l2_prio_state
- unsigned long flags: optional.
- spinlock_t fh_lock: 设置NULL，或在执行v4l2_file_operations前设置为mutex_lock
- v4l2_std_id tvnorms;		/* Supported tv norms 视频格式标准*/
- struct mutex *lock;
}

若使用v4l2_ioctl_ops, 则需设置 v4l2_file_operations.unlocked_ioctl 为video_ioctl2。
不要使用.ioctl(被废弃)。

void v4l2_disable_ioctl(struct video_device *vdev, unsigned int cmd) //关闭某个ioctl

//关联多媒体框架
struct media_pad *pad = &my_vdev->pad;
media_entity_init(&vdev->entity, 1, pad, 0)


//v4l2_file_operations and locking
若设备有长延时操作则实现自己的锁操作(如配置USB摄像的曝光)。
使用videobuf时需传入相同的锁 
在videobuf2中需实现wait_prepare和wait_finish用来unlock/lock.若使用了video_device 也必须
在wait_prepare和wait_finish中实现unlock/lock.
热插拔设备执行v4l2_device_disconnect前也需获取锁

//video_device 注册
video_register_device(vdev, VFL_TYPE_GRABBER, -1/*自动选择*/)-->__video_register_device{
- name_base //根据类型设置名字,VFL_TYPE_GRABBER:video VFL_TYPE_VBI:vbi VFL_TYPE_RADIO:radio v4l-subdev swradio
- minor_offset,minor_cnt //若是固定设备号,设置设备号范围
- 设备号vdev->minor,编号vdev->num//查找并设置minor,若使用固定设备号每种设备都有固定范围
//初始化字符设备
- vdev->cdev = cdev_alloc
- vdev->cdev->ops = &v4l2_fops
- cdev_add(vdev->cdev, MKDEV(VIDEO_MAJOR, vdev->minor)
//注册到sysfs
- vdev->dev.class = &video_class
- vdev->dev.devt = MKDEV(VIDEO_MAJOR, vdev->minor)
- dev_set_name(&vdev->dev, "%s%d", name_base, vdev->num)
- device_register(&vdev->dev)
//注册到media
- media_device_register_entity
}

//文件操作函数..最终调用到video_device->fops
struct file_operations v4l2_fops = {
- read-->vdev->fops->read
- v4l2_write-->vdev->fops->write
- v4l2_mmap-->vdev->fops->mmap
- v4l2_ioctl-->vdev->fops->unlocked_ioctl
}

video_device_release()//注册失败,释放video_device struct。
video_unregister_device(vdev)//注销
media_entity_cleanup(&vdev->entity)//若初始了media entity在release中执行



kernel/drivers/media/v4l2-core/v4l2-dev.c
/*
 struct v4l2_device

*/

注册：
v4l2_device_register(struct device *dev, struct v4l2_device *v4l2_dev){
- INIT_LIST_HEAD(&v4l2_dev->subdevs)
- v4l2_prio_init //初始化v4l2_prio_state
- kref_init //引用计数
- v4l2_dev->dev = dev
- 设置设备名，若设备名为空则将从dev中获取设备名(驱动名+总线号)
- dev_get_drvdata(dev)为空,设置dev-driver_data为v4l2_dev，dev_set_drvdata
}
注销：
v4l2_device_unregister(struct v4l2_device *v4l2_dev){ 
- v4l2_device_disconnect
- list_for_each_entry_safe{ //遍历注销子设备
	- v4l2_device_unregister_subdev(sd)//注销subdev
	- client = v4l2_get_subdevdata(sd),i2c_unregister_device(client) //是i2c,注销该设备
	- spi = v4l2_get_subdevdata(sd),spi_unregister_device(spi)
	}
}

关联多媒体：
- dev_set_drvdata()设置dev->driver_data指向包含v4l2_device实例的结构
- v4l2_device中mdev域设置为一个已经注册的media_device

设备名：
- 设备名v4l2_dev->name为空时会自动设为dev中的驱动名
- 可通过v4l2_device_set_name()设置


若是设插拔设备(usb)被移除，则需先调用：v4l2_device_disconnect(struct v4l2_device *v4l2_dev);

可通过以下方法遍历获取已注册的设备：//一个设备有多个驱动(不同功能)
static int callback(struct device *dev, void *p)
{
	struct v4l2_device *v4l2_dev = dev_get_drvdata(dev);

	/* test if this device was inited */
	if (v4l2_dev == NULL)
		return 0;
	...
	return 0;
}

int iterate(void *p)
{
	struct device_driver *drv;
	int err;

	/* Find driver 'ivtv' on the PCI bus.
	   pci_bus_type is a global. For USB busses use usb_bus_type. */
	drv = driver_find("ivtv", &pci_bus_type);
	/* iterate over all ivtv device instances */
	err = driver_for_each_device(drv, NULL, p, callback);
	put_driver(drv);
	return err;
}


/* 
 struct v4l2_subdev(音视频编码解码)

*/
v4l2_subdev通常关联有更底层的总线设备，若是i2c设备：
v4l2_set_subdevdata() //关联i2c设备，保存i2c_client指针
i2c_set_clientdata()/i2c_get_clientdata()//i2c设备关联v4l2_subdev
v4l2_get_subdev_hostdata()/v4l2_set_subdev_hostdata() //v4l2_subdev保存子设备私有数据

//子设备的操作总结构.子设备只实现部分操作函数(audio或者video)
struct v4l2_subdev_ops {
	const struct v4l2_subdev_core_ops  *core{
		int (*g_chip_ident)(struct v4l2_subdev *sd, struct v4l2_dbg_chip_ident *chip);
		int (*log_status)(struct v4l2_subdev *sd);
		int (*init)(struct v4l2_subdev *sd, u32 val);
		...
	};
	const struct v4l2_subdev_tuner_ops *tuner;
	const struct v4l2_subdev_audio_ops *audio;
	const struct v4l2_subdev_video_ops *video;
};
v4l2_subdev_init(sd, &ops)//初始化操作函数	
v4l2_device_register_subdev(v4l2_dev, sd)//注册v4l2_subdev到v4l2_device
v4l2_device_unregister_subdev(sd)//注销
操作函数:
sd->ops->core->g_chip_ident(sd, &chip)/v4l2_subdev_call(sd, core, g_chip_ident, &chip)
v4l2_device_call_all(v4l2_dev, 0, core, g_chip_ident, &chip)//调用所有的子设备操作函数,没有对应函数的子设备会被跳过
v4l2_device_call_until_err(v4l2_dev, 0, core, g_chip_ident, &chip) //带错误检测的
v4l2_subdev_notify(sd, notification, arg) //当事件发生是子设备可通过，通知父设备


//若与media框架交互，需通过media_entity_init()设置v4l2_subdev中的media_entity：
struct media_pad *pads = &my_sd->pads;
media_entity_init(&sd->entity, npads, pads, 0);
media_entity_cleanup(&sd->entity);//销毁sub-device时需清除media entity：







/*
 I2C sub-device drivers

*/
i2c设备太常见,所以提供了一些帮助函数

struct chipname_state {//一般将v4l2_subdev嵌入到struct
	struct v4l2_subdev sd;
	...  /* additional state fields */
};
v4l2_i2c_subdev_init(&state->sd, client, subdev_ops)//初始化

从v4l2_subdev获取chipname_state的帮助函数:
static inline struct chipname_state *to_state(struct v4l2_subdev *sd)
{
	return container_of(sd, struct chipname_state, sd);
}
struct i2c_client *client = v4l2_get_subdevdata(sd)//从v4l2_subdev获取i2c_client struct
struct v4l2_subdev *sd = i2c_get_clientdata(client) //从i2c_client获取v4l2_subdev struct


bridge driver的帮助函数:
struct v4l2_subdev *sd = v4l2_i2c_new_subdev(v4l2_dev, adapter,
	       "module_foo", "chipid", 0x36, NULL);

v4l2_i2c_new_subdev_cfg
v4l2_i2c_new_subdev_board



/*
 打开debug,向下面属性文件写数据
*/

/sys/class/video4linux/<devX>/dev_debug

video_device helper functions
-----------------------------
void *video_get_drvdata(struct video_device *vdev); //private data
void video_set_drvdata(struct video_device *vdev, void *data); //在调用video_register_device()之前
struct video_device *video_devdata(struct file *file); //返回struct file关联的video_device
void *video_drvdata(struct file *file); //返回video_device的video_devdata
struct v4l2_device *v4l2_dev = video_device->v4l2_dev; //从video_device获取v4l2_device
const char *video_device_node_name(struct video_device *vdev);//设备节点名


video buffer helper functions
-----------------------------
read(), mmap() and overlay() 

/*
 struct v4l2_fh(file handle)

*/
调用v4l2_fh_init()，设置video_device->flags中V4L2_FL_USES_V4L2_FH位。
file->private_data=v4l2_fh//在文件打开时设置

若v4l2_fh包含在其他结构体中：
open{
- v4l2_fh_init
 v4l2_fh_add 
}
release{
- v4l2_fh_del
- v4l2_fh_exit
}

例:
struct my_fh {
	int blah;
	struct v4l2_fh fh;
};

v4l2_fh的函数说明:
void v4l2_fh_init(struct v4l2_fh *fh, struct video_device *vdev)//v4l2_file_operations->open()时执行
void v4l2_fh_add(struct v4l2_fh *fh)//v4l2_fh加入到video_device
void v4l2_fh_del(struct v4l2_fh *fh) //v4l2_fh从video_device移除
void v4l2_fh_exit(struct v4l2_fh *fh)//

若v4l2_fh没有被包含，可使用如下函数:
int v4l2_fh_open(struct file *filp)//初始化并加入到video_device
int v4l2_fh_release(struct file *filp)//从video_device移除v4l2_fh


int v4l2_fh_is_singular(struct v4l2_fh *fh)//判断是否是唯一的v4l2_fh
int v4l2_fh_is_singular_file(struct file *filp)

/* 
 V4L2 events

*/
传递事件到用户空间，必须使用v4l2_fh

merge() //将两个最老的事件合并
replace() //用一个新事件替换老事件

//将事件加入到video device的队列。驱动填充type和data
void v4l2_event_queue(struct video_device *vdev, const struct v4l2_event *ev)

//驱动调用video_device->ioctl_ops->vidioc_subscribe_event检测能否产生相关事件。
//若可以则调用v4l2_event_subscribe()订阅该事件(上层监听该事件)
int v4l2_event_subscribe(struct v4l2_fh *fh,
			 struct v4l2_event_subscription *sub, unsigned elems,
			 const struct v4l2_subscribed_event_ops *ops)
- v4l2_event_unsubscribe()

  vidioc_unsubscribe_event在结构体v4l2_ioctl_ops中.
  V4L2_EVENT_ALL取消提交所有事件

- v4l2_event_pending()
  
  Returns the number of pending events. Useful when implementing poll.

事件通过poll系统调用传递到用户空间。
Events are delivered to user space through the poll system call. The driver
can use v4l2_fh->wait (a wait_queue_head_t) as the argument for poll_wait().

//V4L2 clock


CCF(Common Clock Framewrok)
