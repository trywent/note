/***********************
 filesystem

*/
struct inode {
 umode_t  i_mode;
 const struct inode_operations	*i_op;
}
struct inode_operations {
	int (*create) (struct inode *,struct dentry *, umode_t, bool);
	int (*link) (struct dentry *,struct inode *,struct dentry *);
	int (*unlink) (struct inode *,struct dentry *);
	int (*symlink) (struct inode *,struct dentry *,const char *);
	int (*mkdir) (struct inode *,struct dentry *,umode_t);
	int (*rmdir) (struct inode *,struct dentry *);
	int (*mknod) (struct inode *,struct dentry *,umode_t,dev_t);
	int (*rename) (struct inode *, struct dentry *,
			struct inode *, struct dentry *);
}

struct file {
 struct path		f_path;
 struct inode		*f_inode;
 const struct file_operations	*f_op;
}

const struct file_operations kernfs_file_fops = {
	.read		= kernfs_fop_read,
	.write		= kernfs_fop_write,
	.llseek		= generic_file_llseek,
	.mmap		= kernfs_fop_mmap,
	.open		= kernfs_fop_open,
	.release	= kernfs_fop_release,
	.poll		= kernfs_fop_poll,
}


//创建文件夹 dir.c
struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
					 const char *name, umode_t mode,
					 void *priv, const void *ns){
- struct kernfs_node *kn = kernfs_new_node(parent, name)
- kn->priv = priv //设置为kobj
- kernfs_add_one(kn){
	- kernfs_link_sibling(kn)
	}
}@dir.c

//创建文件 file.c
struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
					 const char *name,
					 umode_t mode, loff_t size,
					 const struct kernfs_ops *ops,
					 void *priv, const void *ns,
					 struct lock_class_key *key){
- struct kernfs_node *kn = kernfs_new_node(parent, name)
- kn->attr.ops = ops,kn->priv = priv //设置操作函数ops,kobj
- kernfs_add_one(kn)
}@file.c



kernel/fs/kernfs/dir.c
kernel/fs/kernfs/file.c

/***********************
 filesystem 系统调用

*/

//mkdir

//mknod

//mount：
compat_sys_mount@compat.c-->do_mount-->do_new_mount-->do_kern_mount-->vfs_kern_mount
@namespace.c-->mount_fs-->(不同的文件系统file_system_type)type->mount@super.c-->
(FAT32)vfat_mount@namei_vfat.c

//sys_open
SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, umode_t, mode)
(构造sys_open)sys_open-->do_sys_open@open.c-->do_filp_open-->path_openat@namei.c

//sys_read
SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t, count)
(构造系统调用函数)sys_read-->vfs_read-->do_sync_read-->filp->f_op->aio_read@read_write.c
-->(vFAT)generic_file_aio_read@filemap.c

static struct file_system_type *file_systems;
register_filesystem(将文件系统加入到file_system链表)@filesystems.c




fs/filesystems.c
fs/read_write.c
fs/open.c
fs/namei.c
=================================

